<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Corning Sun&#39;s Blog</title>
  
  <subtitle>Where&#39;s my sunshine...</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://corningsun.com/"/>
  <updated>2018-08-03T14:29:37.753Z</updated>
  <id>https://corningsun.com/</id>
  
  <author>
    <name>Corning Sun</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Mac 常用设置</title>
    <link href="https://corningsun.com/MacSettings/"/>
    <id>https://corningsun.com/MacSettings/</id>
    <published>2018-07-17T15:53:53.000Z</published>
    <updated>2018-08-03T14:29:37.753Z</updated>
    
    <content type="html"><![CDATA[<h4 id="fn-设置"><a href="#fn-设置" class="headerlink" title="fn 设置"></a>fn 设置</h4><blockquote><p>勾选 ‘将F1、F2 等键用作标准功能键’，否则 IDE 中各种快捷键都要加上 fn</p></blockquote><p><img src="https://i.imgur.com/TXVyWsK.jpg" alt=""></p><h4 id="触摸板设置"><a href="#触摸板设置" class="headerlink" title="触摸板设置"></a>触摸板设置</h4><blockquote><p>勾选 ‘轻点来点按’，可以省下不少力气</p></blockquote><p><img src="https://i.imgur.com/SNEx6no.jpg" alt=""></p><h4 id="触发角设置待机"><a href="#触发角设置待机" class="headerlink" title="触发角设置待机"></a>触发角设置待机</h4><blockquote><p>系统偏好配置 -&gt; 桌面与屏幕保护程序 -&gt; 触发角  </p></blockquote><p><img src="https://i.imgur.com/KG6WSr0.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;fn-设置&quot;&gt;&lt;a href=&quot;#fn-设置&quot; class=&quot;headerlink&quot; title=&quot;fn 设置&quot;&gt;&lt;/a&gt;fn 设置&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;勾选 ‘将F1、F2 等键用作标准功能键’，否则 IDE 中各种快捷键都要加上 fn&lt;/p
      
    
    </summary>
    
    
      <category term="Mac" scheme="https://corningsun.com/tags/Mac/"/>
    
  </entry>
  
  <entry>
    <title>Mac 工具整理</title>
    <link href="https://corningsun.com/MacTools/"/>
    <id>https://corningsun.com/MacTools/</id>
    <published>2018-07-16T20:33:16.000Z</published>
    <updated>2018-08-16T17:31:00.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>记录自己用的 Mac 软件</p></blockquote><h4 id="终端"><a href="#终端" class="headerlink" title="终端"></a>终端</h4><ul><li><a href="https://brew.sh/" target="_blank" rel="noopener">brew</a></li><li><a href="https://github.com/robbyrussell/oh-my-zsh" target="_blank" rel="noopener">zsh</a></li><li><a href="https://www.iterm2.com/" target="_blank" rel="noopener">iTerm2</a></li></ul><h4 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h4><ul><li><a href="https://git-scm.com/" target="_blank" rel="noopener">git</a></li><li><a href="https://www.gitkraken.com/" target="_blank" rel="noopener">GitKraken</a></li></ul><h4 id="IDE"><a href="#IDE" class="headerlink" title="IDE"></a>IDE</h4><ul><li><a href="https://www.jetbrains.com/" target="_blank" rel="noopener">jetbrains 全家桶</a></li></ul><h4 id="浏览器"><a href="#浏览器" class="headerlink" title="浏览器"></a>浏览器</h4><ul><li><a href="https://www.google.com/chrome/" target="_blank" rel="noopener">Chrome</a></li></ul><h4 id="密码管理"><a href="#密码管理" class="headerlink" title="密码管理"></a>密码管理</h4><ul><li><a href="https://www.enpass.io/" target="_blank" rel="noopener">Enpass</a></li></ul><h4 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h4><ul><li><a href="https://www.yinxiang.com/" target="_blank" rel="noopener">印象笔记</a></li></ul><h4 id="虚拟机"><a href="#虚拟机" class="headerlink" title="虚拟机"></a>虚拟机</h4><ul><li><a href="https://www.parallels.com/cn/products/desktop/" target="_blank" rel="noopener">Parallels Desktop</a></li></ul><h4 id="翻译"><a href="#翻译" class="headerlink" title="翻译"></a>翻译</h4><ul><li><a href="https://itunes.apple.com/cn/app/itranslate-%E7%BF%BB%E8%AF%91-%E7%BF%BB%E8%AD%AF%E5%92%8C%E8%AF%8D%E5%85%B8/id884952790?mt=12" target="_blank" rel="noopener">iTranslate</a></li></ul><h4 id="Finder"><a href="#Finder" class="headerlink" title="Finder"></a>Finder</h4><ul><li><a href="http://zipzapmac.com/go2shell" target="_blank" rel="noopener">Go2Shell</a></li><li><a href="https://itunes.apple.com/cn/app/easy-new-file-free-%E5%8F%B3%E9%94%AE%E8%8F%9C%E5%8D%95-%E5%88%9B%E5%BB%BA%E6%96%87%E4%BB%B6/id1163105418?mt=12" target="_blank" rel="noopener">Easy new file</a></li></ul><h4 id="剪切板"><a href="#剪切板" class="headerlink" title="剪切板"></a>剪切板</h4><ul><li><a href="https://itunes.apple.com/cn/app/paste-2/id967805235?mt=12" target="_blank" rel="noopener">Paste 2</a></li></ul><h4 id="图床"><a href="#图床" class="headerlink" title="图床"></a>图床</h4><ul><li><a href="https://toolinbox.net/iPic/" target="_blank" rel="noopener">iPic</a></li></ul><h4 id="截图"><a href="#截图" class="headerlink" title="截图"></a>截图</h4><ul><li><a href="https://zh.xnipapp.com/" target="_blank" rel="noopener">Xnip</a></li><li>QQ 自带截图</li></ul><h4 id="桌面"><a href="#桌面" class="headerlink" title="桌面"></a>桌面</h4><ul><li><a href="http://irvue.tumblr.com/" target="_blank" rel="noopener">Irvue</a></li></ul><h4 id="翻墙"><a href="#翻墙" class="headerlink" title="翻墙"></a>翻墙</h4><ul><li><a href="https://github.com/qiuyuzhou/ShadowsocksX-NG/" target="_blank" rel="noopener">ShadowsocksX-NG</a></li></ul><h4 id="私人云盘"><a href="#私人云盘" class="headerlink" title="私人云盘"></a>私人云盘</h4><ul><li><a href="https://www.seafile.com/en/download/" target="_blank" rel="noopener">SeaFile</a></li></ul><h4 id="办公"><a href="#办公" class="headerlink" title="办公"></a>办公</h4><ul><li><a href="https://www.office.com/" target="_blank" rel="noopener">微软全家桶</a></li><li><a href="https://www.xmind.cn/" target="_blank" rel="noopener">XMind</a></li></ul><h4 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h4><ul><li><a href="https://mediaatelier.com/CheatSheet/" target="_blank" rel="noopener">CheatSheet</a></li><li><a href="https://github.com/keycastr/keycastr" target="_blank" rel="noopener">keycastr</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;记录自己用的 Mac 软件&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;终端&quot;&gt;&lt;a href=&quot;#终端&quot; class=&quot;headerlink&quot; title=&quot;终端&quot;&gt;&lt;/a&gt;终端&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:/
      
    
    </summary>
    
    
      <category term="Tools" scheme="https://corningsun.com/tags/Tools/"/>
    
      <category term="Mac" scheme="https://corningsun.com/tags/Mac/"/>
    
  </entry>
  
  <entry>
    <title>IntelliJ IDEA 插件</title>
    <link href="https://corningsun.com/IdeaPlugins/"/>
    <id>https://corningsun.com/IdeaPlugins/</id>
    <published>2018-07-16T20:33:16.000Z</published>
    <updated>2018-07-18T23:10:58.279Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>记录自己用的 Idea 插件</p></blockquote><ul><li>Maven Helper</li><li>SonarLint</li><li>Alibaba Java Coding Guidelines</li><li>AceJump</li><li>Markdown support</li><li>PlantUML integration</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;记录自己用的 Idea 插件&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Maven Helper&lt;/li&gt;
&lt;li&gt;SonarLint&lt;/li&gt;
&lt;li&gt;Alibaba Java Coding Guidelines&lt;/li&gt;
&lt;li&gt;A
      
    
    </summary>
    
    
      <category term="Tools" scheme="https://corningsun.com/tags/Tools/"/>
    
      <category term="Java" scheme="https://corningsun.com/tags/Java/"/>
    
      <category term="Idea" scheme="https://corningsun.com/tags/Idea/"/>
    
  </entry>
  
  <entry>
    <title>Velocity 如何输出 Markdown 标题</title>
    <link href="https://corningsun.com/Velocity-%E5%A6%82%E4%BD%95%E8%BE%93%E5%87%BA-Markdown-%E6%A0%87%E9%A2%98/"/>
    <id>https://corningsun.com/Velocity-如何输出-Markdown-标题/</id>
    <published>2018-07-09T11:17:19.000Z</published>
    <updated>2018-07-09T03:50:21.562Z</updated>
    
    <content type="html"><![CDATA[<p>试过了 <a href="https://wizardforcel.gitbooks.io/velocity-doc/content/41.html" target="_blank" rel="noopener">Velocity 各种转义</a>也没能找到输出 Markdown 标题的方法，于是干脆将标题设置为自定义为字符串了，具体实现如下：</p><h2 id="Java-代码"><a href="#Java-代码" class="headerlink" title="Java 代码"></a>Java 代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.corning.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.velocity.VelocityContext;</span><br><span class="line"><span class="keyword">import</span> org.apache.velocity.app.VelocityEngine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VelocityAnnotationOutput</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        VelocityEngine ve = <span class="keyword">new</span> VelocityEngine();</span><br><span class="line">        ve.init();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> (FileWriter readmeWriter = <span class="keyword">new</span> FileWriter(<span class="keyword">new</span> File(<span class="string">"demo.txt"</span>))) &#123;</span><br><span class="line">            VelocityContext context = getVelocityContextMD();</span><br><span class="line">            context.put(<span class="string">"msg"</span>, <span class="string">"Hello World!"</span>);</span><br><span class="line">            ve.getTemplate(<span class="string">"src/main/resources/templates/demo.vm"</span>).merge(context, readmeWriter);</span><br><span class="line">            readmeWriter.flush();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> VelocityContext <span class="title">getVelocityContextMD</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        VelocityContext context = <span class="keyword">new</span> VelocityContext();</span><br><span class="line">        context.put(<span class="string">"H1"</span>, <span class="string">"#"</span>);</span><br><span class="line">        context.put(<span class="string">"H2"</span>, <span class="string">"##"</span>);</span><br><span class="line">        context.put(<span class="string">"H3"</span>, <span class="string">"###"</span>);</span><br><span class="line">        context.put(<span class="string">"H4"</span>, <span class="string">"####"</span>);</span><br><span class="line">        context.put(<span class="string">"H5"</span>, <span class="string">"#####"</span>);</span><br><span class="line">        <span class="keyword">return</span> context;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Velocity-模版"><a href="#Velocity-模版" class="headerlink" title="Velocity 模版"></a>Velocity 模版</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$H1 $msg</span><br><span class="line">$H2 $msg</span><br><span class="line">$H3 $msg</span><br><span class="line">$H4 $msg</span><br><span class="line">$H5 $msg</span><br></pre></td></tr></table></figure><h2 id="模版输出结果"><a href="#模版输出结果" class="headerlink" title="模版输出结果"></a>模版输出结果</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># Hello World!</span></span><br><span class="line"><span class="section">## Hello World!</span></span><br><span class="line"><span class="section">### Hello World!</span></span><br><span class="line"><span class="section">#### Hello World!</span></span><br><span class="line"><span class="section">##### Hello World!</span></span><br></pre></td></tr></table></figure><h2 id="求问"><a href="#求问" class="headerlink" title="求问"></a>求问</h2><p>还有没有更优雅的方式？</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;试过了 &lt;a href=&quot;https://wizardforcel.gitbooks.io/velocity-doc/content/41.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Velocity 各种转义&lt;/a&gt;也没能找到输出 Markd
      
    
    </summary>
    
    
      <category term="Java" scheme="https://corningsun.com/tags/Java/"/>
    
      <category term="Velocity" scheme="https://corningsun.com/tags/Velocity/"/>
    
      <category term="Markdown" scheme="https://corningsun.com/tags/Markdown/"/>
    
  </entry>
  
  <entry>
    <title>买酒店式公寓注意事项</title>
    <link href="https://corningsun.com/%E4%B9%B0%E9%85%92%E5%BA%97%E5%BC%8F%E5%85%AC%E5%AF%93%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/"/>
    <id>https://corningsun.com/买酒店式公寓注意事项/</id>
    <published>2018-01-26T16:12:28.000Z</published>
    <updated>2018-01-26T08:13:13.000Z</updated>
    
    <content type="html"><![CDATA[<ul><li>酒店式公寓均价是低于住宅房很多的，住宅的价格完全没有参考价值，最好问下附近二手公寓多少钱</li><li>注意产权年限，一般是40年，但是开发商拿地后造楼之类的也会耽误时间的，要看交房后实际还有多少年</li><li>注意开发商公司，是否大开发商，有没有造过其他楼盘，有的话最好实地勘察下，或者网上搜索一下舆论</li><li>注意公摊面积，电梯房的公摊面积很大的</li><li>是否期房，现在国家政策一年一个样，交钱办好贷款后，真不一定能拿到房，但你还要还贷款。</li><li>是否精装修，硬装还是软装。一般送的装修质量都很差，要做好准备。</li><li>注意看周边环境，是否墓地之类的，要找本地人问</li><li>周边基础设施有没有规划，地铁，公交之类的。不要信销售说的距离，要自己查资料，自己实地看。</li><li>物业费价格，不同物业差距很大，而且每年都要交的。</li><li>水电费价格，一般是住宅的2倍，而且晚上也不便宜</li><li>停车位，停车费怎么算的</li><li>如果准备出租的话，可以路边找中介问下周边的公寓租价</li><li>定金2万抵4万之类的，这些都不会写到购房发票里面的，如果定金特别多，就要注意了，据说都是直接被销售拿去了。</li><li>买房税，卖房税 要问清楚具体有哪些，比例是多少。算清楚涨幅多少才比得上一分利。</li><li>关于卖房时避税 - 做低房价<ul><li>做低是有成本的，要找关系，也要花钱</li><li>做低后买方要承担更多的首付款，是比较难卖的</li></ul></li><li>关于升值空间<ul><li>合肥房价真心不低，涨幅不会太大</li><li>一定要注意和周边公寓的价格对比，千万别买贵了</li><li>租房赚钱是不现实的</li></ul></li><li>选房<ul><li>注意房子朝向，不要买朝北的</li><li>不要买大户型，很难转手</li><li>有些定金叫买房资格，交了只是有资格参与买房，不是就能买选中的房号的</li></ul></li><li>最后<ul><li>想清楚未来三年五年的计划，有没有别的要用钱的地方，有没有更好的投资方向</li><li>不要头脑发热，定金别急着交</li><li>不要头脑发热，定金别急着交</li><li>不要头脑发热，定金别急着交</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;酒店式公寓均价是低于住宅房很多的，住宅的价格完全没有参考价值，最好问下附近二手公寓多少钱&lt;/li&gt;
&lt;li&gt;注意产权年限，一般是40年，但是开发商拿地后造楼之类的也会耽误时间的，要看交房后实际还有多少年&lt;/li&gt;
&lt;li&gt;注意开发商公司，是否大开发商，有没有造过
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>DesignPattern设计模式-总览</title>
    <link href="https://corningsun.com/DesignPattern%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%AF%A6%E7%BB%86/"/>
    <id>https://corningsun.com/DesignPattern设计模式-详细/</id>
    <published>2018-01-12T13:39:17.000Z</published>
    <updated>2018-07-11T01:52:39.928Z</updated>
    
    <content type="html"><![CDATA[<p>来源：<a href="http://www.runoob.com/design-pattern/design-pattern-tutorial.html" target="_blank" rel="noopener">RUNOOB.COM 设计模式</a></p><hr><h2 id="1-创建型模式"><a href="#1-创建型模式" class="headerlink" title="1 创建型模式"></a>1 创建型模式</h2><p>这些设计模式提供了一种在创建对象的同时隐藏创建逻辑的方式，而不是使用 new 运算符直接实例化对象。这使得程序在判断针对某个给定实例需要创建哪些对象时更加灵活。 </p><h3 id="工厂模式（Factory-Pattern）"><a href="#工厂模式（Factory-Pattern）" class="headerlink" title="工厂模式（Factory Pattern）"></a>工厂模式（Factory Pattern）</h3><p><img src="https://i.imgur.com/jIH7AJR.jpg" alt=""><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ShapeFactory shapeFactory = <span class="keyword">new</span> ShapeFactory();</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取 Circle 的对象，并调用它的 draw 方法</span></span><br><span class="line">Shape shape1 = shapeFactory.getShape(<span class="string">"CIRCLE"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用 Circle 的 draw 方法</span></span><br><span class="line">shape1.draw();</span><br></pre></td></tr></table></figure></p><blockquote><p>反射机制可以解决每次增加一个产品时，都需要增加一个对象实现工厂的缺点</p></blockquote><a id="more"></a><h3 id="抽象工厂模式（Abstract-Factory-Pattern）"><a href="#抽象工厂模式（Abstract-Factory-Pattern）" class="headerlink" title="抽象工厂模式（Abstract Factory Pattern）"></a>抽象工厂模式（Abstract Factory Pattern）</h3><p><img src="https://i.imgur.com/t7XTc3g.jpg" alt=""><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取形状工厂</span></span><br><span class="line">AbstractFactory shapeFactory = FactoryProducer.getFactory(<span class="string">"SHAPE"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取形状为 Circle 的对象</span></span><br><span class="line">Shape shape1 = shapeFactory.getShape(<span class="string">"CIRCLE"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用 Circle 的 draw 方法</span></span><br><span class="line">shape1.draw();</span><br></pre></td></tr></table></figure></p><h3 id="单例模式（Singleton-Pattern）"><a href="#单例模式（Singleton-Pattern）" class="headerlink" title="单例模式（Singleton Pattern）"></a>单例模式（Singleton Pattern）</h3><p><img src="https://i.imgur.com/yrTB4gw.jpg" alt=""><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取唯一可用的对象</span></span><br><span class="line">SingleObject object = SingleObject.getInstance();</span><br></pre></td></tr></table></figure></p><p>单例实现方式</p><ul><li>懒汉</li><li>懒汉，线程安全</li><li>懒汉，双检锁</li><li>饿汉</li><li>静态内部类</li><li>枚举 <h3 id="建造者模式（Builder-Pattern）"><a href="#建造者模式（Builder-Pattern）" class="headerlink" title="建造者模式（Builder Pattern）"></a>建造者模式（Builder Pattern）</h3></li></ul><p><img src="https://i.imgur.com/6lqvdNR.jpg" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MealBuilder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> Meal <span class="title">prepareVegMeal</span> <span class="params">()</span></span>&#123;</span><br><span class="line">      Meal meal = <span class="keyword">new</span> Meal();</span><br><span class="line">      meal.addItem(<span class="keyword">new</span> VegBurger());</span><br><span class="line">      meal.addItem(<span class="keyword">new</span> Coke());</span><br><span class="line">      <span class="keyword">return</span> meal;</span><br><span class="line">   &#125;   </span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> Meal <span class="title">prepareNonVegMeal</span> <span class="params">()</span></span>&#123;</span><br><span class="line">      Meal meal = <span class="keyword">new</span> Meal();</span><br><span class="line">      meal.addItem(<span class="keyword">new</span> ChickenBurger());</span><br><span class="line">      meal.addItem(<span class="keyword">new</span> Pepsi());</span><br><span class="line">      <span class="keyword">return</span> meal;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line">      </span><br><span class="line">      MealBuilder mealBuilder = <span class="keyword">new</span> MealBuilder();</span><br><span class="line"></span><br><span class="line">      Meal vegMeal = mealBuilder.prepareVegMeal();</span><br></pre></td></tr></table></figure><h3 id="原型模式（Prototype-Pattern）"><a href="#原型模式（Prototype-Pattern）" class="headerlink" title="原型模式（Prototype Pattern）"></a>原型模式（Prototype Pattern）</h3><p><img src="https://i.imgur.com/fP1QwFL.jpg" alt=""><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Hashtable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShapeCache</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> Hashtable&lt;String, Shape&gt; shapeMap </span><br><span class="line">      = <span class="keyword">new</span> Hashtable&lt;String, Shape&gt;();</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Shape <span class="title">getShape</span><span class="params">(String shapeId)</span> </span>&#123;</span><br><span class="line">      Shape cachedShape = shapeMap.get(shapeId);</span><br><span class="line">      <span class="keyword">return</span> (Shape) cachedShape.clone();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 对每种形状都运行数据库查询，并创建该形状</span></span><br><span class="line">   <span class="comment">// shapeMap.put(shapeKey, shape);</span></span><br><span class="line">   <span class="comment">// 例如，我们要添加三种形状</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">loadCache</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      Circle circle = <span class="keyword">new</span> Circle();</span><br><span class="line">      circle.setId(<span class="string">"1"</span>);</span><br><span class="line">      shapeMap.put(circle.getId(),circle);</span><br><span class="line"></span><br><span class="line">      Square square = <span class="keyword">new</span> Square();</span><br><span class="line">      square.setId(<span class="string">"2"</span>);</span><br><span class="line">      shapeMap.put(square.getId(),square);</span><br><span class="line"></span><br><span class="line">      Rectangle rectangle = <span class="keyword">new</span> Rectangle();</span><br><span class="line">      rectangle.setId(<span class="string">"3"</span>);</span><br><span class="line">      shapeMap.put(rectangle.getId(),rectangle);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">      ShapeCache.loadCache();</span><br><span class="line">      Shape clonedShape = (Shape) ShapeCache.getShape(<span class="string">"1"</span>);</span><br><span class="line">      System.out.println(<span class="string">"Shape : "</span> + clonedShape.getType());</span><br></pre></td></tr></table></figure></p><h2 id="2-结构型模式"><a href="#2-结构型模式" class="headerlink" title="2 结构型模式"></a>2 结构型模式</h2><p>这些设计模式关注类和对象的组合。继承的概念被用来组合接口和定义组合对象获得新功能的方式。 </p><h3 id="适配器模式（Adapter-Pattern）"><a href="#适配器模式（Adapter-Pattern）" class="headerlink" title="适配器模式（Adapter Pattern）"></a>适配器模式（Adapter Pattern）</h3><p><img src="https://i.imgur.com/K0c26un.jpg" alt=""><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MediaAdapter</span> <span class="keyword">implements</span> <span class="title">MediaPlayer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   AdvancedMediaPlayer advancedMusicPlayer;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">MediaAdapter</span><span class="params">(String audioType)</span></span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(audioType.equalsIgnoreCase(<span class="string">"vlc"</span>) )&#123;</span><br><span class="line">         advancedMusicPlayer = <span class="keyword">new</span> VlcPlayer();            </span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (audioType.equalsIgnoreCase(<span class="string">"mp4"</span>))&#123;</span><br><span class="line">         advancedMusicPlayer = <span class="keyword">new</span> Mp4Player();</span><br><span class="line">      &#125;    </span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">(String audioType, String fileName)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(audioType.equalsIgnoreCase(<span class="string">"vlc"</span>))&#123;</span><br><span class="line">         advancedMusicPlayer.playVlc(fileName);</span><br><span class="line">      &#125;<span class="keyword">else</span> <span class="keyword">if</span>(audioType.equalsIgnoreCase(<span class="string">"mp4"</span>))&#123;</span><br><span class="line">         advancedMusicPlayer.playMp4(fileName);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="桥接模式（Bridge-Pattern）"><a href="#桥接模式（Bridge-Pattern）" class="headerlink" title="桥接模式（Bridge Pattern）"></a>桥接模式（Bridge Pattern）</h3><p><img src="https://i.imgur.com/I7akbyg.jpg" alt=""><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">   <span class="keyword">protected</span> DrawAPI drawAPI;</span><br><span class="line">   <span class="function"><span class="keyword">protected</span> <span class="title">Shape</span><span class="params">(DrawAPI drawAPI)</span></span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.drawAPI = drawAPI;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span></span>;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="过滤器模式（Filter、Criteria-Pattern）"><a href="#过滤器模式（Filter、Criteria-Pattern）" class="headerlink" title="过滤器模式（Filter、Criteria Pattern）"></a>过滤器模式（Filter、Criteria Pattern）</h3><p><img src="https://i.imgur.com/i7iG30m.jpg" alt=""><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Person&gt; malePersons = <span class="keyword">new</span> ArrayList&lt;Person&gt;(); </span><br><span class="line"><span class="keyword">for</span> (Person person : persons) &#123;</span><br><span class="line">   <span class="keyword">if</span>(person.getGender().equalsIgnoreCase(<span class="string">"MALE"</span>))&#123;</span><br><span class="line">      malePersons.add(person);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="组合模式（Composite-Pattern）"><a href="#组合模式（Composite-Pattern）" class="headerlink" title="组合模式（Composite Pattern）"></a>组合模式（Composite Pattern）</h3><p><img src="https://i.imgur.com/gvSPbue.jpg" alt=""><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Employee CEO = <span class="keyword">new</span> Employee(<span class="string">"John"</span>,<span class="string">"CEO"</span>, <span class="number">30000</span>);</span><br><span class="line">Employee headSales = <span class="keyword">new</span> Employee(<span class="string">"Robert"</span>,<span class="string">"Head Sales"</span>, <span class="number">20000</span>);</span><br><span class="line">CEO.add(headSales);</span><br></pre></td></tr></table></figure></p><h3 id="装饰器模式（Decorator-Pattern）"><a href="#装饰器模式（Decorator-Pattern）" class="headerlink" title="装饰器模式（Decorator Pattern）"></a>装饰器模式（Decorator Pattern）</h3><p><img src="https://i.imgur.com/EKMWKvk.jpg" alt=""><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedShapeDecorator</span> <span class="keyword">extends</span> <span class="title">ShapeDecorator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">RedShapeDecorator</span><span class="params">(Shape decoratedShape)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">super</span>(decoratedShape);        </span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      decoratedShape.draw();           </span><br><span class="line">      setRedBorder(decoratedShape);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setRedBorder</span><span class="params">(Shape decoratedShape)</span></span>&#123;</span><br><span class="line">      System.out.println(<span class="string">"Border Color: Red"</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Shape redCircle = <span class="keyword">new</span> RedShapeDecorator(<span class="keyword">new</span> Circle());</span><br><span class="line">redCircle.draw();</span><br></pre></td></tr></table></figure><h3 id="外观模式（Facade-Pattern）"><a href="#外观模式（Facade-Pattern）" class="headerlink" title="外观模式（Facade Pattern）"></a>外观模式（Facade Pattern）</h3><p><img src="https://i.imgur.com/bRg4uLe.jpg" alt=""><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShapeMaker</span> </span>&#123;</span><br><span class="line">   <span class="keyword">private</span> Shape circle;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">ShapeMaker</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      circle = <span class="keyword">new</span> Circle();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drawCircle</span><span class="params">()</span></span>&#123;</span><br><span class="line">      circle.draw();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ShapeMaker shapeMaker = <span class="keyword">new</span> ShapeMaker();</span><br><span class="line">shapeMaker.drawCircle();</span><br></pre></td></tr></table></figure><h3 id="享元模式（Flyweight-Pattern）"><a href="#享元模式（Flyweight-Pattern）" class="headerlink" title="享元模式（Flyweight Pattern）"></a>享元模式（Flyweight Pattern）</h3><p><img src="https://i.imgur.com/wzY31ez.jpg" alt=""><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShapeFactory</span> </span>&#123;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> HashMap&lt;String, Shape&gt; circleMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Shape <span class="title">getCircle</span><span class="params">(String color)</span> </span>&#123;</span><br><span class="line">      Circle circle = (Circle)circleMap.get(color);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span>(circle == <span class="keyword">null</span>) &#123;</span><br><span class="line">         circle = <span class="keyword">new</span> Circle(color);</span><br><span class="line">         circleMap.put(color, circle);</span><br><span class="line">         System.out.println(<span class="string">"Creating circle of color : "</span> + color);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> circle;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Circle circle =  (Circle)ShapeFactory.getCircle(<span class="string">"RED"</span><span class="string">");</span></span><br><span class="line"><span class="string">circle.draw();</span></span><br></pre></td></tr></table></figure><h3 id="代理模式（Proxy-Pattern）"><a href="#代理模式（Proxy-Pattern）" class="headerlink" title="代理模式（Proxy Pattern）"></a>代理模式（Proxy Pattern）</h3><p><img src="https://i.imgur.com/mFlZ7GJ.jpg" alt=""><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyImage</span> <span class="keyword">implements</span> <span class="title">Image</span></span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> RealImage realImage;</span><br><span class="line">   <span class="keyword">private</span> String fileName;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">ProxyImage</span><span class="params">(String fileName)</span></span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.fileName = fileName;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(realImage == <span class="keyword">null</span>)&#123;</span><br><span class="line">         realImage = <span class="keyword">new</span> RealImage(fileName);</span><br><span class="line">      &#125;</span><br><span class="line">      realImage.display();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="3-行为型模式"><a href="#3-行为型模式" class="headerlink" title="3 行为型模式"></a>3 行为型模式</h2><p>这些设计模式特别关注对象之间的通信。 </p><h3 id="责任链模式（Chain-of-Responsibility-Pattern）"><a href="#责任链模式（Chain-of-Responsibility-Pattern）" class="headerlink" title="责任链模式（Chain of Responsibility Pattern）"></a>责任链模式（Chain of Responsibility Pattern）</h3><p><img src="https://i.imgur.com/ABFLmzM.jpg" alt=""><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractLogger</span> </span>&#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> INFO = <span class="number">1</span>;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> DEBUG = <span class="number">2</span>;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> ERROR = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">protected</span> <span class="keyword">int</span> level;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//责任链中的下一个元素</span></span><br><span class="line">   <span class="keyword">protected</span> AbstractLogger nextLogger;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNextLogger</span><span class="params">(AbstractLogger nextLogger)</span></span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.nextLogger = nextLogger;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">logMessage</span><span class="params">(<span class="keyword">int</span> level, String message)</span></span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(<span class="keyword">this</span>.level &lt;= level)&#123;</span><br><span class="line">         write(message);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span>(nextLogger !=<span class="keyword">null</span>)&#123;</span><br><span class="line">         nextLogger.logMessage(level, message);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">abstract</span> <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(String message)</span></span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="命令模式（Command-Pattern）"><a href="#命令模式（Command-Pattern）" class="headerlink" title="命令模式（Command Pattern）"></a>命令模式（Command Pattern）</h3><p><img src="https://i.imgur.com/hNfbj8M.jpg" alt=""><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BuyStock</span> <span class="keyword">implements</span> <span class="title">Order</span> </span>&#123;</span><br><span class="line">   <span class="keyword">private</span> Stock abcStock;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">BuyStock</span><span class="params">(Stock abcStock)</span></span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.abcStock = abcStock;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      abcStock.buy();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="解释器模式（Interpreter-Pattern）"><a href="#解释器模式（Interpreter-Pattern）" class="headerlink" title="解释器模式（Interpreter Pattern）"></a>解释器模式（Interpreter Pattern）</h3><p><img src="https://i.imgur.com/DlsSAYv.jpg" alt=""><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Expression <span class="title">getMaleExpression</span><span class="params">()</span></span>&#123;</span><br><span class="line">   Expression robert = <span class="keyword">new</span> TerminalExpression(<span class="string">"Robert"</span>);</span><br><span class="line">   Expression john = <span class="keyword">new</span> TerminalExpression(<span class="string">"John"</span>);</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> OrExpression(robert, john);        </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Expression isMale = getMaleExpression();</span><br><span class="line">System.out.println(<span class="string">"John is male? "</span> + isMale.interpret(<span class="string">"John"</span>));</span><br></pre></td></tr></table></figure></p><h3 id="迭代器模式（Iterator-Pattern）"><a href="#迭代器模式（Iterator-Pattern）" class="headerlink" title="迭代器模式（Iterator Pattern）"></a>迭代器模式（Iterator Pattern）</h3><p><img src="https://i.imgur.com/VxHJ50V.jpg" alt=""></p><h3 id="中介者模式（Mediator-Pattern）"><a href="#中介者模式（Mediator-Pattern）" class="headerlink" title="中介者模式（Mediator Pattern）"></a>中介者模式（Mediator Pattern）</h3><p><img src="https://i.imgur.com/8K7EGra.jpg" alt=""></p><h3 id="备忘录模式（Memento-Pattern）"><a href="#备忘录模式（Memento-Pattern）" class="headerlink" title="备忘录模式（Memento Pattern）"></a>备忘录模式（Memento Pattern）</h3><p><img src="https://i.imgur.com/AjazWpw.jpg" alt=""></p><h3 id="观察者模式（Observer-Pattern）"><a href="#观察者模式（Observer-Pattern）" class="headerlink" title="观察者模式（Observer Pattern）"></a>观察者模式（Observer Pattern）</h3><p><img src="https://i.imgur.com/YgSCg3W.jpg" alt=""><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">   <span class="keyword">private</span> List&lt;Observer&gt; observers </span><br><span class="line">      = <span class="keyword">new</span> ArrayList&lt;Observer&gt;();</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">int</span> state;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getState</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> state;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setState</span><span class="params">(<span class="keyword">int</span> state)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.state = state;</span><br><span class="line">      <span class="comment">// 状态发生变化时，自动通知观察者</span></span><br><span class="line">      notifyAllObservers();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attach</span><span class="params">(Observer observer)</span></span>&#123;</span><br><span class="line">      observers.add(observer);        </span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notifyAllObservers</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="keyword">for</span> (Observer observer : observers) &#123;</span><br><span class="line">         observer.update();</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;     </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="状态模式（State-Pattern）"><a href="#状态模式（State-Pattern）" class="headerlink" title="状态模式（State Pattern）"></a>状态模式（State Pattern）</h3><p><img src="https://i.imgur.com/gqtP692.jpg" alt=""></p><h3 id="空对象模式（Null-Object-Pattern）"><a href="#空对象模式（Null-Object-Pattern）" class="headerlink" title="空对象模式（Null Object Pattern）"></a>空对象模式（Null Object Pattern）</h3><p><img src="https://i.imgur.com/4Qga0ZI.jpg" alt=""><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerFactory</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] names = &#123;<span class="string">"Rob"</span>, <span class="string">"Joe"</span>, <span class="string">"Julie"</span>&#125;;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> AbstractCustomer <span class="title">getCustomer</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; names.length; i++) &#123;</span><br><span class="line">         <span class="keyword">if</span> (names[i].equalsIgnoreCase(name))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> RealCustomer(name);</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> NullCustomer();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="策略模式（Strategy-Pattern）"><a href="#策略模式（Strategy-Pattern）" class="headerlink" title="策略模式（Strategy Pattern）"></a>策略模式（Strategy Pattern）</h3><p><img src="https://i.imgur.com/rSEW6w1.jpg" alt=""></p><h3 id="模板模式（Template-Pattern）"><a href="#模板模式（Template-Pattern）" class="headerlink" title="模板模式（Template Pattern）"></a>模板模式（Template Pattern）</h3><p><img src="https://i.imgur.com/3PinsU2.jpg" alt=""><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Game</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">initialize</span><span class="params">()</span></span>;</span><br><span class="line">   <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">startPlay</span><span class="params">()</span></span>;</span><br><span class="line">   <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">endPlay</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//模板</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">      <span class="comment">//初始化游戏</span></span><br><span class="line">      initialize();</span><br><span class="line"></span><br><span class="line">      <span class="comment">//开始游戏</span></span><br><span class="line">      startPlay();</span><br><span class="line"></span><br><span class="line">      <span class="comment">//结束游戏</span></span><br><span class="line">      endPlay();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="访问者模式（Visitor-Pattern）"><a href="#访问者模式（Visitor-Pattern）" class="headerlink" title="访问者模式（Visitor Pattern）"></a>访问者模式（Visitor Pattern）</h3><p><img src="https://i.imgur.com/do8d4Cj.jpg" alt=""><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Computer</span> <span class="keyword">implements</span> <span class="title">ComputerPart</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">   ComputerPart[] parts;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">Computer</span><span class="params">()</span></span>&#123;</span><br><span class="line">      parts = <span class="keyword">new</span> ComputerPart[] &#123;<span class="keyword">new</span> Mouse(), <span class="keyword">new</span> Keyboard(), <span class="keyword">new</span> Monitor()&#125;;        </span><br><span class="line">   &#125; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(ComputerPartVisitor computerPartVisitor)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; parts.length; i++) &#123;</span><br><span class="line">         parts[i].accept(computerPartVisitor);</span><br><span class="line">      &#125;</span><br><span class="line">      computerPartVisitor.visit(<span class="keyword">this</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ComputerPart computer = <span class="keyword">new</span> Computer();</span><br><span class="line">computer.accept(<span class="keyword">new</span> ComputerPartDisplayVisitor());</span><br></pre></td></tr></table></figure><h2 id="4-J2EE-模式"><a href="#4-J2EE-模式" class="headerlink" title="4 J2EE 模式"></a>4 J2EE 模式</h2><p>这些设计模式特别关注表示层。这些模式是由 Sun Java Center 鉴定的。 </p><h3 id="MVC-模式（MVC-Pattern）"><a href="#MVC-模式（MVC-Pattern）" class="headerlink" title="MVC 模式（MVC Pattern）"></a>MVC 模式（MVC Pattern）</h3><p><img src="https://i.imgur.com/pHXxtEr.jpg" alt=""><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//从数据可获取学生记录</span></span><br><span class="line">Student model  = retriveStudentFromDatabase();</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建一个视图：把学生详细信息输出到控制台</span></span><br><span class="line">StudentView view = <span class="keyword">new</span> StudentView();</span><br><span class="line"></span><br><span class="line">StudentController controller = <span class="keyword">new</span> StudentController(model, view);</span><br><span class="line"></span><br><span class="line">controller.updateView();</span><br><span class="line"></span><br><span class="line"><span class="comment">//更新模型数据</span></span><br><span class="line">controller.setStudentName(<span class="string">"John"</span>);</span><br><span class="line"></span><br><span class="line">controller.updateView();</span><br></pre></td></tr></table></figure></p><h3 id="业务代表模式（Business-Delegate-Pattern）"><a href="#业务代表模式（Business-Delegate-Pattern）" class="headerlink" title="业务代表模式（Business Delegate Pattern）"></a>业务代表模式（Business Delegate Pattern）</h3><p><img src="https://i.imgur.com/4Em0vUa.jpg" alt=""><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BusinessDelegate</span> </span>&#123;</span><br><span class="line">   <span class="keyword">private</span> BusinessLookUp lookupService = <span class="keyword">new</span> BusinessLookUp();</span><br><span class="line">   <span class="keyword">private</span> BusinessService businessService;</span><br><span class="line">   <span class="keyword">private</span> String serviceType;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setServiceType</span><span class="params">(String serviceType)</span></span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.serviceType = serviceType;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doTask</span><span class="params">()</span></span>&#123;</span><br><span class="line">      businessService = lookupService.getBusinessService(serviceType);</span><br><span class="line">      businessService.doProcessing();        </span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="组合实体模式（Composite-Entity-Pattern）"><a href="#组合实体模式（Composite-Entity-Pattern）" class="headerlink" title="组合实体模式（Composite Entity Pattern）"></a>组合实体模式（Composite Entity Pattern）</h3><p><img src="https://i.imgur.com/YkUBjPB.jpg" alt=""><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CoarseGrainedObject</span> </span>&#123;</span><br><span class="line">   DependentObject1 do1 = <span class="keyword">new</span> DependentObject1();</span><br><span class="line">   DependentObject2 do2 = <span class="keyword">new</span> DependentObject2();</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setData</span><span class="params">(String data1, String data2)</span></span>&#123;</span><br><span class="line">      do1.setData(data1);</span><br><span class="line">      do2.setData(data2);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> String[] getData()&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> String[] &#123;do1.getData(),do2.getData()&#125;;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CompositeEntity</span> </span>&#123;</span><br><span class="line">   <span class="keyword">private</span> CoarseGrainedObject cgo = <span class="keyword">new</span> CoarseGrainedObject();</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setData</span><span class="params">(String data1, String data2)</span></span>&#123;</span><br><span class="line">      cgo.setData(data1, data2);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> String[] getData()&#123;</span><br><span class="line">      <span class="keyword">return</span> cgo.getData();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="数据访问对象模式（Data-Access-Object-Pattern）"><a href="#数据访问对象模式（Data-Access-Object-Pattern）" class="headerlink" title="数据访问对象模式（Data Access Object Pattern）"></a>数据访问对象模式（Data Access Object Pattern）</h3><p><img src="https://i.imgur.com/QF6jt2T.jpg" alt=""><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">StudentDao</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> List&lt;Student&gt; <span class="title">getAllStudents</span><span class="params">()</span></span>;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> Student <span class="title">getStudent</span><span class="params">(<span class="keyword">int</span> rollNo)</span></span>;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateStudent</span><span class="params">(Student student)</span></span>;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteStudent</span><span class="params">(Student student)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="前端控制器模式（Front-Controller-Pattern）"><a href="#前端控制器模式（Front-Controller-Pattern）" class="headerlink" title="前端控制器模式（Front Controller Pattern）"></a>前端控制器模式（Front Controller Pattern）</h3><p><img src="https://i.imgur.com/gjAFnr1.jpg" alt=""><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FrontController</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">   <span class="keyword">private</span> Dispatcher dispatcher;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">FrontController</span><span class="params">()</span></span>&#123;</span><br><span class="line">      dispatcher = <span class="keyword">new</span> Dispatcher();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isAuthenticUser</span><span class="params">()</span></span>&#123;</span><br><span class="line">      System.out.println(<span class="string">"User is authenticated successfully."</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">trackRequest</span><span class="params">(String request)</span></span>&#123;</span><br><span class="line">      System.out.println(<span class="string">"Page requested: "</span> + request);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dispatchRequest</span><span class="params">(String request)</span></span>&#123;</span><br><span class="line">      <span class="comment">//记录每一个请求</span></span><br><span class="line">      trackRequest(request);</span><br><span class="line">      <span class="comment">//对用户进行身份验证</span></span><br><span class="line">      <span class="keyword">if</span>(isAuthenticUser())&#123;</span><br><span class="line">         dispatcher.dispatch(request);</span><br><span class="line">      &#125;    </span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="拦截过滤器模式（Intercepting-Filter-Pattern）"><a href="#拦截过滤器模式（Intercepting-Filter-Pattern）" class="headerlink" title="拦截过滤器模式（Intercepting Filter Pattern）"></a>拦截过滤器模式（Intercepting Filter Pattern）</h3><p><img src="https://i.imgur.com/zbPln9p.jpg" alt=""><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FilterChain</span> </span>&#123;</span><br><span class="line">   <span class="keyword">private</span> List&lt;Filter&gt; filters = <span class="keyword">new</span> ArrayList&lt;Filter&gt;();</span><br><span class="line">   <span class="keyword">private</span> Target target;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addFilter</span><span class="params">(Filter filter)</span></span>&#123;</span><br><span class="line">      filters.add(filter);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(String request)</span></span>&#123;</span><br><span class="line">      <span class="keyword">for</span> (Filter filter : filters) &#123;</span><br><span class="line">         filter.execute(request);</span><br><span class="line">      &#125;</span><br><span class="line">      target.execute(request);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTarget</span><span class="params">(Target target)</span></span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.target = target;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="服务定位器模式（Service-Locator-Pattern）"><a href="#服务定位器模式（Service-Locator-Pattern）" class="headerlink" title="服务定位器模式（Service Locator Pattern）"></a>服务定位器模式（Service Locator Pattern）</h3><p><img src="https://i.imgur.com/xxZrecq.jpg" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServiceLocator</span> </span>&#123;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> Cache cache;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">static</span> &#123;</span><br><span class="line">      cache = <span class="keyword">new</span> Cache();        </span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Service <span class="title">getService</span><span class="params">(String jndiName)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">      Service service = cache.getService(jndiName);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span>(service != <span class="keyword">null</span>)&#123;</span><br><span class="line">         <span class="keyword">return</span> service;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      InitialContext context = <span class="keyword">new</span> InitialContext();</span><br><span class="line">      Service service1 = (Service)context.lookup(jndiName);</span><br><span class="line">      cache.addService(service1);</span><br><span class="line">      <span class="keyword">return</span> service1;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="传输对象模式（Transfer-Object-Pattern）"><a href="#传输对象模式（Transfer-Object-Pattern）" class="headerlink" title="传输对象模式（Transfer Object Pattern）"></a>传输对象模式（Transfer Object Pattern）</h3><p><img src="https://i.imgur.com/AliDc8R.jpg" alt=""><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 类似于Service 层</span></span><br><span class="line">StudentBO studentBusinessObject = <span class="keyword">new</span> StudentBO();</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出所有的学生</span></span><br><span class="line"><span class="keyword">for</span> (StudentVO student : studentBusinessObject.getAllStudents()) &#123;</span><br><span class="line">   System.out.println(<span class="string">"Student: [RollNo : "</span></span><br><span class="line">   +student.getRollNo()+<span class="string">", Name : "</span>+student.getName()+<span class="string">" ]"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//更新学生</span></span><br><span class="line">StudentVO student =studentBusinessObject.getAllStudents().get(<span class="number">0</span>);</span><br><span class="line">student.setName(<span class="string">"Michael"</span>);</span><br><span class="line">studentBusinessObject.updateStudent(student);</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取学生</span></span><br><span class="line">studentBusinessObject.getStudent(<span class="number">0</span>);</span><br><span class="line">System.out.println(<span class="string">"Student: [RollNo : "</span></span><br><span class="line">+student.getRollNo()+<span class="string">", Name : "</span>+student.getName()+<span class="string">" ]"</span>);</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;来源：&lt;a href=&quot;http://www.runoob.com/design-pattern/design-pattern-tutorial.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;RUNOOB.COM 设计模式&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;1-创建型模式&quot;&gt;&lt;a href=&quot;#1-创建型模式&quot; class=&quot;headerlink&quot; title=&quot;1 创建型模式&quot;&gt;&lt;/a&gt;1 创建型模式&lt;/h2&gt;&lt;p&gt;这些设计模式提供了一种在创建对象的同时隐藏创建逻辑的方式，而不是使用 new 运算符直接实例化对象。这使得程序在判断针对某个给定实例需要创建哪些对象时更加灵活。 &lt;/p&gt;
&lt;h3 id=&quot;工厂模式（Factory-Pattern）&quot;&gt;&lt;a href=&quot;#工厂模式（Factory-Pattern）&quot; class=&quot;headerlink&quot; title=&quot;工厂模式（Factory Pattern）&quot;&gt;&lt;/a&gt;工厂模式（Factory Pattern）&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/jIH7AJR.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ShapeFactory shapeFactory = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ShapeFactory();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//获取 Circle 的对象，并调用它的 draw 方法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Shape shape1 = shapeFactory.getShape(&lt;span class=&quot;string&quot;&gt;&quot;CIRCLE&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//调用 Circle 的 draw 方法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;shape1.draw();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;反射机制可以解决每次增加一个产品时，都需要增加一个对象实现工厂的缺点&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Java" scheme="https://corningsun.com/categories/Java/"/>
    
      <category term="DesignPattern" scheme="https://corningsun.com/categories/Java/DesignPattern/"/>
    
    
      <category term="Java" scheme="https://corningsun.com/tags/Java/"/>
    
      <category term="DesignPattern" scheme="https://corningsun.com/tags/DesignPattern/"/>
    
  </entry>
  
  <entry>
    <title>Java Lambda</title>
    <link href="https://corningsun.com/Java%20Lambda/"/>
    <id>https://corningsun.com/Java Lambda/</id>
    <published>2018-01-05T15:43:34.000Z</published>
    <updated>2018-01-06T08:02:04.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Lambda-示例"><a href="#Lambda-示例" class="headerlink" title="Lambda 示例"></a>Lambda 示例</h2><p>源码来源: <a href="https://github.com/iluwatar/java-design-patterns/tree/master/factory-kit" target="_blank" rel="noopener">Github java-design-patterns/factory-kit</a></p><h3 id="基础类"><a href="#基础类" class="headerlink" title="基础类"></a>基础类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Weapon</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> WeaponType &#123;</span><br><span class="line">  SWORD, AXE, BOW, SPEAR</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sword</span> <span class="keyword">implements</span> <span class="title">Weapon</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Sword"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Axe</span> <span class="keyword">implements</span> <span class="title">Weapon</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Axe"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Bow Spear 略</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.function.Supplier;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Builder</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(WeaponType name, Supplier&lt;Weapon&gt; supplier)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.function.Consumer;</span><br><span class="line"><span class="keyword">import</span> java.util.function.Supplier;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">WeaponFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function">Weapon <span class="title">create</span><span class="params">(WeaponType name)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">static</span> WeaponFactory <span class="title">factory</span><span class="params">(Consumer&lt;Builder&gt; consumer)</span> </span>&#123;</span><br><span class="line">    Map&lt;WeaponType, Supplier&lt;Weapon&gt;&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    consumer.accept(map::put);</span><br><span class="line">    <span class="keyword">return</span> name -&gt; map.get(name).get();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="非-Lambda-方式实现-WeaponFactory"><a href="#非-Lambda-方式实现-WeaponFactory" class="headerlink" title="非 Lambda 方式实现 WeaponFactory"></a>非 Lambda 方式实现 WeaponFactory</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> WeaponFactory <span class="title">factory2</span><span class="params">(Consumer&lt;Builder&gt; consumer)</span> </span>&#123;</span><br><span class="line">    Map&lt;WeaponType, Supplier&lt;Weapon&gt;&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// accept 实现方式1</span></span><br><span class="line">    <span class="comment">// consumer.accept(((name, supplier) -&gt; map.put(name, supplier)));</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// accept 实现方式2</span></span><br><span class="line">    consumer.accept(<span class="keyword">new</span> Builder() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(WeaponType name, Supplier&lt;Weapon&gt; supplier)</span> </span>&#123;</span><br><span class="line">            map.put(name, supplier);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// create 非 lambda 实现方式</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> WeaponFactory() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Weapon <span class="title">create</span><span class="params">(WeaponType name)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> map.get(name).get();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Lambda-方式初始化-WeaponFactory"><a href="#Lambda-方式初始化-WeaponFactory" class="headerlink" title="Lambda 方式初始化 WeaponFactory"></a>Lambda 方式初始化 <code>WeaponFactory</code></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> WeaponFactory <span class="title">getWeaponFactory_lam</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> WeaponFactory.factory(builder -&gt; &#123;</span><br><span class="line">        builder.add(WeaponType.SWORD, Sword::<span class="keyword">new</span>);</span><br><span class="line">        builder.add(WeaponType.AXE, Axe::<span class="keyword">new</span>);</span><br><span class="line">        builder.add(WeaponType.SPEAR, Spear::<span class="keyword">new</span>);</span><br><span class="line">        builder.add(WeaponType.BOW, Bow::<span class="keyword">new</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="非-Lambda-方式初始化-WeaponFactory"><a href="#非-Lambda-方式初始化-WeaponFactory" class="headerlink" title="非 Lambda 方式初始化  WeaponFactory"></a>非 Lambda 方式初始化  <code>WeaponFactory</code></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> WeaponFactory <span class="title">getWeaponFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> WeaponFactory.factory(<span class="keyword">new</span> Consumer&lt;Builder&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Builder builder)</span> </span>&#123;</span><br><span class="line">            builder.add(WeaponType.SWORD, <span class="keyword">new</span> Supplier&lt;Weapon&gt;() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> Weapon <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">new</span> Sword();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            builder.add(WeaponType.AXE, () -&gt; <span class="keyword">new</span> Axe());</span><br><span class="line">            builder.add(WeaponType.SPEAR, Spear::<span class="keyword">new</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="相关资料"><a href="#相关资料" class="headerlink" title="相关资料"></a>相关资料</h2><ul><li><a href="http://zh.lucida.me/blog/java-8-lambdas-insideout-language-features/" target="_blank" rel="noopener">深入理解 Java 8 Lambda</a></li><li><a href="https://www.zhihu.com/question/28565691" target="_blank" rel="noopener">知乎 java 双冒号是什么操作符?</a></li><li><a href="http://cr.openjdk.java.net/~briangoetz/lambda/lambda-state-final.html" target="_blank" rel="noopener">State of the Lambda</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Lambda-示例&quot;&gt;&lt;a href=&quot;#Lambda-示例&quot; class=&quot;headerlink&quot; title=&quot;Lambda 示例&quot;&gt;&lt;/a&gt;Lambda 示例&lt;/h2&gt;&lt;p&gt;源码来源: &lt;a href=&quot;https://github.com/iluwatar
      
    
    </summary>
    
      <category term="Java" scheme="https://corningsun.com/categories/Java/"/>
    
      <category term="Lambda" scheme="https://corningsun.com/categories/Java/Lambda/"/>
    
    
      <category term="Java" scheme="https://corningsun.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>十大经典排序算法</title>
    <link href="https://corningsun.com/%E5%8D%81%E5%A4%A7%E7%BB%8F%E5%85%B8%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    <id>https://corningsun.com/十大经典排序算法/</id>
    <published>2018-01-05T10:26:40.000Z</published>
    <updated>2018-07-09T01:27:50.953Z</updated>
    
    <content type="html"><![CDATA[<p><strong>来源</strong>：<a href="https://github.com/hustcc/JS-Sorting-Algorithm" target="_blank" rel="noopener">Github JS-Sorting-Algorithm</a></p><hr><p>排序算法是《数据结构与算法》中最基本的算法之一。<br>排序算法可以分为内部排序和外部排序，内部排序是数据记录在内存中进行排序，而外部排序是因排序的数据很大，一次不能容纳全部的排序记录，在排序过程中需要访问外存。常见的内部排序算法有：插入排序、希尔排序、选择排序、冒泡排序、归并排序、快速排序、堆排序、基数排序等。用一张图概括：<br><img src="http://corningsun.qiniudn.com/blog/2018-07-09-sort.png-o" alt=""></p><h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><p>冒泡排序（Bubble Sort）也是一种简单直观的排序算法。它重复地走访过要排序的数列，一次比较两个元素，如果他们的顺序错误就把他们交换过来。走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。这个算法的名字由来是因为越小的元素会经由交换慢慢“浮”到数列的顶端。</p><p><strong>算法步骤</strong></p><ol><li>比较相邻的元素。如果第一个比第二个大，就交换他们两个。</li><li>对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对。这步做完后，最后的元素会是最大的数。</li><li>针对所有的元素重复以上的步骤，除了最后一个。</li><li>持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。<br><img src="http://corningsun.qiniudn.com/blog/2018-07-09-bubbleSort.gif-o" alt=""><a id="more"></a><h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2>选择排序是一种简单直观的排序算法，无论什么数据进去都是 O(n²) 的时间复杂度。所以用到它的时候，数据规模越小越好。唯一的好处可能就是不占用额外的内存空间了吧。</li></ol><p><strong>算法步骤</strong></p><ol><li>首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置</li><li>再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。</li><li>重复第二步，直到所有元素均排序完毕。<br><img src="http://corningsun.qiniudn.com/blog/2018-07-09-selectionSort.gif-o" alt=""><h2 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h2>插入排序的代码实现虽然没有冒泡排序和选择排序那么简单粗暴，但它的原理应该是最容易理解的了，因为只要打过扑克牌的人都应该能够秒懂。插入排序是一种最简单直观的排序算法，它的工作原理是通过构建有序序列，对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入。<br>插入排序和冒泡排序一样，也有一种优化算法，叫做拆半插入。</li></ol><p><strong>算法步骤</strong> </p><ol><li>将第一待排序序列第一个元素看做一个有序序列，把第二个元素到最后一个元素当成是未排序序列。</li><li>从头到尾依次扫描未排序序列，将扫描到的每个元素插入有序序列的适当位置。（如果待插入的元素与有序序列中的某个元素相等，则将待插入元素插入到相等元素的后面。）<br><img src="http://corningsun.qiniudn.com/blog/2018-07-09-insertionSort.gif-o" alt=""><h2 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h2>希尔排序，也称递减增量排序算法，是插入排序的一种更高效的改进版本。但希尔排序是非稳定排序算法。<br>希尔排序是基于插入排序的以下两点性质而提出改进方法的：</li></ol><ul><li>插入排序在对几乎已经排好序的数据操作时，效率高，即可以达到线性排序的效率；</li><li>但插入排序一般来说是低效的，因为插入排序每次只能将数据移动一位；<br>希尔排序的基本思想是：先将整个待排序的记录序列分割成为若干子序列分别进行直接插入排序，待整个序列中的记录“基本有序”时，再对全体记录进行依次直接插入排序。</li></ul><p><strong>算法步骤</strong> </p><ol><li>选择一个增量序列 t1，t2，……，tk，其中 ti &gt; tj, tk = 1；</li><li>按增量序列个数 k，对序列进行 k 趟排序；</li><li>每趟排序，根据对应的增量 ti，将待排序列分割成若干长度为 m 的子序列，分别对各子表进行直接插入排序。仅增量因子为 1 时，整个序列作为一个表来处理，表长度即为整个序列的长度。<h2 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h2>归并排序（Merge sort）是建立在归并操作上的一种有效的排序算法。该算法是采用分治法（Divide and Conquer）的一个非常典型的应用。<br>作为一种典型的分而治之思想的算法应用，归并排序的实现由两种方法：</li></ol><ul><li>自上而下的递归（所有递归的方法都可以用迭代重写，所以就有了第 2 种方法）；</li><li>自下而上的迭代；<br>和选择排序一样，归并排序的性能不受输入数据的影响，但表现比选择排序好的多，因为始终都是 O(nlogn) 的时间复杂度。代价是需要额外的内存空间。</li></ul><p><strong>算法步骤</strong> </p><ol><li>申请空间，使其大小为两个已经排序序列之和，该空间用来存放合并后的序列；</li><li>设定两个指针，最初位置分别为两个已经排序序列的起始位置；</li><li>比较两个指针所指向的元素，选择相对小的元素放入到合并空间，并移动指针到下一位置；</li><li>重复步骤 3 直到某一指针达到序列尾；</li><li>将另一序列剩下的所有元素直接复制到合并序列尾。<br><img src="http://corningsun.qiniudn.com/blog/2018-07-09-mergeSort.gif-o" alt=""><h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2>快速排序是由东尼·霍尔所发展的一种排序算法。在平均状况下，排序 n 个项目要 Ο(nlogn) 次比较。在最坏状况下则需要 Ο(n2) 次比较，但这种状况并不常见。事实上，快速排序通常明显比其他 Ο(nlogn) 算法更快，因为它的内部循环（inner loop）可以在大部分的架构上很有效率地被实现出来。<br>快速排序使用分治法（Divide and conquer）策略来把一个串行（list）分为两个子串行（sub-lists）。<br>快速排序又是一种分而治之思想在排序算法上的典型应用。本质上来看，快速排序应该算是在冒泡排序基础上的递归分治法。<br>快速排序的名字起的是简单粗暴，因为一听到这个名字你就知道它存在的意义，就是快，而且效率高！它是处理大数据最快的排序算法之一了。虽然 Worst Case 的时间复杂度达到了 O(n²)，但是人家就是优秀，在大多数情况下都比平均时间复杂度为 O(n logn) 的排序算法表现要更好，可是这是为什么呢，我也不知道。好在我的强迫症又犯了，查了 N 多资料终于在《算法艺术与信息学竞赛》上找到了满意的答案：<blockquote><p>快速排序的最坏运行情况是 O(n²)，比如说顺序数列的快排。但它的平摊期望时间是 O(nlogn)，且 O(nlogn) 记号中隐含的常数因子很小，比复杂度稳定等于 O(nlogn) 的归并排序要小很多。所以，对绝大多数顺序性较弱的随机数列而言，快速排序总是优于归并排序。</p></blockquote></li></ol><p><strong>算法步骤</strong> </p><ol><li>从数列中挑出一个元素，称为 “基准”（pivot）;</li><li>重新排序数列，所有元素比基准值小的摆放在基准前面，所有元素比基准值大的摆在基准的后面（相同的数可以到任一边）。在这个分区退出之后，该基准就处于数列的中间位置。这个称为分区（partition）操作；</li><li>递归地（recursive）把小于基准值元素的子数列和大于基准值元素的子数列排序；<br>递归的最底部情形，是数列的大小是零或一，也就是永远都已经被排序好了。虽然一直递归下去，但是这个算法总会退出，因为在每次的迭代（iteration）中，它至少会把一个元素摆到它最后的位置去。<br><img src="http://corningsun.qiniudn.com/blog/2018-07-09-quickSort.gif-o" alt=""><h2 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h2>堆排序（Heapsort）是指利用堆这种数据结构所设计的一种排序算法。堆积是一个近似完全二叉树的结构，并同时满足堆积的性质：即子结点的键值或索引总是小于（或者大于）它的父节点。堆排序可以说是一种利用堆的概念来排序的选择排序。分为两种方法：</li><li>大顶堆：每个节点的值都大于或等于其子节点的值，在堆排序算法中用于升序排列；</li><li>小顶堆：每个节点的值都小于或等于其子节点的值，在堆排序算法中用于降序排列；<br>堆排序的平均时间复杂度为 Ο(nlogn)。</li></ol><p><strong>算法步骤</strong> </p><ol><li>创建一个堆 H[0……n-1]；</li><li>把堆首（最大值）和堆尾互换；</li><li>把堆的尺寸缩小 1，并调用 shift_down(0)，目的是把新的数组顶端数据调整到相应位置；</li><li>重复步骤 2，直到堆的尺寸为 1。<br><img src="http://corningsun.qiniudn.com/blog/2018-07-09-heapSort.gif-o" alt=""><h2 id="计数排序"><a href="#计数排序" class="headerlink" title="计数排序"></a>计数排序</h2>计数排序的核心在于将输入的数据值转化为键存储在额外开辟的数组空间中。作为一种线性时间复杂度的排序，计数排序要求输入的数据必须是有确定范围的整数。<br>注意：计数排序对数组是有限制的，数组取值范围为<code>[0, maxValue]</code><br><img src="http://corningsun.qiniudn.com/blog/2018-07-09-countingSort.gif-o" alt=""><h2 id="桶排序"><a href="#桶排序" class="headerlink" title="桶排序"></a>桶排序</h2>桶排序是计数排序的升级版。它利用了函数的映射关系，高效与否的关键就在于这个映射函数的确定。为了使桶排序更加高效，我们需要做到这两点：</li><li>在额外空间充足的情况下，尽量增大桶的数量</li><li>使用的映射函数能够将输入的 N 个数据均匀的分配到 K 个桶中<br>同时，对于桶中元素的排序，选择何种比较排序算法对于性能的影响至关重要。<br><strong>什么时候最快</strong><br>当输入的数据可以均匀的分配到每一个桶中。<br><strong>什么时候最慢</strong><br>当输入的数据被分配到了同一个桶中。<br><img src="http://corningsun.qiniudn.com/blog/2018-07-09-bubbleSort.gif-o" alt=""><h2 id="基数排序"><a href="#基数排序" class="headerlink" title="基数排序"></a>基数排序</h2>基数排序是一种非比较型整数排序算法，其原理是将整数按位数切割成不同的数字，然后按每个位数分别比较。由于整数也可以表达字符串（比如名字或日期）和特定格式的浮点数，所以基数排序也不是只能使用于整数。<br><img src="http://corningsun.qiniudn.com/blog/2018-07-09-radixSort.gif-o" alt=""><br><strong>基数排序 vs 计数排序 vs 桶排序</strong><br>基数排序有两种方法：<br>这三种排序算法都利用了桶的概念，但对桶的使用方法上有明显差异：</li></ol><ul><li>计数排序：每个桶只存储单一键值；</li><li>桶排序：每个桶存储一定范围的数值；</li><li>基数排序：根据键值的每位数字来分配桶；</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;来源&lt;/strong&gt;：&lt;a href=&quot;https://github.com/hustcc/JS-Sorting-Algorithm&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Github JS-Sorting-Algorithm&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;排序算法是《数据结构与算法》中最基本的算法之一。&lt;br&gt;排序算法可以分为内部排序和外部排序，内部排序是数据记录在内存中进行排序，而外部排序是因排序的数据很大，一次不能容纳全部的排序记录，在排序过程中需要访问外存。常见的内部排序算法有：插入排序、希尔排序、选择排序、冒泡排序、归并排序、快速排序、堆排序、基数排序等。用一张图概括：&lt;br&gt;&lt;img src=&quot;http://corningsun.qiniudn.com/blog/2018-07-09-sort.png-o&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;冒泡排序&quot;&gt;&lt;a href=&quot;#冒泡排序&quot; class=&quot;headerlink&quot; title=&quot;冒泡排序&quot;&gt;&lt;/a&gt;冒泡排序&lt;/h2&gt;&lt;p&gt;冒泡排序（Bubble Sort）也是一种简单直观的排序算法。它重复地走访过要排序的数列，一次比较两个元素，如果他们的顺序错误就把他们交换过来。走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。这个算法的名字由来是因为越小的元素会经由交换慢慢“浮”到数列的顶端。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;算法步骤&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;比较相邻的元素。如果第一个比第二个大，就交换他们两个。&lt;/li&gt;
&lt;li&gt;对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对。这步做完后，最后的元素会是最大的数。&lt;/li&gt;
&lt;li&gt;针对所有的元素重复以上的步骤，除了最后一个。&lt;/li&gt;
&lt;li&gt;持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。&lt;br&gt;&lt;img src=&quot;http://corningsun.qiniudn.com/blog/2018-07-09-bubbleSort.gif-o&quot; alt=&quot;&quot;&gt;
    
    </summary>
    
    
      <category term="code" scheme="https://corningsun.com/tags/code/"/>
    
  </entry>
  
  <entry>
    <title>一张图看懂UML类图</title>
    <link href="https://corningsun.com/%E4%B8%80%E5%BC%A0%E5%9B%BE%E7%9C%8B%E6%87%82UML%E7%B1%BB%E5%9B%BE/"/>
    <id>https://corningsun.com/一张图看懂UML类图/</id>
    <published>2017-11-20T17:16:16.000Z</published>
    <updated>2017-11-20T09:16:27.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://corningsun.qiniudn.com/blog/2017-11-20-091405.jpg-o" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;http://corningsun.qiniudn.com/blog/2017-11-20-091405.jpg-o&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

      
    
    </summary>
    
      <category term="UML" scheme="https://corningsun.com/categories/UML/"/>
    
    
      <category term="UML" scheme="https://corningsun.com/tags/UML/"/>
    
  </entry>
  
  <entry>
    <title>口碑最好的一百部电影</title>
    <link href="https://corningsun.com/BestMovie/"/>
    <id>https://corningsun.com/BestMovie/</id>
    <published>2017-11-13T10:54:00.000Z</published>
    <updated>2018-07-10T01:00:33.681Z</updated>
    
    <content type="html"><![CDATA[<h2 id="01-肖申克的救赎"><a href="#01-肖申克的救赎" class="headerlink" title="01. 肖申克的救赎"></a>01. <strong><a href="https://movie.douban.com/subject/1292052/" target="_blank" rel="noopener">肖申克的救赎</a></strong></h2><p><img src="http://corningsun.qiniudn.com/blog/2018-07-10-1292052.jpg-o" alt=""><br>20世纪40年代末，小有成就的青年银行家安迪（蒂姆·罗宾斯 Tim Robbins 饰）因涉嫌杀害妻子及她的情人而锒铛入狱。在这座名为肖申克的监狱内，希望似乎虚无缥缈，终身监禁的惩罚无疑注定了安迪接下来灰暗绝望的人生。未过多久，安迪尝试接近囚犯中颇有声望的瑞德（摩根·弗里曼 Morgan Freeman 饰），请求对方帮自己搞来小锤子。以此为契机，二人逐渐熟稔，安迪也仿佛在鱼龙混杂、罪恶横生、黑白混淆的牢狱中找到属于自己的求生之道。他利用自身的专业知识，帮助监狱管理层逃税、洗黑钱，同时凭借与瑞德的交往在犯人中间也渐渐受到礼遇。表面看来，他已如瑞德那样对那堵高墙从憎恨转变为处之泰然，但是对自由的渴望仍促使他朝着心中的希望和目标前进。而关于其罪行的真相，似乎更使这一切朝前推进了一步……<br>本片根据著名作家斯蒂芬·金（Stephen Edwin King）的原著改编。</p><h2 id="02-控方证人"><a href="#02-控方证人" class="headerlink" title="02. 控方证人"></a>02. <strong><a href="https://movie.douban.com/subject/1296141/" target="_blank" rel="noopener">控方证人</a></strong></h2><p><img src="http://corningsun.qiniudn.com/blog/2018-07-10-1296141.jpg-o" alt=""><br>伦敦著名刑案辩护律师韦菲爵士（查尔斯•劳顿 Charles Laughton 饰）接受了心脏病治疗，但是身体依旧虚弱，第一天回家休养，护士一直严厉监督他服药，并杜绝烟酒。管家为了便于上楼，还专门为他修了电梯。但是，种种关心照顾，对于这位桀骜不驯、牙尖嘴利的大律师根本不起作用，反倒是一纸诉状令他倍感兴奋。律师梅休和当事人沃尔（泰隆•鲍华 Tyrone Power饰）登门拜访，请他出山打官司。原来，沃尔结识了富婆，两人相见甚欢，虽然仆人对他发明的打蛋器充满鄙夷，但是富婆却对他充满爱意，甚至为他修改了遗嘱，把8万英镑留给了他。然而，富婆却惨遭毒手。于是，沃尔成为警方的头号嫌疑犯。他的唯一证人是妻子克里斯汀（玛琳•黛德丽 Marlene Dietrich饰），然而后者登门时的冷漠与淡定，令韦菲爵士怀疑这其中另有隐情。在扑朔迷离的案件背后，隐藏着一个个环环相扣、不可告人的秘密……<br>本片改编自阿加莎•克里斯蒂同名小说。</p><h2 id="03-霸王别姬"><a href="#03-霸王别姬" class="headerlink" title="03. 霸王别姬"></a>03. <strong><a href="https://movie.douban.com/subject/1291546/" target="_blank" rel="noopener">霸王别姬</a></strong></h2><p><img src="http://corningsun.qiniudn.com/blog/2018-07-10-1291546.jpg-o" alt=""><br>段小楼（张丰毅）与程蝶衣（张国荣）是一对打小一起长大的师兄弟，两人一个演生，一个饰旦，一向配合天衣无缝，尤其一出《霸王别姬》，更是誉满京城，为此，两人约定合演一辈子《霸王别姬》。但两人对戏剧与人生关系的理解有本质不同，段小楼深知戏非人生，程蝶衣则是人戏不分。<br>段小楼在认为该成家立业之时迎娶了名妓菊仙（巩俐），致使程蝶衣认定菊仙是可耻的第三者，使段小楼做了叛徒，自此，三人围绕一出《霸王别姬》生出的爱恨情仇战开始随着时代风云的变迁不断升级，终酿成悲剧。</p><h2 id="04-美丽人生"><a href="#04-美丽人生" class="headerlink" title="04. 美丽人生"></a>04. <strong><a href="https://movie.douban.com/subject/1292063/" target="_blank" rel="noopener">美丽人生</a></strong></h2><p><img src="http://corningsun.qiniudn.com/blog/2018-07-10-1292063.jpg-o" alt=""><br>犹太青年圭多（罗伯托·贝尼尼）邂逅美丽的女教师多拉（尼可莱塔·布拉斯基），他彬彬有礼的向多拉鞠躬：“早安！公主！”。历经诸多令人啼笑皆非的周折后，天遂人愿，两人幸福美满的生活在一起。<br>然而好景不长，法西斯政权下，圭多和儿子被强行送往犹太人集中营。多拉虽没有犹太血统，毅然同行，与丈夫儿子分开关押在一个集中营里。聪明乐天的圭多哄骗儿子这只是一场游戏，奖品就是一辆大坦克，儿子快乐、天真的生活在纳粹的阴霾之中。尽管集中营的生活艰苦寂寞，圭多仍然带给他人很多快乐，他还趁机在纳粹的广播里问候妻子：“早安！公主！”<br>法西斯政权即将倾覆，纳粹的集中营很快就要接受最后的清理，圭多编给儿子的游戏该怎么结束？他们一家能否平安的度过这黑暗的年代呢？</p><h2 id="05-三十二"><a href="#05-三十二" class="headerlink" title="05. 三十二"></a>05. <strong><a href="https://movie.douban.com/subject/26236632/" target="_blank" rel="noopener">三十二</a></strong></h2><p><img src="http://corningsun.qiniudn.com/blog/2018-07-10-26236632.jpg-o" alt=""><br>《三十二》试图走进一个“慰安妇”的内心世界，是一部纪录片。“慰安妇”这三个字，曾经在多少中国人心里被披上“中国耻辱”的外衣。曾几何时，又是多么敏感的一个词。多少人想揭，却不敢活生生揭开；多少人想拍，又怕打扰到她们的生活。这是一段疼痛的历史，每个中国人心知肚明。<br>尘埃无足 轻重，所以无人留意，影片的第一个镜头便是飘落的尘埃，足足三十二秒，隐喻着我们的视角和态度，讲述这一段真实却“随风飘落”的故事……<br>荣誉<br>侵华日军南京大屠杀遇难同胞纪念馆/南京利济巷慰安所旧址陈列馆－永久馆藏<br>2013中国纪录片学院奖－最佳摄影（蔡涛）<br>2014凤凰视频纪录片大奖－最佳纪录短片<br>2014英国万像国际华语电影节－最佳纪录片<br>2014滨海国际微电影节－最佳纪录片<br>2015中国民族题材纪录片回顾 展－特别奖<br>2015美国里士满国际电影节－最佳纪录片（提名）<br>展映<br>中国电影导演协会<br>北京（国际）大学生影像展<br>马尼亚人权国际电影节<br>英国梅德韦视野电影节<br>美国纪录片电影节<br>广州国际纪录片节<br>观看地址：<a href="http://www.iqiyi.com/v_19rr9p3eqk.html" target="_blank" rel="noopener">http://www.iqiyi.com/v_19rr9p3eqk.html</a><br>预告片：<a href="http://www.tudou.com/programs/view/aRLUdweMLfg/" target="_blank" rel="noopener">http://www.tudou.com/programs/view/aRLUdweMLfg/</a></p><h2 id="06-这个杀手不太冷"><a href="#06-这个杀手不太冷" class="headerlink" title="06. 这个杀手不太冷"></a>06. <strong><a href="https://movie.douban.com/subject/1295644/" target="_blank" rel="noopener">这个杀手不太冷</a></strong></h2><p><img src="http://corningsun.qiniudn.com/blog/2018-07-10-1295644.jpg-o" alt=""><br>里昂（让·雷诺饰）是名孤独的职业杀手，受人雇佣。一天，邻居家小姑娘马蒂尔达（纳塔丽·波特曼饰)敲开他的房门，要求在他那里暂避杀身之祸。原来邻居家的主人是警方缉毒组的眼线，只因贪污了一小包毒品而遭恶警（加里·奥德曼饰）杀害全家的惩罚。马蒂尔达得到里昂的留救，幸免于难，并留在里昂那里。里昂教小女孩使枪，她教里昂法文，两人关系日趋亲密，相处融洽。<br>女孩想着去报仇，反倒被抓，里昂及时赶到，将女孩救回。混杂着哀怨情仇的正邪之战渐次升级，更大的冲突在所难免……</p><h2 id="07-阿甘正传"><a href="#07-阿甘正传" class="headerlink" title="07. 阿甘正传"></a>07. <strong><a href="https://movie.douban.com/subject/1292720/" target="_blank" rel="noopener">阿甘正传</a></strong></h2><p><img src="http://corningsun.qiniudn.com/blog/2018-07-10-1292720.jpg-o" alt=""><br>阿甘（汤姆·汉克斯 饰）于二战结束后不久出生在美国南方阿拉巴马州一个闭塞的小镇，他先天弱智，智商只有75，然而他的妈妈是一个性格坚强的女性，她常常鼓励阿甘“傻人有傻福”，要他自强不息。<br>阿甘像普通孩子一样上学，并且认识了一生的朋友和至爱珍妮（罗宾·莱特·潘 饰），在珍妮和妈妈的爱护下，阿甘凭着上帝赐予的“飞毛腿”开始了一生不停的奔跑。<br>阿甘成为橄榄球巨星、越战英雄、乒乓球外交使者、亿万富翁，但是，他始终忘不了珍妮，几次匆匆的相聚和离别，更是加深了阿甘的思念。<br>有一天，阿甘收到珍妮的信，他们终于又要见面……</p><h2 id="08-辛德勒的名单"><a href="#08-辛德勒的名单" class="headerlink" title="08. 辛德勒的名单"></a>08. <strong><a href="https://movie.douban.com/subject/1295124/" target="_blank" rel="noopener">辛德勒的名单</a></strong></h2><p><img src="http://corningsun.qiniudn.com/blog/2018-07-10-1295124.jpg-o" alt=""><br>1939年，波兰在纳粹德国的统治下，党卫军对犹太人进行了隔离统治。德国商人奥斯卡·辛德勒（连姆·尼森 Liam Neeson 饰）来到德军统治下的克拉科夫，开设了一间搪瓷厂，生产军需用品。凭着出众的社交能力和大量的金钱，辛德勒和德军建立了良好的关系，他的工厂雇用犹太人工作，大发战争财。<br>1943年，克拉科夫的犹太人遭到了惨绝人寰的大屠杀，辛德勒目睹这一切，受到了极大的震撼，他贿赂军官，让自己的工厂成为集中营的附属劳役营，在那些疯狂屠杀的日子里，他的工厂也成为了犹太人的避难所。<br>1944年，德国战败前夕，屠杀犹太人的行动越发疯狂，辛德勒向德军军官开出了1200人的名单，倾家荡产买下了这些犹太人的生命。在那些暗无天日的岁月里，拯救一个人，就是拯救全世界。</p><h2 id="09-十二怒汉"><a href="#09-十二怒汉" class="headerlink" title="09. 十二怒汉"></a>09. <strong><a href="https://movie.douban.com/subject/1293182/" target="_blank" rel="noopener">十二怒汉</a></strong></h2><p><img src="http://corningsun.qiniudn.com/blog/2018-07-10-1293182.jpg-o" alt=""><br>一个在贫民窟长大的18岁少年因为涉嫌杀害自己的父亲被告上法庭，证人言之凿凿，各方面的证据都对他极为不利。十二个不同职业的人组成了这个案件的陪审团，他们要在休息室达成一致的意见，裁定少年是否有罪，如果罪名成立，少年将会被判处死刑。<br>十二个陪审团成员各有不同，除了8号陪审员（H enry Fonda 饰）之外，其他人对这个犯罪事实如此清晰的案子不屑一顾，还没有开始讨论就认定了少年有罪。8号陪审员提出了自己的“合理疑点”，耐心地说服其他的陪审员，在这个过程中，他们每个人不同的人生观也在冲突和较量……</p><h2 id="10-新世纪福音战士剧场版：Air-真心为你"><a href="#10-新世纪福音战士剧场版：Air-真心为你" class="headerlink" title="10. 新世纪福音战士剧场版：Air/真心为你"></a>10. <strong><a href="https://movie.douban.com/subject/1308892/" target="_blank" rel="noopener">新世纪福音战士剧场版：Air/真心为你</a></strong></h2><p><img src="http://corningsun.qiniudn.com/blog/2018-07-10-1308892.jpg-o" alt=""><br>神秘的EVA零号机驾驶员绫波丽，在与碇元度约定之时，来到了NERV底层中央教条的红色水池边。她的命运似乎就将在此结束。<br>在危急时刻，葛城美里不但要完成加持良治交待的对“第二次浩劫”真相以及“人类补完计划”的探查工作，还要保护碇真嗣与明日香，以及防备SEELE 对初号机与二号机的物理接触。<br>出于对碇元度的憎恨，赤木律子接受了SEELE引爆MAGI的提案，她能否成功？长期与SEELE共事的碇元度、冬月耕造、碇唯，为了防止人类“最终的悲剧”，而酝酿了的“人类补完计划”能否实现？尽在《新世纪福音战士》电影版第2部中解答。</p><h2 id="11-机器人总动员"><a href="#11-机器人总动员" class="headerlink" title="11. 机器人总动员"></a>11. <strong><a href="https://movie.douban.com/subject/2131459/" target="_blank" rel="noopener">机器人总动员</a></strong></h2><p><img src="http://corningsun.qiniudn.com/blog/2018-07-10-2131459.jpg-o" alt=""><br>公元2805年，人类文明高度发展，却因污染和生活垃圾大量增加使得地球不再适于人类居住。地球人被迫乘坐飞船离开故乡，进行一次漫长无边的宇宙之旅。临行前他们委托Buynlarge的公司对地球垃圾进行清理，该公司开发了名为WALL·E（Waste Allocation Loa d Lifters – Earth 地球废品分装员）的机器人担当此重任。<br>这些机器人按照程序日复一日、年复一年辛勤工作，但随着时间的流逝和恶劣环境的侵蚀，WALL·E们接连损坏、停止运动。最后只有一个仍在进行这项似乎永无止境的工作。经历了漫长的岁月，它开始拥有了自己的意识。它喜欢将收集来的宝贝小心翼翼藏起，喜欢收工后看看几百年前的歌舞片，此外还有一只蟑螂朋友作伴。直到有一天，一艘来自宇宙的飞船打破了它一成不变的生活……<br>本片荣获2009年第81届奥斯卡最佳动画长片奖。</p><h2 id="12-海豚湾"><a href="#12-海豚湾" class="headerlink" title="12. 海豚湾"></a>12. <strong><a href="https://movie.douban.com/subject/3442220/" target="_blank" rel="noopener">海豚湾</a></strong></h2><p><img src="http://corningsun.qiniudn.com/blog/2018-07-10-3442220.jpg-o" alt=""><br>日本和歌山县太地，是一个景色优美的小渔村，然而这里却常年上演着惨无人道的一幕。每年，数以万计的海豚经过这片海域，他们的旅程却在太地戛然而止。渔民们将海豚驱赶到靠近岸边的一个地方，来自世界各地的海豚训练师挑选合适的对象，剩下的大批海豚则被渔民毫无理由地赶尽杀绝。这些屠杀，这些罪行，因为种种利益而被政府和相关组织所隐瞒。<br>理查德•贝瑞（Richard O’Barry）年轻时曾是一名海豚训练师，他所参与拍摄电影《海豚的故事》备受欢迎。但是，一头海豚的死让理查德的心灵受到强烈的震撼。从此，他致力于拯救海豚的活动。不顾当地政府和村民百般阻挠，他和他的摄影团队想方设法潜入太地的海豚屠杀场，只为将罪行公之于众，拯救人类可爱的朋友……<br>本片荣获2010年第82届奥斯卡金像奖最佳纪录长片奖。</p><h2 id="13-回忆积木小屋"><a href="#13-回忆积木小屋" class="headerlink" title="13. 回忆积木小屋"></a>13. <strong><a href="https://movie.douban.com/subject/3560787/" target="_blank" rel="noopener">回忆积木小屋</a></strong></h2><p><img src="http://corningsun.qiniudn.com/blog/2018-07-10-3560787.jpg-o" alt=""><br>恍如世界末日一般，洪水席卷地球，世界变成一片汪洋，空旷而孤寂。一位老人孤独地生活在这个世上，或凭栏远眺，或看看电视消磨时光，几无可以交流之人。水位不断上涨，老人只能不断加盖房子，宛如摞积木一般，房子有如矗立在深海中的巨塔。在搬运家具时，老人的烟斗不慎掉落水中，更顺着层与层之间的通道掉落下去。烟斗有着他和老伴共同的回忆，老人决心潜水取回烟斗，但是这一举动似乎打开了记忆的闸门，往日的回忆不断涌现。老人无法自已，一层层向下沉去，寻找那些早已沉在海底的珍贵记忆……<br>本片荣获2009年奥斯卡金像奖最佳动画短片奖。</p><h2 id="14-银魂完结篇：直到永远的万事屋"><a href="#14-银魂完结篇：直到永远的万事屋" class="headerlink" title="14. 银魂完结篇：直到永远的万事屋"></a>14. <strong><a href="https://movie.douban.com/subject/11615927/" target="_blank" rel="noopener">银魂完结篇：直到永远的万事屋</a></strong></h2><p><img src="http://corningsun.qiniudn.com/blog/2018-07-10-11615927.jpg-o" alt=""><br>银魂完结篇即将上演，坂田银时（杉田智和 配音）在影院抓住一个盗录的电影小偷，谁知刺眼的白光之后，他却被带到一个颇有些陌生的世界。不远处的江户，曾经的繁华早已不再，高楼大厦已变成没有人居住的废墟。原来此刻银时正身处五年后的未来，过去的岁月里，名为“白诅”的神秘病毒恣意蔓延，导致世界濒临毁灭边缘。他在荒芜的街道见到了飒爽英姿的志村新八（阪口大助 配音）和武功高强的神乐（钉宫理惠 配音）。似乎未来世界的银时当初为调查白诅而意外死亡，新八与神乐继承了他和万事屋的遗址，与一切恶徒作战。<br>化名阿珍的银时回到破败的街道和朋友们身边，此时他仿佛背负起改变黑色未来的重大使命……</p><h2 id="15-灿烂人生"><a href="#15-灿烂人生" class="headerlink" title="15. 灿烂人生"></a>15. <strong><a href="https://movie.douban.com/subject/1291831/" target="_blank" rel="noopener">灿烂人生</a></strong></h2><p><img src="http://corningsun.qiniudn.com/blog/2018-07-10-1291831.jpg-o" alt=""><br>马里奥（阿莱西奥•博尼 Alessio Boni 饰）和尼古拉（卢伊吉洛•肖卡 Luigi Lo Cascio 饰）是亲密无间的两兄弟，但是酷爱诗歌的马里奥却在考试中因为与教授意见相左而不及格，相反尼古拉投其所好的表现赢得了医学教授的好评拿到了高分。他们几个朋友相约去毕 业旅行，但是马里奥却带来了另外一个不速之客——他从精神病院搭救出来受伤的女孩佐珍（杰丝敏•特丽卡 Jasmine Trinca 饰）。于是，兄弟俩决定陪她寻找亲人。在一片革命洪流之中，马里奥弃笔从戎，选择做警察，而尼古拉则漂泊异乡成为了精神科医生。佛罗伦萨的大水，让兄弟俩重逢，此时尼古拉已经和钢琴师朱莉安成为伉俪。而马里奥则对摄影师米雷拉一见钟情。他们的感情同样经受着社会动荡的考验……<br>本片片长6个小时，通过讲述意大利一家人的悲欢离合，反映了意大利从1966年至2000年的社会巨变。</p><h2 id="16-盗梦空间"><a href="#16-盗梦空间" class="headerlink" title="16. 盗梦空间"></a>16. <strong><a href="https://movie.douban.com/subject/3541415/" target="_blank" rel="noopener">盗梦空间</a></strong></h2><p><img src="http://corningsun.qiniudn.com/blog/2018-07-10-3541415.jpg-o" alt=""><br>道姆·柯布（莱昂纳多·迪卡普里奥 Leonardo DiCaprio 饰）与同事阿瑟（约瑟夫·戈登-莱维特 Joseph Gordon-Levitt 饰）和纳什（卢卡斯·哈斯 Lukas Haas 饰）在一次针对日本能源大亨齐藤（渡边谦 饰）的盗梦行动中失败，反被齐藤利用。齐藤威逼利诱因遭通缉而流亡海外的柯布帮他拆分他竞争对手的公司，采取极端措施在其唯一继承人罗伯特·费希尔（希里安·墨菲 Cillian Murphy 饰）的深层潜意识中种下放弃家族公司、自立门户的想法。为了重返美国，柯布偷偷求助于岳父迈尔斯（迈克尔·凯恩 Michael Caine 饰），吸收了年轻的梦境设计师艾里阿德妮（艾伦·佩吉 Ellen Page 饰）、梦境演员艾姆斯（汤姆·哈迪 Tom Hardy 饰）和药剂师约瑟夫（迪利普·劳 Dileep Rao 饰）加入行动。在一层层递进的梦境中，柯布不仅要对付费希尔潜意识的本能反抗，还必须直面已逝妻子梅尔（玛丽昂·歌迪亚 Marion Cotillard 饰）的处处破坏，实际情况远比预想危险得多……</p><h2 id="17-千与千寻"><a href="#17-千与千寻" class="headerlink" title="17. 千与千寻"></a>17. <strong><a href="https://movie.douban.com/subject/1291561/" target="_blank" rel="noopener">千与千寻</a></strong></h2><p><img src="http://corningsun.qiniudn.com/blog/2018-07-10-1291561.jpg-o" alt=""><br>千寻和爸爸妈妈一同驱车前往新家，在郊外的小路上不慎进入了神秘的隧道——他们去到了另外一个诡异世界—一个中世纪的小镇。远处飘来食物的香味，爸爸妈妈大快朵颐，孰料之后变成了猪！这时小镇上渐渐来了许多样子古怪、半透明的人。<br>千寻仓皇逃出，一个叫小白的人救了他，喂了她阻止身体消 失的药，并且告诉她怎样去找锅炉爷爷以及汤婆婆，而且必须获得一分工作才能不被魔法变成别的东西。<br>千寻在小白的帮助下幸运地获得了一份在浴池打杂的工作。渐渐她不再被那些怪模怪样的人吓倒，并从小玲那儿知道了小白是凶恶的汤婆婆的弟子。<br>一次，千寻发现小白被一群白色飞舞的纸人打伤，为了救受伤的小白，她用河神送给她的药丸驱出了小白身体内的封印以及守封印的小妖精，但小白还是没有醒过来。<br>为了救小白，千寻又踏上了她的冒险之旅。</p><h2 id="18-泰坦尼克号"><a href="#18-泰坦尼克号" class="headerlink" title="18. 泰坦尼克号"></a>18. <strong><a href="https://movie.douban.com/subject/1292722/" target="_blank" rel="noopener">泰坦尼克号</a></strong></h2><p><img src="http://corningsun.qiniudn.com/blog/2018-07-10-1292722.jpg-o" alt=""><br>1912年4月10日，号称 “世界工业史上的奇迹”的豪华客轮泰坦尼克号开始了自己的处女航，从英国的南安普顿出发驶往美国纽约。富家少女罗丝（凯特•温丝莱特）与母亲及未婚夫卡尔坐上了头等舱；另一边，放荡不羁的少年画家杰克（莱昂纳多·迪卡普里奥）也在码头的一场赌博中赢得了下等舱的船票。<br>罗丝厌倦了上流社会虚伪的生活，不愿嫁给卡尔，打算投海自尽，被杰克救起。很快，美丽活泼的罗丝与英俊开朗的杰克相爱，杰克带罗丝参加下等舱的舞会、为她画像，二人的感情逐渐升温。<br>1912年4月14日，星期天晚上，一个风平浪静的夜晚。泰坦尼克号撞上了冰山，“永不沉没的”泰坦尼克号面临沉船的命运，罗丝和杰克刚萌芽的爱情也将经历生死的考验。</p><h2 id="19-海上钢琴师"><a href="#19-海上钢琴师" class="headerlink" title="19. 海上钢琴师"></a>19. <strong><a href="https://movie.douban.com/subject/1292001/" target="_blank" rel="noopener">海上钢琴师</a></strong></h2><p><img src="http://corningsun.qiniudn.com/blog/2018-07-10-1292001.jpg-o" alt=""><br>本片讲述了一个钢琴天才传奇的一生。<br>1900年，Virginian号豪华邮轮上，一个孤儿被遗弃在头等舱，由船上的水手抚养长大，取名1900（蒂姆•罗斯 饰）。1900慢慢长大，显示出了无师自通的非凡钢琴天赋，在船上的乐队表演钢琴，每个听过他演奏的人，都被深深打动。爵士 乐鼻祖杰尼听说了1900的高超技艺，专门上船和他比赛，最后自叹弗如，黯然离去。<br>可惜，这一切的事情都发生在海上，1900从来不愿踏上陆地，直到有一天，他爱上了一个女孩，情愫在琴键上流淌。他会不会为了爱情，踏上陆地开始新的生活，用他的琴声惊艳世界？他将怎样谱写自己非凡的人生。</p><h2 id="20-大话西游之大圣娶亲"><a href="#20-大话西游之大圣娶亲" class="headerlink" title="20. 大话西游之大圣娶亲"></a>20. <strong><a href="https://movie.douban.com/subject/1292213/" target="_blank" rel="noopener">大话西游之大圣娶亲</a></strong></h2><p><img src="http://corningsun.qiniudn.com/blog/2018-07-10-1292213.jpg-o" alt=""><br>至尊宝（周星驰 饰）被月光宝盒带回到五百年前，遇见紫霞仙子（朱茵 饰），被对方打上烙印成为对方的人，并发觉自己已变成孙悟空。<br>紫霞与青霞（朱茵 饰）本是如来佛祖座前日月神灯的灯芯（白天是紫霞，晚上是青霞），二人虽然同一肉身却仇恨颇深，因此紫霞立下誓言，谁能拔出她手中的紫青宝剑，谁就是她的意中人。紫青宝剑被至尊宝于不经意间拔出，紫霞决定以身相许，却遭一心记挂白晶晶（莫文蔚 饰）的至尊宝拒绝。后牛魔王救下迷失在沙漠中的紫霞，并逼紫霞与他成婚，关键时刻，至尊宝现身。</p><h2 id="21-疯狂动物城"><a href="#21-疯狂动物城" class="headerlink" title="21. 疯狂动物城"></a>21. <strong><a href="https://movie.douban.com/subject/25662329/" target="_blank" rel="noopener">疯狂动物城</a></strong></h2><p><img src="http://corningsun.qiniudn.com/blog/2018-07-10-25662329.jpg-o" alt=""><br>故事发生在一个所有哺乳类动物和谐共存的美好世界中，兔子朱迪（金妮弗·古德温 Ginnifer Goodwin 配音）从小就梦想着能够成为一名惩恶扬善的刑警，凭借着智慧和努力，朱迪成功的从警校中毕业进入了疯狂动物城警察局，殊不知这里是大型肉食类动物的领地，作为第一只，也是唯一的小型食草类动物，朱迪会遇到怎样的故事呢？<br>近日里，城中接连发生动物失踪案件，就在全部警员都致力于调查案件真相之时，朱迪却被局长（伊德瑞斯·艾尔巴 Idris Elba 配音）发配成为了一名无足轻重的交警。某日，正在执勤的兔子遇见了名为尼克（杰森·贝特曼 Jason Bateman 配音）的狐狸，两人不打不相识，之后又误打误撞的接受了寻找失踪的水獭先生的任务，如果不能在两天之内找到水獭先生，朱迪就必须自愿离开警局。朱迪找到了尼克，两人联手揭露了一个隐藏在疯狂动物城之中的惊天秘密。</p><h2 id="22-忠犬八公的故事"><a href="#22-忠犬八公的故事" class="headerlink" title="22. 忠犬八公的故事"></a>22. <strong><a href="https://movie.douban.com/subject/3011091/" target="_blank" rel="noopener">忠犬八公的故事</a></strong></h2><p><img src="http://corningsun.qiniudn.com/blog/2018-07-10-3011091.jpg-o" alt=""><br>八公（Forest 饰）是一条谜一样的犬，因为没有人知道它从哪里来。教授帕克（理查·基尔 Richard Gere 饰）在小镇的火车站拣到一只走失的小狗，冥冥中似乎注定小狗和帕克教授有着某种缘分，帕克一抱起这只小狗就再也放不下来，最终，帕克对小狗八公的疼爱感化了起初极力反对养狗的妻子卡特（琼·艾伦 Joan Allen 饰）。八公在帕克的呵护下慢慢长大，帕克上班时八公会一直把他送到车站，下班时八公也会早早便爬在车站等候，八公的忠诚让小镇的人家对它更加疼爱。有一天，八公在帕克要上班时表现异常，居然玩起了以往从来不会的捡球游戏，八公的表现让帕克非常满意，可是就是在那天，帕克因病去世。帕克的妻子、女儿安迪（萨拉·罗默尔 Sarah Roemer 饰）及女婿迈克尔（罗比·萨布莱特 Robbie Sublett 饰）怀着无比沉痛的心情埋葬了帕克，可是不明就里的八公却依然每天傍晚五点准时守候在小站的门前，等待着主人归来……<br>本片根据上个世纪30年代发生在日本的真实故事改编，1987年在日本拍成电影后创造了40亿日元的票房。</p><h2 id="23-放牛班的春天"><a href="#23-放牛班的春天" class="headerlink" title="23. 放牛班的春天"></a>23. <strong><a href="https://movie.douban.com/subject/1291549/" target="_blank" rel="noopener">放牛班的春天</a></strong></h2><p><img src="http://corningsun.qiniudn.com/blog/2018-07-10-1291549.jpg-o" alt=""><br>1949年的法国乡村，音乐家克莱门特（杰勒德•尊诺 饰）到了一间外号叫“塘低”的男子寄宿学校当助理教师。学校里的学生大部分都是难缠的问题儿童，体罚在这里司空见惯，学校的校长（弗朗西斯•贝尔兰德 饰）只顾自己的前途，残暴高压。<br>性格沉静的克莱门特尝试用自己的方法改善这种状况，他重新创作音乐作品，组织合唱团，决定用音乐的方法来打开学生们封闭的心灵。<br>然而，事情并不顺利，克莱门特发现学生皮埃尔•莫安琦（尚•巴堤•莫里耶 饰）拥有非同一般的音乐天赋，但是单亲家庭长大的他，性格异常敏感孤僻，怎样释放皮埃尔的音乐才能，让克莱门特头痛不已；同时，他与皮埃尔母亲的感情也渐渐微妙起来。</p><h2 id="24-教父"><a href="#24-教父" class="headerlink" title="24. 教父"></a>24. <strong><a href="https://movie.douban.com/subject/1291841/" target="_blank" rel="noopener">教父</a></strong></h2><p><img src="http://corningsun.qiniudn.com/blog/2018-07-10-1291841.jpg-o" alt=""><br>40年代的美国，“教父”维托·唐·柯里昂（马龙·白兰度 饰）是黑手党柯里昂家族的首领，带领家族从事非法的勾当，但同时他也是许多弱小平民的保护神，深得人们爱戴。<br>因为拒绝了毒枭索洛索的毒品交易要求，柯里昂家族和纽约其他几个黑手党家族的矛盾激化。圣诞前夕，索洛索劫持了“教 父”的参谋汤姆，并派人暗杀“教父”；因为内奸的出卖，“教父”的大儿子逊尼被仇家杀害；小儿子麦克（阿尔·帕西诺 饰）也被卷了进来，失去爱妻。黑手党家族之间的矛盾越来越白热化。<br>年老的“教父”面对丧子之痛怎样统领全局？黑手党之间的仇杀如何落幕？谁是家族的内奸？谁又能够成为新一代的“教父”？<br>血雨腥风和温情脉脉，在这部里程碑式的黑帮史诗巨片里真实上演。</p><h2 id="25-乱世佳人"><a href="#25-乱世佳人" class="headerlink" title="25. 乱世佳人"></a>25. <strong><a href="https://movie.douban.com/subject/1300267/" target="_blank" rel="noopener">乱世佳人</a></strong></h2><p><img src="http://corningsun.qiniudn.com/blog/2018-07-10-1300267.jpg-o" alt=""><br>美国南北战争前夕，南方农场塔拉庄园的千金斯嘉丽（费雯·丽 Vivien Leigh 饰）爱上了另一个农场主的儿子艾希礼（莱斯利·霍华德 Leslie Howard 饰），遭到了拒绝，为了报复，她嫁给了自己不爱的男人，艾希礼妻子梅兰（奥利维娅·德哈维兰 Olivia de Havilland 饰）的弟弟查尔斯。<br>战争期间，斯嘉丽成为寡妇，失去母亲，挑起生活的重担， 不再是当初的千金小姐；战争结束后，她又两度为人妻，嫁给了爱她多年的投机商人瑞德（克拉克·盖博 Clark Gable 饰）。<br>然而，纵使经历了生活的艰苦，斯嘉丽对艾希礼的感情仍然没有改变。艾希礼妻子梅兰的去世，给了斯嘉丽一个机会，一边是深爱自己的丈夫瑞德，一边是心心念念多年的艾希礼？斯嘉丽会给自己怎样一个不一样的明天？</p><h2 id="26-鬼子来了"><a href="#26-鬼子来了" class="headerlink" title="26. 鬼子来了"></a>26. <strong><a href="https://movie.douban.com/subject/1291858/" target="_blank" rel="noopener">鬼子来了</a></strong></h2><p><img src="http://corningsun.qiniudn.com/blog/2018-07-10-1291858.jpg-o" alt=""><br>抗日战争末期，河北某偏僻乡村挂甲台的老实村民马大三（姜文 饰）迎来棘手难题：某人将分别装有日本鬼子花屋小三郎（香川照之 饰）和汉奸翻译董汉臣的麻袋扔给他，声称不日来取，却迟迟不见其来。厚道的马大三一边将两人当亲爹娘侍奉，一边同村人商议计策，最后决定将两人处死，但终因“天 意”不了了之。<br>巧舌如簧的董汉臣为自救，设法令挂甲台村民与花屋小三郎签署合约，称将花屋安全送到日方宪兵队后，村民可得到几大车粮食。马大三与众村民兴高采烈赶到宪兵队，将俘虏交由日方，然而日方并无“以其礼还其礼”的教养。</p><h2 id="27-小鞋子"><a href="#27-小鞋子" class="headerlink" title="27. 小鞋子"></a>27. <strong><a href="https://movie.douban.com/subject/1303021/" target="_blank" rel="noopener">小鞋子</a></strong></h2><p><img src="http://corningsun.qiniudn.com/blog/2018-07-10-1303021.jpg-o" alt=""><br>家境贫寒的男孩Ali（Amir Farrokh Hashemian）帮妹妹Zahra（Bahare Seddiqi）取修补好的鞋子时，不慎将鞋子弄丢，为了不被父（Mohammad Amir Naji）、母（Fereshte Sarabandi ）责罚，他央求Zahra暂时保密，说两人可以替换着穿他的鞋子上学，并答应一定会帮她买双新鞋子。<br>Ali原本指望用他和父亲进城打工挣的钱帮Zahra买双新鞋，父亲的意外受伤打消了他的美梦。看到全市长跑比赛季军的奖品是一双运动鞋时，Ali决定参加比赛，但是他错过了报名日期。几经哀求，老师（Dariush Mokhtari ）破例让实力出众的Ali参加了比赛。比赛场上，Ali不断提醒自己，一定要得第三名！</p><h2 id="28-调音师"><a href="#28-调音师" class="headerlink" title="28. 调音师"></a>28. <strong><a href="https://movie.douban.com/subject/6846495/" target="_blank" rel="noopener">调音师</a></strong></h2><p><img src="http://corningsun.qiniudn.com/blog/2018-07-10-6846495.jpg-o" alt=""><br>阿德里安（Grégoire Leprince-Ringuet 饰）是一个学习钢琴已有15年之久的天才钢琴家，可是在梦寐以求的伯恩斯坦钢琴大赛上他功败垂成，人生跌落谷底。经过一段时间调整，阿德里安重新振作，成为了一名盲人钢琴调音师。事实上他只是带上了隐形眼镜，这会让别人认为他听觉方面更加敏锐，并由此得到更多的同情和消费，甚至还会窥视到别人的生活与隐私，他兀自沉浸在这种虽处闹市又仿佛置身世外的超然之中。某天，他来到一户人家工作，殊不知这里刚刚发生一起凶案……<br>本片荣获2011年卢纹（Leuven）国际电影节最佳短片奖、2012年法国恺撒奖最佳短片奖。</p><h2 id="29-大闹天宫"><a href="#29-大闹天宫" class="headerlink" title="29. 大闹天宫"></a>29. <strong><a href="https://movie.douban.com/subject/1418019/" target="_blank" rel="noopener">大闹天宫</a></strong></h2><p><img src="http://corningsun.qiniudn.com/blog/2018-07-10-1418019.jpg-o" alt=""><br>话说在东土傲来国有一座花果山，山上有一尊石猴吸收日精月华化身为一只神猴（邱岳峰 音），统领着山中的猴子猴孙。为求得一件称心的宝贝，神猴孙大圣潜入龙宫，强硬求来大禹治水时的定海神针如意金箍棒。东海龙王（毕克 音）心有不甘，于是上天将此事诉诸玉帝（富润生 音）。玉皇大帝命令太白金星（尚华 音）下界招安，许以爵位。不知有诈的孙大圣欣然前往，却发现只是负责养马的弼马温。得知受骗的猴王反下天庭，与天兵天将在花果山展开大战……<br>本片根据古典名著《西游记》中的故事改编，前后历时4年创作，并荣获1962年捷克斯洛伐克卡罗维发利国际电影节短片特别奖、1978年英国伦敦国际电影节年度杰出电影奖、1982年厄瓜多尔第四届国际儿童电影节三等奖、第二届中国电影“百花奖”最佳美术片奖。</p><h2 id="30-摩登时代"><a href="#30-摩登时代" class="headerlink" title="30. 摩登时代"></a>30. <strong><a href="https://movie.douban.com/subject/1294371/" target="_blank" rel="noopener">摩登时代</a></strong></h2><p><img src="http://corningsun.qiniudn.com/blog/2018-07-10-1294371.jpg-o" alt=""><br>二十年代的美国处于经济萧条时期，失业率居高不下，工人受尽压榨，成为了大机器生产中的一颗螺丝钉。查理（查理·卓别林 Charles Chaplin 饰）就是一个底层市民，他在一个机器隆隆的厂房里日以继夜地工作，以赚取微薄的收入。重复繁重的工作压得他喘不过气，他把人们的鼻子当成螺丝钉来拧，卷入流水线机器的皮带里，令人苦笑不得。<br>查理尽管贫穷，但却很善良。他在路上搭救了流浪女，和她一起生活，家里破烂却又温馨。每次身无分文的查理为了找到吃的，都会故意犯事，以便进入监牢。光景一时间有了好转，流浪女成了歌舞红星，然而好景太短暂了。</p><h2 id="31-暴力云与送子鹳"><a href="#31-暴力云与送子鹳" class="headerlink" title="31. 暴力云与送子鹳"></a>31. <strong><a href="https://movie.douban.com/subject/3734350/" target="_blank" rel="noopener">暴力云与送子鹳</a></strong></h2><p><img src="http://corningsun.qiniudn.com/blog/2018-07-10-3734350.jpg-o" alt=""><br>皮克斯2009《飞屋环游记》加映短片。<br>在西方传说中有一种鸟名字叫“鹳”，这种鸟是运送孩子的。但是“鹳”运送的孩子又是从哪来的呢？原来，在天空的云层中，有生命的云朵们创造了这些“孩子”，而在这么多创造生命的云朵中，有一朵忧伤的“阴云”，它的名字叫“Gus”。它的特长是创造那些“攻击性很强”的孩子，比如鳄鱼宝宝，凶猛的豪猪宝宝和山羊宝宝。而它的伙伴Peck，一只鹳负责运送Gus的“作品”到人间。可是随着Gus的创造越来越疯狂，Peck运送这些“危险品”的任务变得越难越难，每次回来都是伤痕累累。直到一次，当Gus捧着一个鲨鱼宝宝交给他，已经筋疲力尽的Peck吓得远远的飞走了，而Gus伤心地哭了起来……</p><h2 id="32-七武士"><a href="#32-七武士" class="headerlink" title="32. 七武士"></a>32. <strong><a href="https://movie.douban.com/subject/1295399/" target="_blank" rel="noopener">七武士</a></strong></h2><p><img src="http://corningsun.qiniudn.com/blog/2018-07-10-1295399.jpg-o" alt=""><br>日本战国时代，一小山村面临着山贼的威胁，为了保护秋天的收成，村中长老决定让去请武士来保护村子安全，但只能拿出的报酬是一天三顿的白米饭。在城里，他们遭到了武士白眼甚至被打。直到勘兵卫（志村乔饰）的出现，他现今已沦为浪人，几经考虑最后答应了。他对农民说至少需要七名武士，于是久藏（宫口精二饰）、胜四郎（木村功饰）、五郎（稻叶义男饰）、七郎（加东大介饰）、平八（千秋实饰）和菊千代（三船敏郎饰）等六人也加入了队伍，七个人肩负保卫村子的任务。<br>整个防御准备的过程中，武士与农民间发生许多摩擦也闹出不少笑话。而在一次偷袭行动中，有武士为救农民被火枪打死，很快山贼的反扑随之而来，一场恶战即将开始。</p><h2 id="33-父与女"><a href="#33-父与女" class="headerlink" title="33. 父与女"></a>33. <strong><a href="https://movie.douban.com/subject/1300395/" target="_blank" rel="noopener">父与女</a></strong></h2><p><img src="http://corningsun.qiniudn.com/blog/2018-07-10-1300395.jpg-o" alt=""><br>秋日温暖的傍晚，父亲带着女儿一起骑单车，他们穿过林间小路，骑过草地，骑上高坡，来到平静的湖边。<br>父亲抱抱女儿，登上了小船。女儿在湖边静静的等待，等到船在视线里变模糊，等到太阳就要落山。父亲迟迟不归，女儿一个人骑着小小的脚踏车回去了。从那以后女儿每天都来湖边等候，她一个人骑着单车来来返返，风雨无阻。多年过去，小女孩为人妇，为人母，转眼老去。<br>已然老去的她日日来到湖边，直到湖水干涸，化为滩涂。她来到沉睡在湖底的小船边，躺在小船里，就像躺在父亲暖暖的臂弯。</p><h2 id="34-东京物语"><a href="#34-东京物语" class="headerlink" title="34. 东京物语"></a>34. <strong><a href="https://movie.douban.com/subject/1291568/" target="_blank" rel="noopener">东京物语</a></strong></h2><p><img src="http://corningsun.qiniudn.com/blog/2018-07-10-1291568.jpg-o" alt=""><br>儿女们都大了，各自成家。父亲周吉（笠智众饰）和老伴（东山千荣子饰）要去东京看望他们，老两口带着愉快心情上路。可另一边，还没等他们到大儿子家，孙子就因为爷爷奶奶到来腾地方哭闹不停。老人开始觉得尴尬，大儿子幸一（山村聪饰）在东京当医生，二女儿繁（杉村春子饰）在东京开美容店，二儿媳纪子（原节子饰），小女儿京子（香川京子饰）外，大阪还有三子敬三。<br>东京让老人陌生，在儿女家也好不到哪去。大儿子工作繁忙，没时间带他们出去玩。搬到女儿家，依旧每日困守且有矛盾。老两口渐渐也明白儿女们的处境，他们在东京的老友也过得不好。只有守寡的儿媳纪子对老人很是孝顺。之后老人踏上回家的路，前后不过十天……</p><h2 id="35-鹬"><a href="#35-鹬" class="headerlink" title="35. 鹬"></a>35. <strong><a href="https://movie.douban.com/subject/26766869/" target="_blank" rel="noopener">鹬</a></strong></h2><p><img src="http://corningsun.qiniudn.com/blog/2018-07-10-26766869.jpg-o" alt=""><br>晨曦微茫的小岛上，海水轻柔俯视着纤尘不染的沙滩。伴随着浪花的涌动，浮游生物、海藻、海螺、扇贝等海洋生命搁浅在陆地之上，等待它们的则是饥肠辘辘的捕食者。矶鹬（sandpiper）三五成群，鸣叫着落在了湿漉漉的沙滩上，啄食着可口的扇贝。许是经过了多年的历练，每当新一波潮水涌过来时，它们便第一时间轻盈地躲开，绝不会沾湿半根羽毛。不远处的灌木丛里，一只破壳未久的小矶鹬窥伺着父母的一举一动。少顷，妈妈飞回巢穴，小家伙一如既往张开嘴巴等着喂食，不过妈妈似乎决意要让孩子独立，自顾自将扇贝肉吃到肚子里。没有办法，小矶鹬只能走向海边。然而海水是那么讨厌，一波一波扑向这个未谙世事的小家伙。这时，一个意外突然发生……<br>本片为《海底总动员2》的贴片动画。</p><h2 id="36-城市之光"><a href="#36-城市之光" class="headerlink" title="36. 城市之光"></a>36. <strong><a href="https://movie.douban.com/subject/1293908/" target="_blank" rel="noopener">城市之光</a></strong></h2><p><img src="http://corningsun.qiniudn.com/blog/2018-07-10-1293908.jpg-o" alt=""><br>他是一个流浪汉（查理·卓别林 Charles Chaplin 饰），身无分文，遇上了双目失明的卖花女，却不忍袖手旁观。他想尽办法去凑够费用，供卖花女治病。一天，他搭救了一个富翁，富翁当晚和他称兄道弟，第二天却翻脸不认人。本来打算向他求助的主意行不通了。流浪汉去参加拳击比 赛，以图获得奖金，却输得一败涂地。谁知这时重遇富翁，二人不计前嫌，富翁答应出钱资助卖花女。在交给流浪汉1000元后，富翁遭到偷袭，身上剩下的钱被强盗抢走。流浪汉奋不顾身去追赶，却因为误会被警察押回警局坐牢。另一方面，流浪女凭借流浪汉的资助重获光明，开了一家体面的花店。</p><h2 id="37-福音战士新剧场版：破"><a href="#37-福音战士新剧场版：破" class="headerlink" title="37. 福音战士新剧场版：破"></a>37. <strong><a href="https://movie.douban.com/subject/2567646/" target="_blank" rel="noopener">福音战士新剧场版：破</a></strong></h2><p><img src="http://corningsun.qiniudn.com/blog/2018-07-10-2567646.jpg-o" alt=""><br>在参拜母亲坟墓的回程途中，真嗣（绪方惠美 配音）和葛城美里（三石琴乃 配音）遭遇了第七使徒的攻击，关键时刻2号机势如破竹挫败对手，真嗣也由此结识了2号机的操纵者式波·明日香·兰格蕾（宫村优子 配音）。与沉默寡言的绫波丽（林原惠美 配音）不同，明日香自信张扬，甚至有些自大，在和真嗣相处的日子里，彼此闹出不少的笑话。他们三人分别驾驶着零号机、初号机和2号机，抵抗了第八使徒猛烈的攻击，在这一过程中，淡淡的情愫悄然在这三个青年男女的心中萌生。不久后，第九、十使徒相继降临，真嗣他们面临着生与死的残酷考验……<br>本片为福音战士新剧场版四部曲第二部。</p><h2 id="38-家园"><a href="#38-家园" class="headerlink" title="38. 家园"></a>38. <strong><a href="https://movie.douban.com/subject/3018123/" target="_blank" rel="noopener">家园</a></strong></h2><p><img src="http://corningsun.qiniudn.com/blog/2018-07-10-3018123.jpg-o" alt=""><br>经过四十亿年的漫长演变，地球变成一个物种繁多、资源丰富、奇特美丽的蓝色星球。然而自人类出现以来，我们只用了二十万年的时间，便将地球的宝贵资源消耗殆尽。珍稀物种灭绝，原始资源奇缺，污染日益严重，人类以及地球的明天将何去何从？<br>导演扬恩•亚瑟经过15年的筹备，历访50多个国家拍成此片。本片素材长达488小时，拍摄周期为21个月，共动用88,000名员工，从澳洲海底的大堡礁到非洲肯亚高原的乞力马扎罗山；从亚玛逊热带雨林到戈壁沙漠；从美国德萨斯州连绵不断的棉花田到中国上海、深圳的工业城镇。影片以上帝的俯瞰视角向世人展现地球的绝美以及日趋危急的现状。明天并不遥远，但我们该选择怎样的未来？</p><h2 id="39-唐顿庄园：2011圣诞特别篇"><a href="#39-唐顿庄园：2011圣诞特别篇" class="headerlink" title="39. 唐顿庄园：2011圣诞特别篇"></a>39. <strong><a href="https://movie.douban.com/subject/6870362/" target="_blank" rel="noopener">唐顿庄园：2011圣诞特别篇</a></strong></h2><p><img src="http://corningsun.qiniudn.com/blog/2018-07-10-6870362.jpg-o" alt=""><br>处在贝茨先生（布兰登•柯伊尔 Brendan Coyle 饰）受审一事阴霾中的唐顿庄园迎来了1919年的圣诞节。战争虽已过去，但影响仍在持续。房屋能被装饰一新，但唐顿人的心情却仍无法放晴。大小姐玛丽（米歇尔•道克瑞 Michelle Dockery 饰）觉得和理查德的婚姻不会幸福，但仍然决定继续；马修（丹•史蒂文斯 Dan Stevens 饰）仍对拉维尼娅的死感到愧疚；老爷（休•博内威利 Hugh Bonneville 饰）得知了玛丽不得不嫁给理查德的原因。尽管烦恼的事不断，但仍有好事传来。茜玻（杰西卡•布朗-芬德利 Jessica Brown-Findlay 饰）写信来告知了自己怀孕一事；被宣判死刑的贝茨因为证据不足改为了无期徒刑。新年晚会在贝茨的好消息中如期举行。新的一年即将来临，一切都在变化中，包括马修和玛丽的关系……<br>第三季将于2012年9月16日于当地时间首播。</p><h2 id="40-生活多美好"><a href="#40-生活多美好" class="headerlink" title="40. 生活多美好"></a>40. <strong><a href="https://movie.douban.com/subject/1293749/" target="_blank" rel="noopener">生活多美好</a></strong></h2><p><img src="http://corningsun.qiniudn.com/blog/2018-07-10-1293749.jpg-o" alt=""><br>乔治（詹姆斯•斯图尔特 James Stewart 饰）在圣诞节前准备自杀，这时上帝传来旨意，派天使拯救他，并让他了解到自己一生的使命——拯救那些不幸的人。乔治小时候左耳有疾，在贝德福德镇上的一家药店帮工。他很机灵，深得老板器重，同时也很招女孩喜欢。某日，老板接到爱子死亡的电报，悲痛欲绝，配错了药，幸亏乔治才化险为夷。乔治从小嫉恶如仇，尤其看不惯富人专横跋扈。长大后，乔治一表人材，准备去读大学。这时，他的父亲去世了，他子承父业，协助叔父料理公司事务。然而公司经营状况不佳，在董事会会议上面临破产。如果公司破产，小镇将会有很多家庭陷入困境。乔治力排众议，说服了董事会，但是条件是他要担任董事会秘书长。这与他的大学梦相去甚远。而且，此时他还陷入了对一个女孩的爱恋之中……</p><h2 id="41-洞"><a href="#41-洞" class="headerlink" title="41. 洞"></a>41. <strong><a href="https://movie.douban.com/subject/1424334/" target="_blank" rel="noopener">洞</a></strong></h2><p><img src="http://corningsun.qiniudn.com/blog/2018-07-10-1424334.jpg-o" alt=""><br>1947年，法国康复监狱。在押犯克劳德（马克·米歇尔 Marc Michel饰）刚搬入11号牢房时，受到其他四位狱友的排挤，谨慎小心的马努（菲利普·雷罗伊 Philippe Leroy饰）、狡猾奸诈的罗蓝德（吉恩·克劳迪 Jean Keraudy饰）、凶悍强壮的吉奥（迈克尔·康斯坦丁 Michel Constantin饰）和心机深重的“阁下”（雷蒙德·缪涅尔 Raymond Meunier饰）。很快，彬彬有礼的克劳德获得了四人的认可与接纳，并让他加入到正在精心谋划的一场惊心动魄的越狱行动中。五人准备掘地三尺挖个地洞逃出去，然而此时克劳德却得到了获得自由的好消息。<br>由法国犯罪片大师雅克·贝克执导的经典越狱片《洞》，堪称电影史上关于越狱题材最伟大的影片。这部雅克·贝克生前的最后一部作品，入围1960年第13届戛纳电影节金棕榈奖、荣获法国电影评论协会最佳影片奖、英国电影学院奖最佳外语片和最佳外国男演员提名、法国《电影手册》十大佳片之一等多项殊荣。</p><h2 id="42-新世纪福音战士剧场版：死与新生"><a href="#42-新世纪福音战士剧场版：死与新生" class="headerlink" title="42. 新世纪福音战士剧场版：死与新生"></a>42. <strong><a href="https://movie.douban.com/subject/1455442/" target="_blank" rel="noopener">新世纪福音战士剧场版：死与新生</a></strong></h2><p><img src="http://corningsun.qiniudn.com/blog/2018-07-10-1455442.jpg-o" alt=""><br>《新世纪福音战士》电影版第1部。分为“DEATH篇（死亡篇）”与“REBIRTH篇（新生篇）”两个部分。“死亡篇”以原TV版动画第1集到第24集的内容为基础，重新剪辑了一个总结篇。“新生篇”内容承接第24集内容：<br>第十七使徒被消灭后，SEELE向NERV下达命令，要EVA初号机负责执行“人类补完计划”。然而碇元度不认同SEELE的做法，拒绝执行。SEELE认定这是一种叛变的行为，决定把NERV彻底消灭。<br>破晓时分，NERV本部突然遭到来自战略自卫队的袭击，他们对NERV的人员进行了惨无人道的大屠杀。为了保护驾驶员，葛城美里命令把精神崩溃的明日香送上二号机，并放在湖底的深处，自已就亲自去救碇真嗣 。但此时的碇真嗣已经处在精神崩溃的边缘。</p><h2 id="43-IT狂人特别篇"><a href="#43-IT狂人特别篇" class="headerlink" title="43. IT狂人特别篇"></a>43. <strong><a href="https://movie.douban.com/subject/20453087/" target="_blank" rel="noopener">IT狂人特别篇</a></strong></h2><p><img src="http://corningsun.qiniudn.com/blog/2018-07-10-20453087.jpg-o" alt=""><br>曾卷起一股英式幽默风潮的情景喜剧《IT狂人》，在阔别观众2年多之后再度袭来！距第四季完结至今，观众们始终翘首以盼，尽管导演表示不再制作第五季，但他还是重新启动了剧集，推出了本特别篇，“还给观众一个结尾”。Moss，Roy和Jen，位于公司地下室的IT部门三狂人，这次又会遭遇怎么样的爆笑故事？<br>本特别篇依然围绕着IT部三人展开：Roy恋上了七楼一个姑娘，但是很快，他发现自己似乎有情感缺陷，恋情因此摇摇欲坠；与此同时，Moss也发现自己不够自信，在老板Douglas的建议下，他跑去女装店买了一条女式长裤。随后，一个大麻烦找上了Jen和Roy，这个飞来横祸不仅影响了他们个人，更是危及公司的声誉，Jen和Roy面临着被解雇的危险……</p><h2 id="44-三傻大闹宝莱坞"><a href="#44-三傻大闹宝莱坞" class="headerlink" title="44. 三傻大闹宝莱坞"></a>44. <strong><a href="https://movie.douban.com/subject/3793023/" target="_blank" rel="noopener">三傻大闹宝莱坞</a></strong></h2><p><img src="http://corningsun.qiniudn.com/blog/2018-07-10-3793023.jpg-o" alt=""><br>本片根据印度畅销书作家奇坦·巴哈特（Chetan Bhagat）的处女作小说《五点人》（Five Point Someone）改编而成。法兰（马德哈万 R Madhavan 饰）、拉杜（沙曼·乔希 Sharman Joshi 饰）与兰乔（阿米尔·汗 Aamir Khan 饰）是皇家工程学院的学生，三人共居一室，结为好友。在以严格著称的学院里，兰乔是个非常与众不同的学生，他不死记硬背，甚至还公然顶撞校长“病毒”（波曼·伊拉尼 Boman Irani 饰），质疑他的教学方法。他不仅鼓动法兰与拉杜去勇敢追寻理想，还劝说校长的二女儿碧雅（卡琳娜·卡普 Kareena Kapoor 饰）离开满眼铜臭的未婚夫。兰乔的特立独行引起了模范学生“消音器”（奥米·维嘉 Omi Vaidya 饰）的不满，他约定十年后再与兰乔一决高下，看哪种生活方式更能取得成功。<br>本片获孟买电影博览奖最佳影片、最佳导演、最佳配角（波曼·伊拉尼）、最佳剧本等六项大奖，并获国际印度电影协会最佳影片、最佳导演、最佳剧情、最佳摄影等十六项大奖。</p><h2 id="45-星际穿越"><a href="#45-星际穿越" class="headerlink" title="45. 星际穿越"></a>45. <strong><a href="https://movie.douban.com/subject/1889243/" target="_blank" rel="noopener">星际穿越</a></strong></h2><p><img src="http://corningsun.qiniudn.com/blog/2018-07-10-1889243.jpg-o" alt=""><br>近未来的地球黄沙遍野，小麦、秋葵等基础农作物相继因枯萎病灭绝，人类不再像从前那样仰望星空，放纵想象力和灵感的迸发，而是每日在沙尘暴的肆虐下倒数着所剩不多的光景。在家务农的前NASA宇航员库珀（马修·麦康纳 Matthew McConaughey 饰）接连在女儿墨菲（麦肯吉·弗依 Mackenzie Foy 饰）的书房发现奇怪的重力场现象，随即得知在某个未知区域内前NASA成员仍秘密进行一个拯救人类的计划。多年以前土星附近出现神秘虫洞，NASA借机将数名宇航员派遣到遥远的星系寻找适合居住的星球。在布兰德教授（迈克尔·凯恩 Michael Caine 饰）的劝说下，库珀忍痛告别了女儿，和其他三名专家教授女儿艾米莉亚·布兰德（安妮·海瑟薇 Anne Hathaway 饰）、罗米利（大卫·吉雅西 David Gyasi 饰）、多伊尔（韦斯·本特利 Wes Bentley 饰）搭乘宇宙飞船前往目前已知的最有希望的三颗星球考察。<br>他们穿越遥远的星系银河，感受了一小时七年光阴的沧海桑田，窥见了未知星球和黑洞的壮伟与神秘。在浩瀚宇宙的绝望而孤独角落，总有一份超越了时空的笃定情怀将他们紧紧相连……</p><h2 id="46-楚门的世界"><a href="#46-楚门的世界" class="headerlink" title="46. 楚门的世界"></a>46. <strong><a href="https://movie.douban.com/subject/1292064/" target="_blank" rel="noopener">楚门的世界</a></strong></h2><p><img src="http://corningsun.qiniudn.com/blog/2018-07-10-1292064.jpg-o" alt=""><br>楚门（金•凯瑞 Jim Carrey 饰）是一个平凡得不能再平凡的人，除了一些有些稀奇的经历之外——初恋女友突然失踪、溺水身亡的父亲忽然似乎又出现在眼前，他和绝大多数30多岁的美国男人绝无异样。这令他倍感失落。他也曾试过离开自己生活了多年的地方，但总因种种理由而不能成行。<br>直到有一天，他忽然发觉自己似乎一直在被人跟踪，无论他走到哪里，干什么事情。这种感觉愈来愈强烈。楚门决定不惜一切代价逃离这个他生活了30多年的地方，去寻找他的初恋女友。<br>但他却发现自己怎样也逃不出去。真相其实很残忍。</p><h2 id="47-龙猫"><a href="#47-龙猫" class="headerlink" title="47. 龙猫"></a>47. <strong><a href="https://movie.douban.com/subject/1291560/" target="_blank" rel="noopener">龙猫</a></strong></h2><p><img src="http://corningsun.qiniudn.com/blog/2018-07-10-1291560.jpg-o" alt=""><br>小月的母亲生病住院了，父亲带着她与四岁的妹妹小梅到乡间的居住。她们对那里的环境都感到十分新奇，也发现了很多有趣的事情。她们遇到了很多小精灵，她们来到属于她们的环境中，看到了她们世界中很多的奇怪事物，更与一只大大胖胖的龙猫成为了朋友。龙猫与小精灵们利用他们的神奇力量，为小月与妹妹带来了很多神奇的景观，令她们大开眼界。<br>妹妹小梅常常挂念生病中的母亲，嚷着要姐姐带着她去看母亲，但小月拒绝了。小梅竟然自己前往，不料途中迷路了，小月只好寻找她的龙猫及小精灵朋友们帮助。</p><h2 id="48-摔跤吧！爸爸"><a href="#48-摔跤吧！爸爸" class="headerlink" title="48. 摔跤吧！爸爸"></a>48. <strong><a href="https://movie.douban.com/subject/26387939/" target="_blank" rel="noopener">摔跤吧！爸爸</a></strong></h2><p><img src="http://corningsun.qiniudn.com/blog/2018-07-10-26387939.jpg-o" alt=""><br>马哈维亚（阿米尔·汗 Aamir Khan 饰）曾经是一名前途无量的摔跤运动员，在放弃了职业生涯后，他最大的遗憾就是没有能够替国家赢得金牌。马哈维亚将这份希望寄托在了尚未出生的儿子身上，哪知道妻子接连给他生了两个女儿，取名吉塔（法缇玛·萨那·纱卡 Fatima Sana Shaikh 饰）和巴比塔（桑亚·玛荷塔 Sanya Malhotra 饰）。让马哈维亚没有想到的是，两个姑娘展现出了杰出的摔跤天赋，让他幡然醒悟，就算是女孩，也能够昂首挺胸的站在比赛场上，为了国家和她们自己赢得荣誉。<br>就这样，在马哈维亚的指导下，吉塔和巴比塔开始了艰苦的训练，两人进步神速，很快就因为在比赛中连连获胜而成为了当地的名人。为了获得更多的机会，吉塔进入了国家体育学院学习，在那里，她将面对更大的诱惑和更多的选择。</p><h2 id="49-触不可及"><a href="#49-触不可及" class="headerlink" title="49. 触不可及"></a>49. <strong><a href="https://movie.douban.com/subject/6786002/" target="_blank" rel="noopener">触不可及</a></strong></h2><p><img src="http://corningsun.qiniudn.com/blog/2018-07-10-6786002.jpg-o" alt=""><br>因为一次跳伞事故，白人富翁菲利普Philippe（弗朗索瓦·克鲁塞 François Cluzet 饰）瘫痪在床，欲招聘一名全职陪护。由于薪酬高，应聘者云集，个个舌灿莲花，却无法打动他的心。直到黑人德希斯Driss（奥玛·赛 Omar Sy 饰）的出现才让他作出决定。德希斯刚从监狱出来，背负家庭重担，一心只想寻张辞退信以申领救济金，而且他明显对女助理的兴趣要远大于这份工作。但是菲利普还是一眼相中了这个小伙子。于是，德希斯开始了一个月的试用期。虽然舒适的豪宅环境让他倍感虚荣，但是他仍面临很多挑战：不仅要为菲利普作身体复健，还得给他洗浴、灌肠、拆信、穿丝袜等。起初，两人的思维方式与价值观大相径庭，但是，随着了解的不断深入，他们成为了朋友……<br>本片取材于真实事件，获2011年东京电影节最佳影片金麒麟奖，弗朗索瓦·克鲁塞与奥玛·赛分享影帝桂冠。</p><h2 id="50-天堂电影院"><a href="#50-天堂电影院" class="headerlink" title="50. 天堂电影院"></a>50. <strong><a href="https://movie.douban.com/subject/1291828/" target="_blank" rel="noopener">天堂电影院</a></strong></h2><p><img src="http://corningsun.qiniudn.com/blog/2018-07-10-1291828.jpg-o" alt=""><br>意大利南部小镇，古灵精怪的小男孩多多（萨瓦特利·卡西欧 饰）喜欢看电影，更喜欢看放映师艾佛特（菲利浦·诺瓦雷 饰）放电影，他和艾佛特成为了忘年之交，在胶片中找到了童年生活的乐趣。<br>好心的艾佛特为了让更多的观众看到电影，搞了一次露天电影，结果胶片着火了，多多把艾弗达从火海 中救了出来，但艾弗达双目失明。多多成了小镇唯一会放电影的人，他接替艾佛特成了小镇的电影放映师。<br>多多（马克·莱昂纳蒂 饰）渐渐长大，他爱上了银行家的女儿艾莲娜（阿格妮丝·那诺 Agnese Nano 饰）。初恋的纯洁情愫美如天堂，但是一对小情侣的海誓山盟被艾莲娜父亲的阻挠给隔断了，多多去服兵役，而艾莲娜去念大学。伤心的多多在艾佛特的鼓励下，离开小镇，追寻自己生命中的梦想……<br>30年后，艾佛特去世，此时的多多已经是功成名就的导演，他回到了家乡，看到残破的天堂电影院，追忆往昔，唏嘘不已。多多意外地遇见了艾莲娜，往日种种，真相大白，他们如何面对彼此？</p><h2 id="51-指环王3：王者无敌"><a href="#51-指环王3：王者无敌" class="headerlink" title="51. 指环王3：王者无敌"></a>51. <strong><a href="https://movie.douban.com/subject/1291552/" target="_blank" rel="noopener">指环王3：王者无敌</a></strong></h2><p><img src="http://corningsun.qiniudn.com/blog/2018-07-10-1291552.jpg-o" alt=""><br>魔幻战争逐渐进入高潮阶段。霍比特人弗拉多（伊利亚·伍德 Elijah Wood 饰）携带着魔戒，与伙伴山姆（Sean Astin 饰）以及狡猾阴暗的咕噜等前往末日山，一路上艰难险阻不断，魔君索伦为阻止魔戒被销毁用尽全力阻挠。另一方面，白袍巫师甘道夫（伊安·麦克莱恩 Ian McKellen 饰）率中土勇士们镇守刚铎首都——白城米那斯提里斯。魔兽大军压境，黑暗与光明的决战即将来临……<br>本片是“指环王三部曲”的终结篇，根据英国作家J.R.R.托尔金（J.R.R. Tolkien）同名魔幻巨著《指环王》（The Lord of the Rings）改编，并荣获2004年第76届奥斯卡最佳影片、最佳导演、最佳改编剧本、最佳剪辑、最佳艺术指导、最佳服装设计、最佳化妆、最佳视觉效果、最佳音效、最佳配乐和最佳歌曲等11项大奖。</p><h2 id="52-活着"><a href="#52-活着" class="headerlink" title="52. 活着"></a>52. <strong><a href="https://movie.douban.com/subject/1292365/" target="_blank" rel="noopener">活着</a></strong></h2><p><img src="http://corningsun.qiniudn.com/blog/2018-07-10-1292365.jpg-o" alt=""><br>根据余华同名小说改编。<br>富少福贵（葛优）嗜赌成性，妻子家珍（巩俐）屡劝无果后带着女儿凤霞离开了他，当夜，福贵输光所有家产气死父亲，被迫靠变卖母亲首饰租间破屋过活。一年后，家珍手拉凤霞怀抱刚出世的儿子有庆回到家中，福贵痛改前非，开始靠演皮影戏过起安份守己的日子。<br>但好景不常，内战时期，福贵被国民党抓去当劳工，一番辗转终回到家乡与一家人团圆后，凤霞因病变成哑巴，而在后来的大跃进运动和文化大革命中，他虽获某些小福，逆境却也一直与他如影相随。</p><h2 id="53-窃听风暴"><a href="#53-窃听风暴" class="headerlink" title="53. 窃听风暴"></a>53. <strong><a href="https://movie.douban.com/subject/1900841/" target="_blank" rel="noopener">窃听风暴</a></strong></h2><p><img src="http://corningsun.qiniudn.com/blog/2018-07-10-1900841.jpg-o" alt=""><br>1984年的东德，整个社会笼罩在国家安全局的高压统治之下，特工魏斯曼（乌尔利希·穆厄 饰）奉命监听剧作家德莱曼（塞巴斯蒂安·寇治 饰）及其女友演员克里斯蒂娜（玛蒂娜·杰蒂克 饰）的生活，监听过程中，魏斯曼渐渐对这家人的生活产生了兴趣，开始暗中帮助他们。一篇刊登在西德《明 镜》报上的文章引起了特工头目的注意，他们认为这篇文章是德莱曼写的，并逮捕了克里斯蒂娜，希望能够从她口中得出她丈夫的秘密？而审问克里斯蒂娜的正是魏斯曼……</p><h2 id="54-辩护人"><a href="#54-辩护人" class="headerlink" title="54. 辩护人"></a>54. <strong><a href="https://movie.douban.com/subject/21937445/" target="_blank" rel="noopener">辩护人</a></strong></h2><p><img src="http://corningsun.qiniudn.com/blog/2018-07-10-21937445.jpg-o" alt=""><br>1978年，只有高中学历的宋佑硕（宋康昊 饰）通过多年的艰苦努力，终于通过司法考试，并在成为法官后很快转行成为一名律师。他敏锐地从最新政策中嗅到商机，以不动产代书业务起家。虽然被同行讥讽为随时随地派发名片的夜店小弟，但佑硕不以为忤，一步一步朝着心中的目标迈进。他依靠赚来的钱让妻儿过上富足的生活，也还了七年前在饭店大婶那里欠下的良心债。进入20世纪80年代，韩国民主化斗争愈演愈烈。佑硕全然不管窗外事，关起门来继续赚钱。然而社会的巨变已经不容他置身事外，饭店大婶的儿子朴镇宇因从属的釜山读书联合会被控为左翼社团而遭到逮捕，更受到残酷的虐待和不公的指控。<br>虽然爱钱却更重感情的佑硕，就这样走上了为民主辩护的道路……</p><h2 id="55-教父2"><a href="#55-教父2" class="headerlink" title="55. 教父2"></a>55. <strong><a href="https://movie.douban.com/subject/1299131/" target="_blank" rel="noopener">教父2</a></strong></h2><p><img src="http://corningsun.qiniudn.com/blog/2018-07-10-1299131.jpg-o" alt=""><br>影片主要讲述第二代教父麦克·柯里昂（阿尔·帕西诺 饰）的奋斗历程，同时回忆了第一代教父维多·柯里昂（罗伯特·德尼罗 饰）创业的艰辛，反映了不同历史时期，两代教父的事业、家庭生活。<br>麦克为儿子托尼举行圣餐仪式和庆祝活动的当夜，麦克在家中遭到袭击，凶手被人灭口，面临接管家族事业以来的重重危机，麦克回忆起了父亲维多·柯里昂年轻时在美国的创业历程。<br>麦克一边调查袭击的真相，一边继续开展赌博、酒店等生意，和另一个黑帮人物海门罗斯斗智斗勇，不断扩大势力。<br>终于，麦克的不法行为引起了政府的关注，麦克受到一系列的指控；同时，麦克的家庭也遇到了危机，夫妻感情濒临破裂；而最让麦克痛心的，却是家族中，亲人的背叛。和第一代教父其乐融融的家庭生活比起来，麦克无疑很失败。<br>麦克怎么样面对事业、家庭的双重危机？为什么两代教父会有截然不同的家庭生活？让我们自己在影片中寻找答案。</p><h2 id="56-素媛"><a href="#56-素媛" class="headerlink" title="56. 素媛"></a>56. <strong><a href="https://movie.douban.com/subject/21937452/" target="_blank" rel="noopener">素媛</a></strong></h2><p><img src="http://corningsun.qiniudn.com/blog/2018-07-10-21937452.jpg-o" alt=""><br>她（李来 饰）是一个美丽平凡的小女孩，和爸爸妈妈生活在位于街角的家中。家里经营着以她的名字素媛命名的杂货店，母亲（严智媛 饰）作为老板娘日夜忙碌不得闲暇，父亲则在工厂干着繁重的工作。在那个飘雨的早上，素媛打着雨伞独自上学。在离学校近在咫尺的地方，她遭遇一个相貌猥琐、酒气冲天的大叔，由此开启了她的悲剧之旅。柔嫩的小花遭到暴风雨无情摧残，受伤的岂止枝枝叶叶，更是那迎着阳光无忧成长的心。无良媒体铺天盖地大肆渲染，作为受害者的素媛一家仿佛成了周身污秽的耻辱之人，被四周诧异好奇的目光所包围。<br>妈妈悲痛欲绝，几近崩溃。爸爸全力保护女儿，但受伤的小天使却拒绝爸爸的靠近。问凶之路伴随着天使的治愈旅程，美丽的女孩可会再露灿烂笑容？</p><h2 id="57-美国往事"><a href="#57-美国往事" class="headerlink" title="57. 美国往事"></a>57. <strong><a href="https://movie.douban.com/subject/1292262/" target="_blank" rel="noopener">美国往事</a></strong></h2><p><img src="http://corningsun.qiniudn.com/blog/2018-07-10-1292262.jpg-o" alt=""><br>二十年代的美国，纽约少年“面条”（罗伯特•德尼罗 饰）和几个同龄朋友一起认识了聪明狡黠的“麦大”（詹姆斯 • 伍兹 饰），他们开始从事走私活动。不久，面条在一场械斗中杀伤人命，被关进监牢。<br>若干年后，“面条”出狱，当时的小伙伴们已经变成了健壮的青年人，在“麦大”的带领下，他们开始了一系列抢劫、盗窃、敲诈活动。随着犯罪活动的不断深入，“麦大”似乎被胜利冲昏了头脑，竟然把美国联邦储备银行也列入了行动目标。“面条”不忍眼看好友走向毁灭，偷偷打电话报警，想逼迫“麦大”收手。警察与“面条”的朋友展开激烈枪战，“麦大”等人全部被杀。“面条”带着深深的悔恨和痛苦，离开纽约，回到年少时生长的地方。<br>三十五年过去了，几近垂暮的“面条”重新回到纽约的伤心地，他遇见了少时的朋友和旧情人，而当年“麦大”他们的死，背后竟然包含着出乎意料的阴谋。</p><h2 id="58-黑镜：圣诞特别篇"><a href="#58-黑镜：圣诞特别篇" class="headerlink" title="58. 黑镜：圣诞特别篇"></a>58. <strong><a href="https://movie.douban.com/subject/25964630/" target="_blank" rel="noopener">黑镜：圣诞特别篇</a></strong></h2><p><img src="http://corningsun.qiniudn.com/blog/2018-07-10-25964630.jpg-o" alt=""><br>圣诞节将至，一间地处偏远的小木屋里，波特（拉菲·斯波 Rafe Spall 饰）和马特（乔恩·哈姆 Jon Hamm 饰）同坐一桌，用红酒和烤土豆庆祝这个银装素裹的节日。波特沉默寡言，无精打采，而马特却恰恰相反，为了逗波特讲话，他向波特讲述了自己的过去。<br>曾经的马特是一名“恋爱导师”，他通过摄像头和网络“远程操控”他的客户，让这些平日里无人问津的“宅男”们能够在派对山成功抱得美人归。然而，一场意外让马特决定永远离开这个他经营得风生水起的行当，此间究竟发生了什么？听了马特的叙述，波特终于决定向马特讲述自己的故事，这个故事关乎于他和他的女友，但并不完全关乎于爱情。</p><h2 id="59-雇佣人生"><a href="#59-雇佣人生" class="headerlink" title="59. 雇佣人生"></a>59. <strong><a href="https://movie.douban.com/subject/3823425/" target="_blank" rel="noopener">雇佣人生</a></strong></h2><p><img src="http://corningsun.qiniudn.com/blog/2018-07-10-3823425.jpg-o" alt=""><br>清晨七点一刻，闹钟大作，秃头的中年男人极不情愿地按掉闹铃，颇显疲惫地起身洗漱。他的房间颇为奇怪，无论是地灯、梳妆台、餐桌、椅子还是衣架，都由人来担任。这些人面无表情，兢兢业业地做好自己的事情。男子穿好衣服出门，并雇了一个人力出租车赶赴单位。在这个神奇的世界，所有的工具都有人来完成，他们毫无怨言，组成了这个冷酷的世界重要的一部分……<br>本片荣获2009年ANIMA-科多巴国际动画电影节评委会大奖、2009年安纳西国际动画节电影节国际影评人费比西奖、2009年利尔达拉美电影节最佳短片奖。</p><h2 id="60-迁徙的鸟"><a href="#60-迁徙的鸟" class="headerlink" title="60. 迁徙的鸟"></a>60. <strong><a href="https://movie.douban.com/subject/1292281/" target="_blank" rel="noopener">迁徙的鸟</a></strong></h2><p><img src="http://corningsun.qiniudn.com/blog/2018-07-10-1292281.jpg-o" alt=""><br>当鸟儿用羽翼去实现梦想，翱翔在我们永远无法凭借自身企及的天空，人类又该赋予他们怎样的赞叹呢？<br>“鸟的迁徙是一个关于承诺的故事，一种对于回归的承诺。”雅克·贝汉以这样一句话带我们踏上了鸟与梦飞行之旅。毫无疑问，[迁徙的鸟]直接界定了世界顶级纪录片“获取真实”的标准——前后共600多人参与拍摄，历时3年多、耗资4000多万美元，景地遍及全球50多个国家和地区，记录胶片长达460多公里。这部动用了17个世界上最优秀的飞行员和两个科学考察队的电影甫一出世，就引起轰动。短短三个星期内就有250多万法国人为它走进影院，飞越1200公里的大天鹅对生命的坚持，在漫天风沙中追寻出路的沙丘鹤、在冰天雪地下与海鸦对抗到底的企鹅……尽管当中也有失败气馁，也有悬崖边的木头木脑，也有来自人类贪欲的窥视。<br>除了简单的说明，整部影片不再有言语。本片的主角是憨态可掬，形态各异的鸟。他们带我们飞过大海，飞过雪原，飞过高山；他们用振动的羽翼向我们诠释飞翔，诠释执着，诠释温情，诠释生命。</p><h2 id="61-黄金三镖客"><a href="#61-黄金三镖客" class="headerlink" title="61. 黄金三镖客"></a>61. <strong><a href="https://movie.douban.com/subject/1401118/" target="_blank" rel="noopener">黄金三镖客</a></strong></h2><p><img src="http://corningsun.qiniudn.com/blog/2018-07-10-1401118.jpg-o" alt=""><br>故事发生在美国南北战争时期。图科（埃里•瓦拉赫 Eli Wallach 饰）是一个图财害命的江洋大盗，因此他被镇上悬赏通缉。布兰迪（克林特•伊斯特伍德 Clint Eastwood  饰）是一个除暴安良的牛仔，他无意中抓住了图科，但嫌赏金不够又掳走了他。在荒漠中，布兰迪惩罚图科让其自生自灭。但是诡诈的图科居然逃过了一劫，并纠集一些帮凶在客栈捉住了布兰迪。正当图科以牙还牙折磨布兰迪的时候，他劫持了一个名叫卡森的士兵。后者临死前留下了宝藏的秘密，图科和布兰迪分别获得了一半信息。与此同时，一个狡猾的杀手桑坦萨（李•范•克里夫 Lee Van Cleef 饰）也通过其他渠道发现了宝藏的秘密。于是，在寻宝的道路上，三个人使出浑身解数，上演了一场场对决的好戏……</p><h2 id="62-寻找小糖人"><a href="#62-寻找小糖人" class="headerlink" title="62. 寻找小糖人"></a>62. <strong><a href="https://movie.douban.com/subject/7015798/" target="_blank" rel="noopener">寻找小糖人</a></strong></h2><p><img src="http://corningsun.qiniudn.com/blog/2018-07-10-7015798.jpg-o" alt=""><br>罗德里格斯在上世纪70年代发行过两张专辑《Cold Fact》与《Coming From Reality》，在南非有超过50万的销量且知名度可与滚石乐队相提并论。但与其他知名的美国歌手不同，南非的歌迷得不到任何一点关于罗德里格斯的信息，除了专辑歌曲之外唯一能了解的只有专 辑封面上一张并不清晰的相片。两张专辑后，他好像也就此销声匿迹。<br>对于在南非的辉煌成绩，罗德里格斯其实并不知情，他在美国过着截然不同的生活，没有知名度，专辑销量不佳，被唱片公司抛弃，曾经一度做着装修屋顶的体力活…… 南非开普敦一家唱片店老板斯蒂芬与音乐记者克雷格听到罗德里格斯在舞台上奇特自杀的传闻后展开调查，寻找小糖人之路就此开始，一段神秘的传奇故事就此展开……</p><h2 id="63-福音战士新剧场版：序"><a href="#63-福音战士新剧场版：序" class="headerlink" title="63. 福音战士新剧场版：序"></a>63. <strong><a href="https://movie.douban.com/subject/1968790/" target="_blank" rel="noopener">福音战士新剧场版：序</a></strong></h2><p><img src="http://corningsun.qiniudn.com/blog/2018-07-10-1968790.jpg-o" alt=""><br>突袭世界的大灾难“第二次冲击”后，世界在废墟之上重建。14岁的少年碇真嗣被父亲碇元渡叫到第3新东京市。本以为能见到父亲迎接的他，却见到名为“使徒”的巨大生物与军队交火。危急之下，特务机关NERV的葛成美里将真嗣救下，并将其带往碇元渡所统领的NERV总部。但迎接真嗣的，却是是父亲冷酷地命令：驾驶称为“EVA”的巨大人型机器人与使徒战斗。<br>本已表示拒绝的真嗣，看到重伤的替补驾驶员绫波丽后，决定遵从父亲的命令。就这样，从未受过作战训练的真嗣，准备驾驶EVA初号机迎战使徒。<br>世界的命运托付在了一位年仅14岁的少年身上，而“第二次冲击”所隐藏的“人类补完计划”似乎也开始了行动。掌握一切答案的碇元渡，却只是不动生色地观察，仿佛一切早已写入剧本。</p><h2 id="64-最完美的离婚-2014特别篇"><a href="#64-最完美的离婚-2014特别篇" class="headerlink" title="64. 最完美的离婚 2014特别篇"></a>64. <strong><a href="https://movie.douban.com/subject/25790749/" target="_blank" rel="noopener">最完美的离婚 2014特别篇</a></strong></h2><p><img src="http://corningsun.qiniudn.com/blog/2018-07-10-25790749.jpg-o" alt=""><br>纷纷扰扰的一年过去，滨崎光生（瑛太 饰）和星野结夏（尾野真千子 饰）这对孽缘鸳鸯终于决定重新走入婚姻殿堂。只不过在孩子的问题上，两人再度发生分歧，结夏愤而离家出走。另一边的上原家，新生命的到来增添了几多温馨。谁知谅（绫野刚 饰）偶然邂逅当初和他一同私奔的潮见薰（臼田麻美 饰），平静的内心再起波澜。全心全意照顾女儿的灯里（真木阳子 饰）敏锐察觉到丈夫的变化，她不禁为这样的爱情和婚姻深感懊恼。结夏打算随同爱慕自己的便当店老板黑部三德去北海道，正和薰谈判的灯里目击这一幕，连忙告知光生。<br>疾驰的列车上，三对男女面面相觑，他们的爱、婚姻和心，都需要得到一个答案……</p><h2 id="65-哈利·波特系列的50个精彩瞬间"><a href="#65-哈利·波特系列的50个精彩瞬间" class="headerlink" title="65. 哈利·波特系列的50个精彩瞬间"></a>65. <strong><a href="https://movie.douban.com/subject/6758119/" target="_blank" rel="noopener">哈利·波特系列的50个精彩瞬间</a></strong></h2><p><img src="http://corningsun.qiniudn.com/blog/2018-07-10-6758119.jpg-o" alt=""><br>2011年的夏天，《哈利·波特与死亡圣器（下）》在全球上演，这盛大的历史时刻同时宣布了长达10年的哈利·波特电影系列的终结。从此一个时代一去不复返，留在人们心间的确实久久无法忘怀的复杂回忆。在终结篇上映两周后，英国ITV电视台推出了纪录片《哈利·波特经典50幕》，遴选了该系列（前7部电影）50个最为精彩、令人难忘的场景，其中包括飞行汽车、列车上的摄魂怪、猫头鹰送信、三兄弟传说、波特的初吻等镜头，更有J·K·罗琳、丹尼尔·雷德克里夫、艾玛·沃森、鲁伯特·格林特、詹森·艾萨克等小说和电影的主创人员讲述影片拍摄背后的故事。<br>这便是哈利·波特——那个陪伴许多孩子一起长大的男孩——送给影迷最后的礼物。</p><h2 id="66-地下"><a href="#66-地下" class="headerlink" title="66. 地下"></a>66. <strong><a href="https://movie.douban.com/subject/1292206/" target="_blank" rel="noopener">地下</a></strong></h2><p><img src="http://corningsun.qiniudn.com/blog/2018-07-10-1292206.jpg-o" alt=""><br>影片通过三位主人公——知识分子和投机商马高、他的朋友黑仔、他们共同的爱人娜塔莉——传奇般的人生展现了导演对南斯拉夫这个民族的理解与复杂情感。<br>影片虽然长达两个半小时，却一点不让人感到冗长，全片充满了奇思异想，有着浓厚的超现实主义色彩，是一部名副其实的史诗片。电影情节虽然有些荒诞不经，但却准确地描绘了二战时期南斯拉夫的社会状况，大胆揭露了一些投机的战争英雄英勇事迹背后不为人知的真相。影片的基调是幽默和讽刺的，又十分活泼轻松，很欢快，甚至可以把影片当作喜剧来看。影片人物个性十分奔放，张扬，该片处处洋溢着创作者的激情。导演埃米尔·库斯图里卡处理史诗题材的天才手段展露无疑，由于该片深刻的讽喻，不少影评家将该片与俄国1995年的《毒太阳》相提并论。埃米尔·库斯图里卡本人也获得了当年威尼斯电影节的最佳导演奖。</p><h2 id="67-天地玄黄"><a href="#67-天地玄黄" class="headerlink" title="67. 天地玄黄"></a>67. <strong><a href="https://movie.douban.com/subject/1300551/" target="_blank" rel="noopener">天地玄黄</a></strong></h2><p><img src="http://corningsun.qiniudn.com/blog/2018-07-10-1300551.jpg-o" alt=""><br>我们是谁？从哪里来？又将归往何处？这些问题和我们的生存息息相关，但却很少有人能够给出准确的答案。历时14个月，穿越24个国家，导演罗恩·弗里克（Ron Fricke）用镜头向我们展示了大自然能够拥有的最壮阔最绚丽的景致——从远古到现在，从猿猴到人类，从荒无人烟的沙漠到震撼人心的宗教活动现场，从广袤天地带来的感动到婴孩单纯的笑脸给予的幸福，我们会发现，很多时候，我们并不能意识到，这美好的一切正时时刻刻的发生在我们身边。<br>全片没有台词，片名Baraka在古伊斯兰语中代表祝福，这也是导演拍摄此片的初衷，祝福与我们共同存在在这颗蔚蓝地球上的一切。</p><h2 id="68-微观世界"><a href="#68-微观世界" class="headerlink" title="68. 微观世界"></a>68. <strong><a href="https://movie.douban.com/subject/1292285/" target="_blank" rel="noopener">微观世界</a></strong></h2><p><img src="http://corningsun.qiniudn.com/blog/2018-07-10-1292285.jpg-o" alt=""><br>高楼大厦见识过了，导演用不凡的拍摄技巧引领我们进入了昆虫的世界。出乎意料，在这里，平时令人“恐怖”的虫子门展现出了另一种不一样的美。当你近距离仔细察看这个世界时，你会发现原来毛毛虫的毛原来这么光滑；相互依偎的蜗牛温馨得赚人眼泪；勤奋的屎壳郎每天都在认真对付着他们的粪球；蜘蛛会在水下用一个小气泡作为自己的餐厅；天牛就像公牛一样在互相较劲。每只虫子原来都不曾闲着浪费光阴。<br>微观下的虫子世界，带给观众的除了视觉的震撼，还有自然界无法向人类诉说的道理。</p><h2 id="69-银魂剧场版：新译红樱篇"><a href="#69-银魂剧场版：新译红樱篇" class="headerlink" title="69. 银魂剧场版：新译红樱篇"></a>69. <strong><a href="https://movie.douban.com/subject/4122194/" target="_blank" rel="noopener">银魂剧场版：新译红樱篇</a></strong></h2><p><img src="http://corningsun.qiniudn.com/blog/2018-07-10-4122194.jpg-o" alt=""><br>故事发生在日本的江户时代，一名神秘的男子出现在了武士桂小太郎（石田彰 配音）的面前，他手握妖刀“红樱”，要求试刀，这个夜晚之后，桂便下落不明。桂的宠物伊丽莎白（高松信司 配音）找到万事屋的神乐（钉宫理惠 配音）和新八（坂口大助 配音），委托他们寻找主人的下落。同时，银时（杉田智和）也受到委托，寻找四处作恶的红樱的下落。三人的线索汇聚到了一艘空中飞艇上，由于远离警察的管辖范围，飞艇里的恶势力一手遮天。在那里，银时遇见了曾经的战友现在的对手高杉晋助（子安武人 配音），高杉正带领着自己的鬼兵队企图毁灭江户。一面是穷凶极恶的恐怖分子，一边是暴虐嗜血的妖刀红樱，身受重伤的银时能够平安脱险拯救江户吗？<br>此次剧场版重制了《银魂》动画中的《红樱篇》，其中，在原作中未出场的真选组也将在故事中大显身手。</p><h2 id="70-熊的故事"><a href="#70-熊的故事" class="headerlink" title="70. 熊的故事"></a>70. <strong><a href="https://movie.douban.com/subject/1300334/" target="_blank" rel="noopener">熊的故事</a></strong></h2><p><img src="http://corningsun.qiniudn.com/blog/2018-07-10-1300334.jpg-o" alt=""><br>宁静的原始森林，熊妈妈正带着自己的孩子约克寻找蜂蜜。正当母子享受这顿美餐时，灾难不期而至。熊妈妈被一块巨石砸死，约克伤心备至，不得已踏上了独自生存的艰险之路。它路遇被猎人伤害的成年灰熊，灰熊一心报复伤害它的人类，对待约克分外冷淡。但随着一段时间的相处，它和约克慢慢成为了好朋友。它们一路遭到猎人的追踪，也遇到了各种各样的险情，在这个危机重重的原始丛林中寻找属于自己的一片天地……<br>本片根据1885年发生在美国洛基山脉中人与熊之间的真实故事改编，并荣获1989年法国凯撒奖最佳导演奖、1990年Genesis奖最佳外语片奖、1990年年德国艺术院电影公会公会电影奖银奖最佳外语片、1988年法国电影学院奖。</p><h2 id="71-少年派的奇幻漂流"><a href="#71-少年派的奇幻漂流" class="headerlink" title="71. 少年派的奇幻漂流"></a>71. <strong><a href="https://movie.douban.com/subject/1929463/" target="_blank" rel="noopener">少年派的奇幻漂流</a></strong></h2><p><img src="http://corningsun.qiniudn.com/blog/2018-07-10-1929463.jpg-o" alt=""><br>故事开始于蒙特娄，也结束于蒙特娄。一名在找寻灵感的作家（拉菲·斯波 Rafe Spall 饰）无意间得知派·帕帖尔（伊尔凡·可汗 Irrfan Khan 饰）的传奇故事。派的父亲（阿迪勒·侯赛因 Adil Hussain 饰）开了一家动物园。因这样特殊的生活环境，少年派（苏拉·沙玛 Suraj Sharma 饰 ）对信仰与人的本性自有一套看法。在派17岁那一年，他的父母决定举家移民加拿大以追求更好的生活，而他也必须离开他的初恋情人。在前往加拿大的船上，他们遇见一位残忍成性的法国厨师（杰拉尔·德帕迪约 Gérard Depardieu 饰）。当天深夜在茫茫大海中，原本令派感到刺激无比的暴风雨一瞬间就成了吞噬货船的大灾难。派却奇迹般地活了下来，搭着救生船在太平洋上漂流，而且有一名最令人意想不到的同伴——理查德·帕克，一只孟加拉老虎。神奇的冒险旅程就这样意外开始了……</p><h2 id="72-无间道"><a href="#72-无间道" class="headerlink" title="72. 无间道"></a>72. <strong><a href="https://movie.douban.com/subject/1307914/" target="_blank" rel="noopener">无间道</a></strong></h2><p><img src="http://corningsun.qiniudn.com/blog/2018-07-10-1307914.jpg-o" alt=""><br>1991年，香港黑帮三合会会员刘健明（刘德华）听从老大韩琛（曾志伟）的吩咐，加入警察部队成为黑帮卧底，韩琛许诺刘健明会帮其在七年后晋升为见习督察。1992年，警察训练学校优秀学员陈永仁（梁朝伟）被上级要求深入到三合会做卧底，终极目标是成为韩琛身边的红人。2002年，两人都不负重望，也都身背重压，刘健明渐想成为一个真正的好人，陈永仁则盼着尽快回归警察身份。<br>重案组从陈永仁手中获悉一批毒品交易情报，锁紧目标人物韩琛，没料情报被刘健明泄出，双方行动均告失败。但此事将双方均有卧底的事实暴露，引发双方高层清除内鬼的决心。命运迥异又相似的刘健明和陈永仁开始在无间道的旅程中接受严峻考验。</p><h2 id="73-天空之城"><a href="#73-天空之城" class="headerlink" title="73. 天空之城"></a>73. <strong><a href="https://movie.douban.com/subject/1291583/" target="_blank" rel="noopener">天空之城</a></strong></h2><p><img src="http://corningsun.qiniudn.com/blog/2018-07-10-1291583.jpg-o" alt=""><br>古老帝国拉比达是一座漂浮在空中的巨大的机器岛，传说那里已经无人居住，蕴藏着巨大的财富。因此，无论军方还是海盗，都在找寻着这座传说中的飞行岛。<br>矿工帕克这天偶遇拉达比继承人希达，两人一见如故。因为希达身上有找寻拉比达帝国的重要物件飞行石，军方和海盗两帮人马都在追杀希达。帕克带着希达一起逃亡，最终都没有逃出军方的手中，希达被军队掳走了。<br>为救朋友，帕克只能选择与海盗合作。帕克与海盗成功救出了希达，同时，他们也发现了军方的邪恶计划。为了阻止军方邪恶计划的实施，他们和海盗一起踏上了寻找拉比达之旅。</p><h2 id="74-蝙蝠侠：黑暗骑士"><a href="#74-蝙蝠侠：黑暗骑士" class="headerlink" title="74. 蝙蝠侠：黑暗骑士"></a>74. <strong><a href="https://movie.douban.com/subject/1851857/" target="_blank" rel="noopener">蝙蝠侠：黑暗骑士</a></strong></h2><p><img src="http://corningsun.qiniudn.com/blog/2018-07-10-1851857.jpg-o" alt=""><br>从亲眼目睹父母被人杀死的阴影中走出来的“蝙蝠侠”，经历了成长之后，已经不再是那个桀骜不的孤单英雄了。在警官吉姆·戈登和检查官哈维·登特的通力帮助下，“蝙蝠侠”无后顾之忧地继续满世界的奔波，与日益增长起来的犯罪威胁做着永无休止的争斗，而他所在的高谭市，也是进展最为明显的地方，犯罪率以一种惊人的速度持续下降着，毕竟对方是能够上天入地的“蝙蝠侠”，不借两个胆子谁还敢造次呢？不过像高谭这种科技与污秽并存的城市，平静是不可能维持太久的，果不其然，新一轮的混乱很快就席卷了整个城市，人们再一被被恐慌所笼罩着，而声称愿意为这一切负责的，自然就是所有混乱的源头以及支配者–“小丑”了。<br>先不管“小丑”掀起一个又一个犯罪的狂潮的最终目的为何，他的企图都是邪恶的，所作所为更是早就危害到了高谭市民的正常生活……其中自然包括了“蝙蝠侠”身边几个非常重要的人，而他需要做的，就是将这股新的危机全部亲自用手捏得粉碎。然而在面对着这个有史以来最具针对性、最恶毒的对手时，“蝙蝠侠”却不得不从他的地下军械库里搬出每一件能够用得上的高科技武器，还得时刻纠结着为他曾经信仰的一切寻找答案。</p><h2 id="75-飞越疯人院"><a href="#75-飞越疯人院" class="headerlink" title="75. 飞越疯人院"></a>75. <strong><a href="https://movie.douban.com/subject/1292224/" target="_blank" rel="noopener">飞越疯人院</a></strong></h2><p><img src="http://corningsun.qiniudn.com/blog/2018-07-10-1292224.jpg-o" alt=""><br>麦克墨菲（杰克·尼科尔森 Jack Nicholson 饰）为了逃避监狱里的强制劳动，装作精神异常，被送进了精神病院，他的到来，给死气沉沉的精神病院带来了剧烈的冲击。<br>麦克要求看棒球比赛的电视转播，挑战了医院严格的管理制度，受到护士长瑞秋（路易丝·弗莱彻 Louise Fletcher 饰）的百般阻挠；麦克带领病人出海捕鱼，振奋了 他们的精神，却让院方头痛不已。院方为了惩处麦克胆大妄为、屡犯院规，决定将他永远留在疯人院。生性自由的麦克再也无法忍受疯人院的生活，他联合病友，高大的印第安人“酋长”，开始自己的计划：飞越疯人院。<br>本片获1975年第48届奥斯卡最佳影片，最佳男、女主角，最佳导演和最佳改编剧本五项大奖。主人公“不自由毋宁死”的精神在当今社会仍有很大的现实意义。</p><h2 id="76-两杆大烟枪"><a href="#76-两杆大烟枪" class="headerlink" title="76. 两杆大烟枪"></a>76. <strong><a href="https://movie.douban.com/subject/1293350/" target="_blank" rel="noopener">两杆大烟枪</a></strong></h2><p><img src="http://corningsun.qiniudn.com/blog/2018-07-10-1293350.jpg-o" alt=""><br>艾迪（尼克·莫伦）思维敏捷，是个玩牌高手。在三个好友的支持下，艾迪携巨资参加了黑社会的高额赌局，不想落入圈套，欠下50万的赌债。为了还清赌债，艾迪和朋友们绞尽脑汁，最终算计到一群毒贩身上，并为打劫购买了两杆老式烟枪。<br>不想这群不安分的毒贩，正惦念着他们毒品供应商的钱，并在同一天实施了打劫。在毒贩们费劲周折，把毒品供应商熨的整整齐齐的钱款拿到手后，艾迪他们幸运的坐享其成。可是他们不知道，这看似简单的抢劫案背后，更有厉害的角色参与其中。他们手里的两杆破烟枪也隐藏着不少故事。<br>在无知与莽撞中置身漩涡的他们能侥幸脱身么？笑料迭出的偶发事件里，穿插着小人物与大人物的辛酸幽默。</p><h2 id="77-钢琴家"><a href="#77-钢琴家" class="headerlink" title="77. 钢琴家"></a>77. <strong><a href="https://movie.douban.com/subject/1296736/" target="_blank" rel="noopener">钢琴家</a></strong></h2><p><img src="http://corningsun.qiniudn.com/blog/2018-07-10-1296736.jpg-o" alt=""><br>史标曼（艾德里安•布洛迪 Adrien Brody 饰）是波兰一家电台的钢琴师。二战即将爆发之时，他们全家被迫被赶进华沙的犹太区。在战争的颠沛流离中，家人和亲戚最终被纳粹杀害，而标曼本人也受尽种种羞辱和折磨，他侥幸得到一位朋友的帮助，暂时有了藏身之处。战争愈加猛烈，朋友不得不抛下 他回老家寻得安全的住所养育儿女。此时史标曼恶病缠身，却还要在搜捕中逃亡。在废墟的阁楼上他遇见了一名德国军官，在军官的要求下他弹奏了钢琴曲。美妙的琴声令德国军官萌发了恻隐之心，他暗暗帮助标曼直到俄军对波兰的解放到来……<br>影片根据波兰钢琴家瓦拉迪斯罗•斯皮曼(Wladyslaw Szpilman)的自传体小说《死亡城市》改编。</p><h2 id="78-饮食男女"><a href="#78-饮食男女" class="headerlink" title="78. 饮食男女"></a>78. <strong><a href="https://movie.douban.com/subject/1291818/" target="_blank" rel="noopener">饮食男女</a></strong></h2><p><img src="http://corningsun.qiniudn.com/blog/2018-07-10-1291818.jpg-o" alt=""><br>台湾中国菜硕果仅存的大师老朱（郎雄）退休后，渐尝老年生活的诸多尴尬：每周日费心做出的一桌丰盛菜肴，并无将三个女儿（杨贵媚、吴倩莲、王渝文）齐齐拉到饭桌的吸引力，已经长大成人的她们，心里藏了许多比陪父亲吃饭更重要的事；多年老友的突然离世，令他在友情这块也有了缺口；而对厨师来讲最重要的味觉的丧失，则将其彻底推到人生的低谷。<br>三个女儿虽各忙各事，却也操心着老朱的晚年生活，计划着为其找个老伴，但她们没料到老朱早已悄无声息地谈起了“黄昏恋”。吃惊过后，老朱最看重的继承了他做菜天赋的二女儿家倩因为自身的生活经历，对父亲、她与父亲的关系有了新的认识，而对老朱来讲更大的惊喜，还在后面。</p><h2 id="79-狩猎"><a href="#79-狩猎" class="headerlink" title="79. 狩猎"></a>79. <strong><a href="https://movie.douban.com/subject/6985810/" target="_blank" rel="noopener">狩猎</a></strong></h2><p><img src="http://corningsun.qiniudn.com/blog/2018-07-10-6985810.jpg-o" alt=""><br>刚刚和妻子离婚的卢卡斯（麦斯·米科尔森 Mads Mikkelsen 饰）目前在一家托儿所工作，心地善良个性温和的他很快就受到了同事和孩子们的喜爱，其中，一个名叫卡拉（安妮卡·韦德科普 Annika Wedderkopp 饰）的早熟女孩对卢卡斯尤为的亲近。面对女孩幼稚 而单纯的示好，卢卡斯只能婉转的拒绝，可令他没有想到的是，这一举动将他的生活推向了风口浪尖。<br>卡拉报复性的谎言让卢卡斯背负起了性侵女童的罪名，一时间，这个好好先生成为了整个小镇排挤和压迫的对象。好友的愤怒，前妻的不信任，爱犬的死亡和陌生人的恶意让卢卡斯几近崩溃，而当小小的卡拉吐露真相之后，恶意却并没有随着卢卡斯的重获清白而划下句点。</p><h2 id="80-海洋"><a href="#80-海洋" class="headerlink" title="80. 海洋"></a>80. <strong><a href="https://movie.douban.com/subject/3443389/" target="_blank" rel="noopener">海洋</a></strong></h2><p><img src="http://corningsun.qiniudn.com/blog/2018-07-10-3443389.jpg-o" alt=""><br>《海洋》耗时五年，耗资5000万欧元，动用12个摄制组、70艘船，在全球50个拍摄地，有超过100个物种被拍摄，超过500小时的海底世界及海洋相关素材，是史上投资最大的纪录片。<br>海洋是什么？这部电影告诉你答案。这是一部以环保为主题，令人心旷神怡、叹为观止的生态学纪录片。本片聚焦于覆盖着地球表面的四分之三的“蓝色领土”。导演深入探索这个幽深而富饶的神秘世界、完整地呈现海洋的壮美辽阔。真实的动物世界的冒险远比动画片中的故事来的精彩，接下来银幕展开——巨大的水母群、露脊鲸、大白鲨、企鹅等。毫不吝啬在镜头前展示他们旺盛的生命力，让人叹为观止。</p><h2 id="81-完美的世界"><a href="#81-完美的世界" class="headerlink" title="81. 完美的世界"></a>81. <strong><a href="https://movie.douban.com/subject/1300992/" target="_blank" rel="noopener">完美的世界</a></strong></h2><p><img src="http://corningsun.qiniudn.com/blog/2018-07-10-1300992.jpg-o" alt=""><br>单亲孩子菲利普·佩里（T·J·劳瑟 T.J. Lowther 饰）的母亲对他管教甚严，8岁的小菲利普甚至从未参加过一次鬼节讨糖果的游戏。附近州监狱的两名罪犯越狱成功，劫持了菲利普作为人质，向德州边界逃窜。途中，罪犯之一的布奇（凯文·科斯特纳 Kevin Costner 饰）干掉了鲁莽愚蠢的同伙，却对小菲利普照顾有加。与此同时，德州警探瑞德（克林特·伊斯特伍德 Clint Eastwood 饰）带着手下和州长特派的犯罪专家萨利（劳拉·邓恩 Laura Dern 饰）一同火速追捕布奇。双方在德克萨斯州境内展开了一场公路赛大竞技；而小菲利普也经历了很多从未想过过的刺激与快乐，并与布奇产生了一种近似父子的不寻常感情……</p><h2 id="82-电焊工波力"><a href="#82-电焊工波力" class="headerlink" title="82. 电焊工波力"></a>82. <strong><a href="https://movie.douban.com/subject/3338821/" target="_blank" rel="noopener">电焊工波力</a></strong></h2><p><img src="http://corningsun.qiniudn.com/blog/2018-07-10-3338821.jpg-o" alt=""><br>作为一名纳米修复工程师（Basic Utility Repair Nano Engineer），电焊工波力（Burn E）（Angus MacLane 配音）的工作就是负责修补真理号太空船上的故障及损伤之处。这应该算是一份比较轻松的工作，但是随着瓦力的到来，一切变得令人难以忍受。起因是瓦力拨弄过的陨石碎片击毁了真理号的航线导航灯，波力得到主机命令后迅速前往修补。在这一过程中，瓦力和伊娃经常让波力分神，致使本来很简单的工作始终无法完成……<br>本片为皮克斯动画长片《机器人瓦力》的配套短片，为波力配音的就是本片的主创设计师Angus MacLane。</p><h2 id="83-忠犬八公物语"><a href="#83-忠犬八公物语" class="headerlink" title="83. 忠犬八公物语"></a>83. <strong><a href="https://movie.douban.com/subject/1959195/" target="_blank" rel="noopener">忠犬八公物语</a></strong></h2><p><img src="http://corningsun.qiniudn.com/blog/2018-07-10-1959195.jpg-o" alt=""><br>1923年，日本秋田县大馆市天降大雪，近藤家纯种秋田犬产仔，赠与县土木科长间濑。后者将其中一犬转赠东京帝国大学教授上野秀次郎（仲代达矢 Tatsuya Nakadai 饰）驯养。上野的独生女千鹤子对此欢欣鼓舞，而上野夫妇却面露难色。后来，千鹤子（石野真子 Mako Ishino饰）谈恋爱，竟怀了男友的孩子。男友专程登门造访。上野与之对谈，后者诚惶诚恐，坦言要对其女儿负责，事不宜迟，即日便举行婚礼，上野闻听此言，转怒为喜。千鹤子出嫁后，上野旋即把全部的心血与爱都投注在幼犬身上，并取名为阿八。每日上下班，阿八必在涩谷车站等候，一年四季，风雨无阻，令路人叹为观止，成为地方一道风景，主仆之情感动天地……<br>本片根据真实事件改编，为1987年日本票房冠军，票房成绩高达54亿日元。</p><h2 id="84-我爱你"><a href="#84-我爱你" class="headerlink" title="84. 我爱你"></a>84. <strong><a href="https://movie.douban.com/subject/5908478/" target="_blank" rel="noopener">我爱你</a></strong></h2><p><img src="http://corningsun.qiniudn.com/blog/2018-07-10-5908478.jpg-o" alt=""><br>飘雪的坡道上，送牛奶的老头子金万皙（李顺载 饰）邂逅了收废品的老太太宋怡芬（尹秀晶 饰）。他们的前半生各自背负着艰辛的人生：万皙年轻时我行我素，直到妻子病逝才深觉愧疚；怡芬被心爱的男人抛弃在城市角落，孩子夭折后至老未嫁。两位老人在每天凌晨寂静的街道上相遇，孤独而苦难的生活令他们渐渐靠近。在万皙孙女妍儿（宋智孝 饰）的穿针引线下，如初恋般的悸动萌发在了彼此心中。万皙的朋友、停车场管理员张军峰（宋在河 饰）一直耐心的看护着患有老年痴呆症的老伴。直到有一天，军峰得知老伴已患绝症。目睹她一次次痛苦病发，心如刀绞的军峰做出了悲伤的决定……<br>影片改编自韩国著名网络漫画家姜草的同名作品，已公演的同名舞台剧亦受到好评。</p><h2 id="85-天书奇谭"><a href="#85-天书奇谭" class="headerlink" title="85. 天书奇谭"></a>85. <strong><a href="https://movie.douban.com/subject/1428581/" target="_blank" rel="noopener">天书奇谭</a></strong></h2><p><img src="http://corningsun.qiniudn.com/blog/2018-07-10-1428581.jpg-o" alt=""><br>天庭有珍奇书籍“天书”，被锁在石龛门里三千年。看守天书的袁公对天书的内容好奇不已，他乘无人之际，偷偷拿出观看。原来，天书上记录了一百〇八条法术，袁公偷偷下凡，把天书上的内容刻在石壁上。但本意造福人类的袁公此举却触犯了天条，遭到了玉帝的惩罚。<br>炼丹炉里的仙丹不慎被三条狐狸偷吃了，她们变成精下凡骗人钱财，还假扮仙姑和官府勾结，欺压百姓，祸害人间。袁公便指引天赋异禀的蛋生——一个从蛋里跳出来的孩子修习天书上的法术，和狐狸精斗智斗勇，为民除害。</p><h2 id="86-无人知晓"><a href="#86-无人知晓" class="headerlink" title="86. 无人知晓"></a>86. <strong><a href="https://movie.douban.com/subject/1292337/" target="_blank" rel="noopener">无人知晓</a></strong></h2><p><img src="http://corningsun.qiniudn.com/blog/2018-07-10-1292337.jpg-o" alt=""><br>新搬来的公寓这家人是母亲惠子（You饰）带着四个孩子：明（柳乐优弥饰）、京子、茂、雪。但母亲却得对周围的人们撒谎说丈夫去海外工作，自己与长子两个人在一起生活。事实是其它三名弟妹是“黑孩子”，因为四个孩子有着各自不同的父亲。他们一直呆在家中，没有去学校上学。<br>在母亲去百货商店工作时，年纪尚小的明就在家中代替母亲行使家长的职责。突然有一天母亲不见了，她把手中仅有的20万日元现金和一张短短的便条留给了孩子们，把弟妹托付给明看管后，就悄然地离家出走。<br>无亲无故，对外面几乎一无所知的四个孩子们，要开始面对新的生活，那实在不是件容易的事情……</p><h2 id="87-月神"><a href="#87-月神" class="headerlink" title="87. 月神"></a>87. <strong><a href="https://movie.douban.com/subject/6313765/" target="_blank" rel="noopener">月神</a></strong></h2><p><img src="http://corningsun.qiniudn.com/blog/2018-07-10-6313765.jpg-o" alt=""><br>深蓝夜空之下，宁静深邃的大海中央，摇来一艘名叫“月神（La Luna）”的小船。船上坐着祖孙三代，拖着长长白胡子的爷爷，孔武健壮的父亲，以及忽闪着清澈明亮大眼睛的小男孩。爷爷送给孙子一顶帽子，似乎象征了某种重要仪式的开始，对于男孩来说，也许这便是他成为男人的证明。只是自古以来，一代与一代相互依存，却总有思想上的鸿沟，割舍不掉的则是血缘之情。不知不觉间，散发着乳白色皎洁光芒的满月从海水中升起，悬浮夜空。爸爸支好梯子，男孩则背着铁锚爬了上去。原来，那发出光芒的竟然是遍布月亮表面的星星，它们穿过宇宙，似流星般坠落，装饰着这颗美丽的小行星。<br>阴晴圆缺，一如永世不变的约定……</p><h2 id="88-爱·回家"><a href="#88-爱·回家" class="headerlink" title="88. 爱·回家"></a>88. <strong><a href="https://movie.douban.com/subject/1299361/" target="_blank" rel="noopener">爱·回家</a></strong></h2><p><img src="http://corningsun.qiniudn.com/blog/2018-07-10-1299361.jpg-o" alt=""><br>为了方便找工作，妈领着7岁的相宇（俞承浩饰）去乡下的外婆家，想把他暂时留在那里。外婆（金亦芬饰）年事已高，不能说话也不识字。而一直生活在城市里的孙子相宇，刚开始无法适应连游戏机、电池都没得卖的乡下生活。他开始蛮横地流露出不满，抱怨这个抱怨那。为了买电池，偷走外婆的银头簪拿去卖；外婆得知孙子想吃炸鸡，却只理解到鸡肉，炖了只鸡给孙子吃，却被生气的相宇踢翻了。<br>老人家默默包容着孙子的一切，渐渐的，相宇也体会到外婆的良苦用心，适应并喜欢上了乡下生活。</p><h2 id="89-精神分裂症"><a href="#89-精神分裂症" class="headerlink" title="89. 精神分裂症"></a>89. <strong><a href="https://movie.douban.com/subject/3262918/" target="_blank" rel="noopener">精神分裂症</a></strong></h2><p><img src="http://corningsun.qiniudn.com/blog/2018-07-10-3262918.jpg-o" alt=""><br>一切都由一枚150吨的陨石引发。陨石砸中了男主人公亨利家对面楼的天线，幸运的是他毫发无损。但此事过后，他的世界刚好与现实世界偏离了水平91cm。无论开门关窗洗澡接电话，这些日常细琐杂事就都成了负担。他在家里度量好了精确的91cm误差，可还是在工作中麻烦不断。因此他去接受心理治疗，非但毫无进展，反而在回忆事故发生过后，又多出了75cm的垂直距离。亨利不断向自己发问：“多一点，少一点，我偏离了自己多少厘米又有什么意义呢？”于是他变得越来越自闭，越来越孤独。这与世界之间的91cm距离，他到底能否穿越和克服，最终回归正常生活……<br>本片荣获第61届戛纳电影节(2008)柯达短片电影奖。</p><h2 id="90-芙蓉镇"><a href="#90-芙蓉镇" class="headerlink" title="90. 芙蓉镇"></a>90. <strong><a href="https://movie.douban.com/subject/1297880/" target="_blank" rel="noopener">芙蓉镇</a></strong></h2><p><img src="http://corningsun.qiniudn.com/blog/2018-07-10-1297880.jpg-o" alt=""><br>本片分上下两集，讲述了位于湘、粤、桂三省交界处的芙蓉镇上，人称“芙蓉姐”的漂亮女人胡玉音（刘晓庆）在“四清运动”及“文化大革命”中的遭遇。<br>1963年，凭着热情周到的服务，胡玉音与丈夫桂桂（刘利年）经营的米豆腐摊子前渐渐成为早市上最热闹的一道风景，加上夫妻俩省吃俭用，手中积攒了一 笔数目可观的财富。镇党支书也是胡玉音干哥的黎满庚（张光北）、粮站主任谷燕山（郑在石）及乡邻们都为他们高兴。当他们盖好新房准备日子更上一层楼时，迎上“四清运动”，一直嫉妒胡玉音的原国营饮食店经理、今县商业局科长李国香（徐松子）与二流子王秋赦（祝士彬）联手，趁机将她定性为“反革命五类分子”中的“富农婆”，将之派去与原县文化馆馆长、今被人称作“秦癫子”的“右派”秦书田（姜文）一起清扫大街，桂桂身亡。运动中黎满庚昧着良心将胡玉音背叛，谷燕山则一直以老革命军人的标准诚实做人。<br>1966年，“文化大革命”开始，世道的荒谬从不停调换角色的李国香与王秋赦两人身上便可窥见。一起扫街时，胡玉音将自己的悲惨遭遇归罪于秦书田，后者曾在她与桂桂成亲之时唱了后被认为反革命的贺喜歌、在她新房子建成之时写了后被认为反革命的贺喜联。对于胡玉音的怨恨，秦书田并不多做辩解，相反时常暗中将她帮助。慢慢地，两人生出感情，计划着成为一家人好好生活，但前路充满血风腥雨。而在他们最艰难时，谷燕山从没忘伸手一帮。</p><h2 id="91-平衡"><a href="#91-平衡" class="headerlink" title="91. 平衡"></a>91. <strong><a href="https://movie.douban.com/subject/1408100/" target="_blank" rel="noopener">平衡</a></strong></h2><p><img src="http://corningsun.qiniudn.com/blog/2018-07-10-1408100.jpg-o" alt=""><br>在一个超现实的空间内，5名外貌几乎一模一样的男子背靠背围成一圈。他们四下张望，面无表情，又仿佛若有所思。当其中一人向外迈出一步时，他们脚下的地面竟然发生倾斜。原来，这5个男子站在一个四四方方、下方只有一个支点的板子正中央，只要稍稍一动就会破坏平衡。他们默契地向四方走去，尽力保持平衡，随后分别抽出钓鱼竿垂钓。其中一人钓上了一只木箱，当他想要探究里面的秘密时，另外4人也充满好奇，于是通过破坏平衡来让箱子滑向自己。那只箱子有如充满吸引力的潘多拉宝盒，左右着人们的心绪……<br>本片荣获1990年奥斯卡电影节最佳动画短片奖、1989年德国电影节最佳短片奖银奖。</p><h2 id="92-远在天边"><a href="#92-远在天边" class="headerlink" title="92. 远在天边"></a>92. <strong><a href="https://movie.douban.com/subject/3358309/" target="_blank" rel="noopener">远在天边</a></strong></h2><p><img src="http://corningsun.qiniudn.com/blog/2018-07-10-3358309.jpg-o" alt=""><br>秋叶纷飞的港口小镇，一只孤独的企鹅彷徨在空荡荡的街道上。它饥肠辘辘，无所依靠，漫无目的来到了一个小男孩的家中。企鹅似乎对男孩的收音机颇感兴趣，男孩则有些不知所措，只得把它送到失物招领处，然而根本没人丢失过企鹅。小企鹅成为男孩的累赘，几番周折，男孩得知企鹅都是生长在南极。于是，他制作了小木船，和小企鹅踏上了前往南极的归乡旅途……<br>本片由英国著名动画工作室AKA根据绘本名家奥利弗·杰法（Oliver Jeffer）的同名原著改编，制成后于圣诞节之时在英国第4频道播放。该片荣获2009年英国电影电视艺术学院儿童奖最佳影片奖和2009年芝加哥国际儿童电影节儿童评委会奖最佳动画片。</p><h2 id="93-攻壳机动队2：无罪"><a href="#93-攻壳机动队2：无罪" class="headerlink" title="93. 攻壳机动队2：无罪"></a>93. <strong><a href="https://movie.douban.com/subject/1291566/" target="_blank" rel="noopener">攻壳机动队2：无罪</a></strong></h2><p><img src="http://corningsun.qiniudn.com/blog/2018-07-10-1291566.jpg-o" alt=""><br>草薙素子之后，巴特与侦探出身的陀古萨结为搭档。近期发生多起机器人偶杀害主人继而自杀的事件，由于受害者家属均无公诉，且死者中有政客与公安官员，于是公安9课派出巴特小组调查此案。杀人人偶皆为荒凉地带公司出品的哈德莉机型，应部分顾客要求，该机型同时具备异性玩伴的功能，巴特从荒凉地带公司出货官遇害入手，卷入与黑帮的战斗，期间有人入侵他的大脑，使其自残。<br>巴特决定直奔荒凉地带总部，他与陀古萨拜访了择捉岛上的黑客基姆，后者布下系统陷阱，幸有素子提出警告避免陀古萨陷入控制。依靠基姆这条线索，巴特登上了荒凉地带公司设立在海上的工厂船，素子再次降临他的身边，与其并肩作战。</p><h2 id="94-无翼鸟"><a href="#94-无翼鸟" class="headerlink" title="94. 无翼鸟"></a>94. <strong><a href="https://movie.douban.com/subject/2338160/" target="_blank" rel="noopener">无翼鸟</a></strong></h2><p><img src="http://corningsun.qiniudn.com/blog/2018-07-10-2338160.jpg-o" alt=""><br>故事的主人公是一只无翼鸟（几维鸟，Kiwi），它有着长长的喙，棕褐色的羽毛衬上一双黑豆般的小眼睛，可怜可爱，其貌不扬。无翼鸟最明显的特点，是没有同类那赖以乘空飞翔的翅膀和尾翼。由此决定它只能痴痴仰望天空，遥不可及的梦想。这一日，无翼鸟艰难地用长喙拉着一个长皮筋，将其费力地绑在树上。随后跳到悬崖下方，用随身携带地锤子费力地在云雾缭绕的岩壁上契入钉子。经过不知多久的忙碌，一切准备就绪。我们的无翼鸟头戴飞行员头套，朝着本不可能的梦想飞奔而去……<br>本片为美国School of Visual学生毕业作品。</p><h2 id="95-沉静如海"><a href="#95-沉静如海" class="headerlink" title="95. 沉静如海"></a>95. <strong><a href="https://movie.douban.com/subject/1769507/" target="_blank" rel="noopener">沉静如海</a></strong></h2><p><img src="http://corningsun.qiniudn.com/blog/2018-07-10-1769507.jpg-o" alt=""><br>法国人André（迈克尔·加拉布鲁 Michel Galabru 饰）和她的孙女Jeanne（朱莉·德拉姆 Julie Delarme 饰）原本平静的生活因二战的到来和德军对法国的侵占被打破，更让他们无法接受的是，他们家里的一个房间竟被征用作为一个德国军官Werner（托马斯·儒阿特 Thomas Jouannet 饰）的起居室。他们对这个敌方的军官一直保持着一种冷漠，尤其是Jeanne，她从来不和军官说话，即使是在他向他们问好的时候。让人意想不到的是，这个年轻的军官在多日的相处后，竟和他们谈论起自己的生活、音乐和法国文化，透露出他纳粹军服下隐秘的内心世界。同时，Jeanne也在积极的参与法国地下反抗德军的组织活动。渐渐地，两个来自敌对双方的年轻男女间产生了一种奇异的情感。这种情感在他们离别的时候，化成了Jeanne口中的一句话，她和他说的第一句话，也是唯一的一句话……<br>本片根据法国作家Vercors写于1941的同名小说改编。</p><h2 id="96-红鳉鱼"><a href="#96-红鳉鱼" class="headerlink" title="96. 红鳉鱼"></a>96. <strong><a href="https://movie.douban.com/subject/26266892/" target="_blank" rel="noopener">红鳉鱼</a></strong></h2><p><img src="http://corningsun.qiniudn.com/blog/2018-07-10-26266892.jpg-o" alt=""><br>1984年，受立川派落语宗师立川谈志（北野武 饰）的感染，平凡高中生佐佐木信行（二宫和也 饰）决定终止学业，拜入立川名下成为一名落语表演演员。作为落语界的异端，立川特立独行的风格让徒弟们也吃不消。他破天荒向徒弟收取学费，平日里支使他们干着各种杂务，一旦不满意就破口大骂。有的人因吃不消而选择离开，有的则以理念不合拜入其他师父门下。得名谈春的信行为了梦想甚至和父母闹僵，好不容易令师父青眼相看又错失良机，被发配到筑地的鱼市修炼。在此期间，天才师弟（滨田岳 饰）脱颖而出，两位师兄谈谈（北村有起哉 饰）和关西（宫川大辅 饰）也各自经历着内心的煎熬。梦想当前，谈春他们全力奔跑……<br>本片根据落语名家立川谈志的人生事迹改编。</p><h2 id="97-宇宙快递"><a href="#97-宇宙快递" class="headerlink" title="97. 宇宙快递"></a>97. <strong><a href="https://movie.douban.com/subject/25884822/" target="_blank" rel="noopener">宇宙快递</a></strong></h2><p><img src="http://corningsun.qiniudn.com/blog/2018-07-10-25884822.jpg-o" alt=""><br>号称最棒快递公司的“Johnny Express”，他们的快递飞船正在太空中悠然前行。船舱内乱作一团，各种食物和杂物随意堆放，丝毫没有条理。懒散的快递员百无聊赖爬在床上。飞船调整为自动驾驶，此时已经离下一个目的地越来越近。根据提示音，快递员用遥控器做好降落的准备。这是一颗土黄色的体积非常小的星球，放眼望去根本看不到任何生命的迹象。而他所要送的货物，则需要放大到5500%才能看清。殊不知，看不到的事物也许并非不存在。责任心偏差的快递员，他的一举一动都左右着他人乃至一个种族、一个星球的命运。<br>史上最坑爹最血腥的快递服务，上帝保佑不要让我们遇到……</p><h2 id="98-宠物"><a href="#98-宠物" class="headerlink" title="98. 宠物"></a>98. <strong><a href="https://movie.douban.com/subject/25750820/" target="_blank" rel="noopener">宠物</a></strong></h2><p><img src="http://corningsun.qiniudn.com/blog/2018-07-10-25750820.jpg-o" alt=""><br>阳光明媚的一天，格鲁家的小黄人一边哼着小曲一边擦玻璃。这时，他看到窗外的人们牵着各自的宠物从门前经过，小动物憨态可掬，与主人形影不离。小黄人不禁心生羡慕，多么希望自己也能养一只宠物。他拿着项圈问了格鲁那条疯狂的小狗，可是对方根本不领情。他又问了外面的松鼠、鸽子甚至渺小的瓢虫，最终一无所获。正在这时，一架迷你飞碟突然出现，吓了小黄人一跳。不过他似乎很快平静下来，询问飞碟是否愿意当他的宠物。意外的是那架飞碟竟然同意了。在此之后，小黄人和他那超级拉风又萌态可掬的宠物度过了一段快乐的日子……<br>本片为动画片《卑鄙的我2》番外短片。</p><h2 id="99-凉宫春日的消失"><a href="#99-凉宫春日的消失" class="headerlink" title="99. 凉宫春日的消失"></a>99. <strong><a href="https://movie.douban.com/subject/4074292/" target="_blank" rel="noopener">凉宫春日的消失</a></strong></h2><p><img src="http://corningsun.qiniudn.com/blog/2018-07-10-4074292.jpg-o" alt=""><br>距圣诞节仅有8天时间，SOS团在凉宫春日的号召下，不出意料地策划了一场圣诞狂欢派对。但就在12月18日这天早晨，阿虚却发现周围的世界有了些许变化。1年9班消失不见，朝比奈学姐视其形同路人，甚至早已死去的朝仓也代替凉宫春日坐在了阿虚的后面，而春日则如同人间蒸发一般无人知晓。当他冲向SOS团的教室时，只看到了孤零零坐在角落里看书的长门有希，一向淡定自若、冷如冰霜的长门大神也变成了怯懦害羞的乖乖女。从前一日长门留下的蛛丝马迹中，阿虚判断出这个世界似乎被某人重组了一番。<br>此时的阿虚，握有连接两个绝然不同世界的钥匙，他面临着重大的选择……</p><h2 id="100-淘金记"><a href="#100-淘金记" class="headerlink" title="100. 淘金记"></a>100. <strong><a href="https://movie.douban.com/subject/1298817/" target="_blank" rel="noopener">淘金记</a></strong></h2><p><img src="http://corningsun.qiniudn.com/blog/2018-07-10-1298817.jpg-o" alt=""><br>流浪汉查理（查理·卓别林 Charlie Chaplin 饰）随队伍来到阿拉斯加淘金。他在一间小木屋里碰见了通缉犯拉逊，接着淘金人吉姆也闯进来，并抢走了拉逊的枪。拉逊出去找食物时发现了吉姆正在开发的金矿，于是他没回木屋。小木屋里，饥肠辘辘的查理煮了皮鞋充饥，饿的神智恍惚的吉姆却把查理想象成火鸡追杀。突然，一头熊撞进来，两人一起把熊打死，饱餐之后分道扬镳。吉姆发现了拉逊占了自己的金矿坑，拉逊将他打昏，不料却在逃跑时掉下深谷。<br>查理在小镇邂逅舞女乔治亚（乔治亚·黑尔 Georgia Hale 饰），帮她摆脱暴发户的骚扰。第二次又巧遇她时，查理邀她除夕共餐，但是乔治亚爽约了，失落的查理只能在幻梦中为她表演舞蹈。被打成失忆的吉姆在镇上重遇查理，他请查理帮他一起找金矿。两人回到小木屋，却被大风雪吹落下了万丈深渊。醒来时他们惊喜地发现金矿正在身边。查理与吉姆淘金成功，在回乡的船上遇见困顿的乔治亚。在新闻记者的镜头前，查理与乔治亚亲密拥抱。</p><p>欢迎关注公众号<strong>绝对影迷</strong>，影视爱好者的天堂~</p><p><img src="https://i.v2ex.co/sgtNjv08.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;01-肖申克的救赎&quot;&gt;&lt;a href=&quot;#01-肖申克的救赎&quot; class=&quot;headerlink&quot; title=&quot;01. 肖申克的救赎&quot;&gt;&lt;/a&gt;01. &lt;strong&gt;&lt;a href=&quot;https://movie.douban.com/subject/1292
      
    
    </summary>
    
      <category term="电影" scheme="https://corningsun.com/categories/%E7%94%B5%E5%BD%B1/"/>
    
    
      <category term="电影" scheme="https://corningsun.com/tags/%E7%94%B5%E5%BD%B1/"/>
    
  </entry>
  
  <entry>
    <title>最棒的UML工具 PlantUML</title>
    <link href="https://corningsun.com/%E6%9C%80%E6%A3%92%E7%9A%84UML%E5%B7%A5%E5%85%B7%20PlantUML/"/>
    <id>https://corningsun.com/最棒的UML工具 PlantUML/</id>
    <published>2017-10-31T11:07:00.000Z</published>
    <updated>2017-10-31T06:01:39.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ul><li>免费</li><li>类似 markdown 的纯文本编写，自动美化</li><li>Java 实现，多平台支持</li><li>超多插件<h2 id="PlantUML官网：-http-plantuml-com"><a href="#PlantUML官网：-http-plantuml-com" class="headerlink" title="PlantUML官网： http://plantuml.com/"></a><a href="http://plantuml.com/" target="_blank" rel="noopener">PlantUML官网： http://plantuml.com/</a></h2><h2 id="Atom-插件"><a href="#Atom-插件" class="headerlink" title="Atom 插件"></a>Atom 插件</h2></li><li><a href="https://atom.io/packages/plantuml-preview" target="_blank" rel="noopener">UML实时预览：https://atom.io/packages/plantuml-preview</a></li><li><a href="https://atom.io/packages/language-plantuml" target="_blank" rel="noopener">UML文本高亮：https://atom.io/packages/language-plantuml</a><h2 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h2><img src="http://corningsun.qiniudn.com/blog/2017-10-31-031558.png-o" alt=""><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">@startuml</span><br><span class="line"></span><br><span class="line">abstract class 车</span><br><span class="line"></span><br><span class="line">class 小汽车</span><br><span class="line">车 &lt;|.. 小汽车 : 实现</span><br><span class="line"></span><br><span class="line">class 轮胎</span><br><span class="line">class 发动机</span><br><span class="line">小汽车 *-- 轮胎 : 组合</span><br><span class="line">小汽车 *-- 发动机</span><br><span class="line"></span><br><span class="line">class SUV</span><br><span class="line">小汽车 &lt;|-- SUV : 泛化</span><br><span class="line"></span><br><span class="line">class 自行车</span><br><span class="line">车 &lt;|.. 自行车</span><br><span class="line"></span><br><span class="line">class 学生</span><br><span class="line">自行车 &lt;.. 学生 : 依赖</span><br><span class="line"></span><br><span class="line">class 班级</span><br><span class="line">class 身份证</span><br><span class="line">学生 --o 班级 : 聚合</span><br><span class="line">学生 -- 身份证 : 关联</span><br><span class="line"></span><br><span class="line">@enduml</span><br></pre></td></tr></table></figure></li></ul><p><img src="http://corningsun.qiniudn.com/blog/2017-10-31-060123.jpg-o" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;特点&quot;&gt;&lt;a href=&quot;#特点&quot; class=&quot;headerlink&quot; title=&quot;特点&quot;&gt;&lt;/a&gt;特点&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;免费&lt;/li&gt;
&lt;li&gt;类似 markdown 的纯文本编写，自动美化&lt;/li&gt;
&lt;li&gt;Java 实现，多平台支持&lt;/li&gt;

      
    
    </summary>
    
      <category term="Tools" scheme="https://corningsun.com/categories/Tools/"/>
    
      <category term="PlantUML" scheme="https://corningsun.com/categories/Tools/PlantUML/"/>
    
    
      <category term="Tools" scheme="https://corningsun.com/tags/Tools/"/>
    
      <category term="PlantUML" scheme="https://corningsun.com/tags/PlantUML/"/>
    
  </entry>
  
  <entry>
    <title>DaVinci</title>
    <link href="https://corningsun.com/DaVinci/"/>
    <id>https://corningsun.com/DaVinci/</id>
    <published>2017-06-06T19:48:46.000Z</published>
    <updated>2017-06-06T19:48:46.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="达芬奇的成绩单"><a href="#达芬奇的成绩单" class="headerlink" title="达芬奇的成绩单"></a>达芬奇的成绩单</h1><p><img src="http://corningsun.qiniudn.com/blog/2017-06-06-114607.jpg-o" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;达芬奇的成绩单&quot;&gt;&lt;a href=&quot;#达芬奇的成绩单&quot; class=&quot;headerlink&quot; title=&quot;达芬奇的成绩单&quot;&gt;&lt;/a&gt;达芬奇的成绩单&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;http://corningsun.qiniudn.com/blog/2017-
      
    
    </summary>
    
      <category term="杂文" scheme="https://corningsun.com/categories/%E6%9D%82%E6%96%87/"/>
    
    
      <category term="杂文" scheme="https://corningsun.com/tags/%E6%9D%82%E6%96%87/"/>
    
  </entry>
  
  <entry>
    <title>Workflowy</title>
    <link href="https://corningsun.com/workflowy/"/>
    <id>https://corningsun.com/workflowy/</id>
    <published>2017-04-25T08:43:23.000Z</published>
    <updated>2017-04-25T08:43:23.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="笔记工具WorkFlowy"><a href="#笔记工具WorkFlowy" class="headerlink" title="笔记工具WorkFlowy"></a>笔记工具<a href="https://workflowy.com" title="https://workflowy.com" target="_blank" rel="noopener">WorkFlowy</a></h2><p>用起来还不错，工作日志以后不会再更新到blog了。😁</p><p><img src="http://corningsun.qiniudn.com/blog/2017-04-25-004638.jpg-o" alt=""></p><a id="more"></a><p>每天详细-小时记录法</p><p><img src="http://corningsun.qiniudn.com/blog/2017-04-25-005555.jpg-o" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;笔记工具WorkFlowy&quot;&gt;&lt;a href=&quot;#笔记工具WorkFlowy&quot; class=&quot;headerlink&quot; title=&quot;笔记工具WorkFlowy&quot;&gt;&lt;/a&gt;笔记工具&lt;a href=&quot;https://workflowy.com&quot; title=&quot;https://workflowy.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WorkFlowy&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;用起来还不错，工作日志以后不会再更新到blog了。😁&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://corningsun.qiniudn.com/blog/2017-04-25-004638.jpg-o&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Tools" scheme="https://corningsun.com/categories/Tools/"/>
    
      <category term="WorkFlowy" scheme="https://corningsun.com/categories/Tools/WorkFlowy/"/>
    
    
      <category term="Tools" scheme="https://corningsun.com/tags/Tools/"/>
    
  </entry>
  
  <entry>
    <title>GitKraken</title>
    <link href="https://corningsun.com/GitKrakenTest/"/>
    <id>https://corningsun.com/GitKrakenTest/</id>
    <published>2017-03-14T22:26:52.000Z</published>
    <updated>2017-03-14T22:26:52.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="GitKraken"><a href="#GitKraken" class="headerlink" title="GitKraken"></a><a href="https://www.gitkraken.com/" title="https://www.gitkraken.com/" target="_blank" rel="noopener">GitKraken</a></h2><p>以前一直使用Eclipse中的EGit插件，感觉非常好用。最近在做Python项目，感觉PyCharm自带的不太好用，找了个几个Git客户端图形化工具，这个感觉还可以，先用几天试试。</p><p><img src="http://corningsun.qiniudn.com/blog/2017-03-14-145709.jpg-o" alt=""></p><a id="more"></a><h2 id="其他软件"><a href="#其他软件" class="headerlink" title="其他软件"></a>其他软件</h2><ul><li><p><a href="https://www.sourcetreeapp.com/" title="https://www.sourcetreeapp.com/" target="_blank" rel="noopener">SourceTree</a></p><p>  <img src="http://corningsun.qiniudn.com/blog/2017-03-14-150329.jpg-o" alt=""></p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;GitKraken&quot;&gt;&lt;a href=&quot;#GitKraken&quot; class=&quot;headerlink&quot; title=&quot;GitKraken&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.gitkraken.com/&quot; title=&quot;https://www.gitkraken.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitKraken&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;以前一直使用Eclipse中的EGit插件，感觉非常好用。最近在做Python项目，感觉PyCharm自带的不太好用，找了个几个Git客户端图形化工具，这个感觉还可以，先用几天试试。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://corningsun.qiniudn.com/blog/2017-03-14-145709.jpg-o&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Tools" scheme="https://corningsun.com/categories/Tools/"/>
    
      <category term="Git" scheme="https://corningsun.com/categories/Tools/Git/"/>
    
    
      <category term="Tools" scheme="https://corningsun.com/tags/Tools/"/>
    
      <category term="Git" scheme="https://corningsun.com/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Eclipse插件Gitflow Nightly</title>
    <link href="https://corningsun.com/eclipseGitFlowNightly/"/>
    <id>https://corningsun.com/eclipseGitFlowNightly/</id>
    <published>2017-03-02T11:32:24.000Z</published>
    <updated>2017-03-02T11:32:24.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Git-Flow"><a href="#Git-Flow" class="headerlink" title="Git Flow"></a>Git Flow</h1><p>Git Flow是构建在Git之上的一个组织软件开发活动的模型，是在Git之上构建的一项软件开发最佳实践。Git Flow是一套使用Git进行源代码管理时的一套行为规范和简化部分Git操作的工具。</p><ul><li><a href="http://www.ituring.com.cn/article/56870" target="_blank" rel="noopener">基于git的源代码管理模型——git flow</a></li><li><a href="http://nvie.com/posts/a-successful-git-branching-model/" target="_blank" rel="noopener">A successful Git branching model</a></li></ul><h1 id="Git-Flow-Nightly"><a href="#Git-Flow-Nightly" class="headerlink" title="Git Flow Nightly"></a>Git Flow Nightly</h1><p>是Eclipse中的插件，可以通过界面操作实现<code>Git Flow</code>中的功能。</p><p><img src="http://corningsun.qiniudn.com/blog/2017-03-02-035034.jpg-o" alt=""></p><a id="more"></a><h2 id="Git-Flow-Nightly安装"><a href="#Git-Flow-Nightly安装" class="headerlink" title="Git Flow Nightly安装"></a>Git Flow Nightly安装</h2><ul><li>方法1：通过Eclipse marketplace安装：<code>https://marketplace.eclipse.org/content/gitflow-nightly</code></li><li><p>方法2：通过Eclipse更新地址安装（==推荐==）：<code>http://download.eclipse.org/egit/updates-stable-nightly/</code></p><p>  <img src="http://corningsun.qiniudn.com/blog/2017-03-02-035858.jpg-o" alt=""></p></li></ul><h2 id="Git-Flow-Nightly使用"><a href="#Git-Flow-Nightly使用" class="headerlink" title="Git Flow Nightly使用"></a>Git Flow Nightly使用</h2><h3 id="初始化GitFlow"><a href="#初始化GitFlow" class="headerlink" title="初始化GitFlow"></a>初始化GitFlow</h3><ol><li><p>从Git仓库导出项目到Eclipse</p><p><img src="http://corningsun.qiniudn.com/blog/2017-03-02-071006.jpg-o" alt=""></p></li><li><p>初始化GitFlow</p><p><img src="http://corningsun.qiniudn.com/blog/2017-03-02-071029.jpg-o" alt=""><br><img src="http://corningsun.qiniudn.com/blog/2017-03-02-071115.jpg-o" alt=""><br><img src="http://corningsun.qiniudn.com/blog/2017-03-02-071154.jpg-o" alt=""></p></li></ol><h3 id="新功能流程"><a href="#新功能流程" class="headerlink" title="新功能流程"></a>新功能流程</h3><ol><li><p>开始新功能分支</p><p>  <img src="http://corningsun.qiniudn.com/blog/2017-03-02-071226.jpg-o" alt=""></p><blockquote><p>输入新功能名称，可以为任意名称</p></blockquote><p> <img src="http://corningsun.qiniudn.com/blog/2017-03-02-071354.jpg-o" alt=""></p></li><li><p>在新功能分支中完成编码工作</p><p> <img src="http://corningsun.qiniudn.com/blog/2017-03-02-071458.jpg-o" alt=""></p></li><li><p>提交修改</p><blockquote><p>注意只commit到本地仓库，不要push；</p></blockquote><p>  <img src="http://corningsun.qiniudn.com/blog/2017-03-02-071526.jpg-o" alt=""></p></li><li><p>结束新功能分支</p><p> <img src="http://corningsun.qiniudn.com/blog/2017-03-02-071550.jpg-o" alt=""></p></li><li><p>选择分支结束后处理方式</p><ul><li>Squash，将分支中的commit合并为一次提交</li><li><p>Keep branch，保留分支，不删除</p><blockquote><p>建议不要勾选，使用默认的配置就可以了。</p></blockquote><p><img src="http://corningsun.qiniudn.com/blog/2017-03-02-071653.jpg-o" alt=""></p></li></ul></li><li><p>查看结果</p><blockquote><p>新功能分支中的内容被合并到本地develop分支了；<br>新功能分支被删除了；</p></blockquote><p>  <img src="http://corningsun.qiniudn.com/blog/2017-03-02-071718.jpg-o" alt=""></p></li><li><p>合并并push本地develop分支</p><ul><li>执行pull，拉取远程develop到本地，会自动与本地develop合并；</li><li>合并存在冲突时，需要手动处理；</li><li><p>处理完成后push到远程develop分支上。</p><p><img src="http://corningsun.qiniudn.com/blog/2017-03-02-071736.jpg-o" alt=""></p></li></ul></li><li><p>结束</p><blockquote><p>可以看到远程develop分支和本地develop分支内容已经一致。</p></blockquote><p>  <img src="http://corningsun.qiniudn.com/blog/2017-03-02-071751.jpg-o" alt=""></p></li></ol><h3 id="版本发布流程"><a href="#版本发布流程" class="headerlink" title="版本发布流程"></a>版本发布流程</h3><ol><li><p>开始新版本分支</p><blockquote><p>注意只有在develop分支已经通过所有测试后才考虑创建release分支，它原则上只做版本说明等编写。</p></blockquote><p> <img src="http://corningsun.qiniudn.com/blog/2017-03-02-071943.jpg-o" alt=""></p><blockquote><p>Release分支的命名要与Maven版本号一致，因为在结束发布分支时，它还作为标签的命名。</p></blockquote><p>  <img src="http://corningsun.qiniudn.com/blog/2017-03-02-072001.jpg-o" alt=""></p><p>  <img src="http://corningsun.qiniudn.com/blog/2017-03-02-072036.jpg-o" alt=""></p></li><li><p>修改系统版本</p><blockquote><p>系统版本命名规范可参考 <a href="https://www.douban.com/note/187597743/" title="https://www.douban.com/note/187597743/" target="_blank" rel="noopener">豆瓣版本命名规范</a><br>注意发布的版本中不允许依赖<strong>*-SNAPSHOT</strong>的JAR包，否则该JAR包重新发布后会导致，标签中的代码依赖错误。</p></blockquote><p><img src="http://corningsun.qiniudn.com/blog/2017-03-02-073340.jpg-o" alt=""></p></li><li><p>修改变更历史</p><blockquote><p>文件为项目根目录下：CHANGELOG<br>编码为UTF-8<br>格式参考<a href="http://archive.apache.org/dist/wicket/7.6.0/CHANGELOG-7.x" target="_blank" rel="noopener">Wicket CHANGELOG</a><br>变更历史建议在每做一个新功能时添加，再对比下<code>git commit</code>日志，补充完整。  </p></blockquote><p><img src="http://corningsun.qiniudn.com/blog/2017-03-02-074239.jpg-o" alt=""></p></li><li><p>提交修改</p><blockquote><p>注意为<code>commit</code>，不要<code>push</code></p></blockquote><p><img src="http://corningsun.qiniudn.com/blog/2017-03-02-074520.jpg-o" alt=""></p></li><li><p>结束发布分支</p><p> <img src="http://corningsun.qiniudn.com/blog/2017-03-02-074535.jpg-o" alt=""></p><blockquote><p>可以看到：<br>release分支被合并到了本地develop和master分支；<br>release分支被删除了；<br>从本地master分支创建了新的标签(Tag)，标签名为release分支的名称；  </p></blockquote><p>  <img src="http://corningsun.qiniudn.com/blog/2017-03-02-074615.jpg-o" alt=""></p></li><li><p>Push本地分支</p><blockquote><p>Push本地develop分支</p></blockquote><p> <img src="http://corningsun.qiniudn.com/blog/2017-03-02-074724.jpg-o" alt=""></p><blockquote><p>Push本地master分支<br>如果无权限修改master分支，通知项目管理员就可以了。</p></blockquote><p> <img src="http://corningsun.qiniudn.com/blog/2017-03-02-074740.jpg-o" alt=""></p><blockquote><p>Push标签1.0.0</p></blockquote><p>  <img src="http://corningsun.qiniudn.com/blog/2017-03-02-074750.jpg-o" alt=""></p></li><li><p>查看结果</p><blockquote><p>访问Git仓库查看结果<br>标签</p></blockquote><p>  <img src="http://corningsun.qiniudn.com/blog/2017-03-02-074829.jpg-o" alt=""></p><blockquote><p>变更历史</p></blockquote><p>  <img src="http://corningsun.qiniudn.com/blog/2017-03-02-074843.jpg-o" alt=""><br>  <img src="http://corningsun.qiniudn.com/blog/2017-03-02-074912.jpg-o" alt=""></p></li></ol><h3 id="紧急修复流程"><a href="#紧急修复流程" class="headerlink" title="紧急修复流程"></a>紧急修复流程</h3><p>当生产环境中的软件遇到了异常情况或者发现了严重到必须立即修复的软件缺陷的时候，就需要从master分支上指定的TAG版本派生hotfix分支来组织代码的紧急修复工作。  </p><blockquote><p>注意：hotfix只从TAG发出，而且结束后会生成新的TAG。</p></blockquote><ol><li><p>开始hotfix分支</p><blockquote><p>Hotfix的命名与release类似，对于X.X.X，第三位为修复版本号，使用自增方式就可以了。</p></blockquote><p> <img src="http://corningsun.qiniudn.com/blog/2017-03-02-075014.jpg-o" alt=""><br>  <img src="http://corningsun.qiniudn.com/blog/2017-03-02-075033.jpg-o" alt=""></p></li><li><p>修复BUG</p><p> <img src="http://corningsun.qiniudn.com/blog/2017-03-02-075046.jpg-o" alt=""></p></li><li><p>修改版本和变更历史</p><p> <img src="http://corningsun.qiniudn.com/blog/2017-03-02-075100.jpg-o" alt=""><br>  <img src="http://corningsun.qiniudn.com/blog/2017-03-02-075114.jpg-o" alt=""></p></li><li><p>结束hotfix</p><p> <img src="http://corningsun.qiniudn.com/blog/2017-03-02-075124.jpg-o" alt=""></p><blockquote><p>可以看到：<br>Hotfix分支被合并到了develop和master<br>Hotfix分支被删除了<br>从master分支创建了Tag，名称为hotfix名称  </p></blockquote><p> <img src="http://corningsun.qiniudn.com/blog/2017-03-02-075154.jpg-o" alt=""></p></li><li><p>Push本地分支</p><p> <em>略</em></p></li></ol><h3 id="项目发布流程"><a href="#项目发布流程" class="headerlink" title="项目发布流程"></a>项目发布流程</h3><ol><li><p>项目发布约束</p><ul><li>必须从TAG进行发布</li><li>TAG对应的版本都是非SNAPSHOT的</li><li>TAG依赖的项目也都是非SNAPSHOT的</li><li>每个TAG都必须在公司maven仓库中存在对应的POM文件或jar包和源码</li><li>最好使用专门的打包机进行项目打包，以避免本地项目没有发布的情况</li></ul></li><li><p>普通jar包发布</p><ol><li>将对应的Tag版本导出到本地</li><li>执行Maven发布命令：mvn clean deploy</li><li>结束</li></ol></li><li><p>产品ZIP包发布</p><ol><li>将对应的Tag版本导出到本地</li><li>执行Maven发布命令：mvn clean deploy</li><li>执行Maven打包命令：mvn clean package</li><li>获取打包结果</li><li>编写产品说明文档</li><li>提交到配置管理员</li></ol></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Git-Flow&quot;&gt;&lt;a href=&quot;#Git-Flow&quot; class=&quot;headerlink&quot; title=&quot;Git Flow&quot;&gt;&lt;/a&gt;Git Flow&lt;/h1&gt;&lt;p&gt;Git Flow是构建在Git之上的一个组织软件开发活动的模型，是在Git之上构建的一项软件开发最佳实践。Git Flow是一套使用Git进行源代码管理时的一套行为规范和简化部分Git操作的工具。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.ituring.com.cn/article/56870&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;基于git的源代码管理模型——git flow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://nvie.com/posts/a-successful-git-branching-model/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;A successful Git branching model&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;Git-Flow-Nightly&quot;&gt;&lt;a href=&quot;#Git-Flow-Nightly&quot; class=&quot;headerlink&quot; title=&quot;Git Flow Nightly&quot;&gt;&lt;/a&gt;Git Flow Nightly&lt;/h1&gt;&lt;p&gt;是Eclipse中的插件，可以通过界面操作实现&lt;code&gt;Git Flow&lt;/code&gt;中的功能。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://corningsun.qiniudn.com/blog/2017-03-02-035034.jpg-o&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Tools" scheme="https://corningsun.com/categories/Tools/"/>
    
      <category term="Git" scheme="https://corningsun.com/categories/Tools/Git/"/>
    
    
      <category term="Tools" scheme="https://corningsun.com/tags/Tools/"/>
    
      <category term="Git" scheme="https://corningsun.com/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>微信机器人和Redmine整合能做些什么？</title>
    <link href="https://corningsun.com/itchatAndRedmine/"/>
    <id>https://corningsun.com/itchatAndRedmine/</id>
    <published>2017-03-01T16:15:36.000Z</published>
    <updated>2017-03-02T09:33:36.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>公司使用Redmine作为项目管理工具，同时使用微信群进行工作交流。日常管理中会有一些需求，但是需要打通微信和Redmine之间数据交互才能完成。下面我来介绍下，目前已经完成的功能。</p><p><img src="http://corningsun.qiniudn.com/blog/2017-03-01-121940.jpg-o" alt=""></p><a id="more"></a><h2 id="依赖环境"><a href="#依赖环境" class="headerlink" title="依赖环境"></a>依赖环境</h2><ul><li><p><a href="http://www.redmine.org/" title="http://www.redmine.org/" target="_blank" rel="noopener">Redmine</a>  </p><blockquote><p>是一个网页界面的项目管理与缺陷跟踪管理系统的自由及开放源代码软件工具。它集成了项目管理所需的各项功能：日历、燃尽图和甘特图 以协助可视化表现项目与时间限制，问题跟踪和版本控制。此外，Redmine也可以同时处理多个项目。</p></blockquote></li><li><a href="https://www.python.org/" title="https://www.python.org/" target="_blank" rel="noopener">Python</a> </li><li><p><a href="https://github.com/littlecodersh/ItChat" title="https://github.com/littlecodersh/ItChat" target="_blank" rel="noopener">itChat</a>  </p><blockquote><p>是一个开源的微信个人号接口，使用python调用微信从未如此简单。</p></blockquote></li><li><p><a href="http://python-redmine.readthedocs.io/index.html" title="http://python-redmine.readthedocs.io/index.html" target="_blank" rel="noopener">python-redmine</a>  </p><blockquote><p>is a library for communicating with a Redmine project management application. </p></blockquote></li></ul><h2 id="整合的功能"><a href="#整合的功能" class="headerlink" title="整合的功能"></a>整合的功能</h2><h3 id="微信群每天的工作汇报检查"><a href="#微信群每天的工作汇报检查" class="headerlink" title="微信群每天的工作汇报检查"></a>微信群每天的工作汇报检查</h3><h4 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h4><p>部门有一个微信群，要求每个员工在工作日9:00之前汇报自己当天的任务安排。而且汇报任务时，必须@自己的领导。由于人数较多，检查谁没有发送会比较困难，所以想通过机器人来解决。</p><h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><ol><li>使用itchat的消息监听，获取部门微信群的聊天记录</li><li>使用<a href="http://docs.peewee-orm.com/en/latest/" target="_blank" rel="noopener">peewee</a>将聊天记录存储到数据库中</li><li>使用<a href="https://pypi.python.org/pypi/schedule" target="_blank" rel="noopener">schedule</a>运行启动线程，每天10:00运行</li><li>从数据库查询当天0:00～10:00的微信群聊天记录，包含<code>@</code>并以组员分组，得到当天<strong>已汇报的人员列表</strong></li><li>使用<code>itchat.search_chatrooms()</code>获取部门群</li><li>从部门群获取所有成员    <code>MemberList = rooms[0].get(&#39;MemberList&#39;)</code></li><li>分别判断组员是否在<strong>已汇报人员列表</strong>中，不在的，记录到<strong>未汇报结果</strong>中</li><li>将<strong>未汇报结果</strong>发送给指定人员或微信群</li></ol><h3 id="微信聊天记录汇总到Redmine"><a href="#微信聊天记录汇总到Redmine" class="headerlink" title="微信聊天记录汇总到Redmine"></a>微信聊天记录汇总到Redmine</h3><h4 id="目的-1"><a href="#目的-1" class="headerlink" title="目的"></a>目的</h4><p>每个项目都会有一个或多个对应的微信群，这些微信群中的聊天记录很多都是有价值的，需要保留的。但是现在的微信群是无法长时间保存历史信息的。同时，每个项目在Redmine中都会有对应的<strong>Issue</strong>，如果能将微信群和<strong>Issue</strong>对应起来，那么对于后续项目推进，项目背景了解，定制开发等都会有很大帮助。</p><h4 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h4><ul><li>微信群名称风格要统一，如：群名称#<strong>issueId</strong>,测试群#1234</li></ul><h4 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a>实现</h4><ol><li>保存微信群聊天记录到数据库（和上面一样不再累述）</li><li>每天23点，从数据库查询当天的所有聊天记录，并以微信群名称分组</li><li>分别汇总每个微信群的聊天记录（注意按时间排序）</li><li>从群名称中获取<strong>issueId</strong></li><li>使用<code>redmine.issue.update</code>将聊天记录更新到对应的<strong>Issue</strong></li></ol><h3 id="Redmine未完成工作提醒"><a href="#Redmine未完成工作提醒" class="headerlink" title="Redmine未完成工作提醒"></a>Redmine未完成工作提醒</h3><h4 id="目的-2"><a href="#目的-2" class="headerlink" title="目的"></a>目的</h4><p>Redmine中每个人都被分派了很多任务，时间久了，会忘记这些任务，导致有些任务没有执行或者执行后没有关闭。</p><h4 id="实现-2"><a href="#实现-2" class="headerlink" title="实现"></a>实现</h4><ol><li>从微信群获取所有组员</li><li>根据组员姓名到Redmine查询组员在Redmine中的唯一ID（<code>redmine.user.filter</code>）</li><li>根据组员Id到Redmine查询未完成的issues（<code>redmine.issue.filter</code>）</li><li>合并所有待完成的任务信息</li><li>使用微信发送任务给指定组员</li></ol><h3 id="Redmine工时未填写提醒"><a href="#Redmine工时未填写提醒" class="headerlink" title="Redmine工时未填写提醒"></a>Redmine工时未填写提醒</h3><h4 id="目的-3"><a href="#目的-3" class="headerlink" title="目的"></a>目的</h4><p>公司要求所有员工，在每天下班之前，填写好自己的工作日志。但是因为各种情况，出差、加班、忘记了等会导致日志填写不准确。</p><h4 id="实现-3"><a href="#实现-3" class="headerlink" title="实现"></a>实现</h4><ol><li>从微信群获取所有组员，并根据组员姓名获取在Redmine的Id</li><li>获取待检查的日期，可以设定为最近7天，内的工作日</li><li>使用<code>redmine.time_entry.filter</code>查询每个员工在指定日期的工作日志</li><li>判断一天内的工时总数是否 <code>&gt; 7.5</code>，不满足则记录到检查结果中</li><li>汇总所有员工的检查结果</li><li>发送检查结果到微信群</li></ol><h4 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h4><p><img src="http://corningsun.qiniudn.com/blog/2017-03-02-013227.jpg-o" alt=""></p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>其实这些功能的实现并没有很高的技术含量，我做的不过是写写代码。很佩服我的<strong>leader</strong>能想到可以这么去做。</p><h2 id="FAQ"><a href="#FAQ" class="headerlink" title="FAQ"></a>FAQ</h2><p>记录一些我觉得容易出错问题吧，如果能帮到你们，那最好了。</p><h3 id="使用pip-install-peewee出现权限问题，无法安装"><a href="#使用pip-install-peewee出现权限问题，无法安装" class="headerlink" title="使用pip install peewee出现权限问题，无法安装"></a>使用<code>pip install peewee</code>出现权限问题，无法安装</h3><p>我的开发环境是<strong>Mac</strong>，系统有默认的Python环境。出现上述问题后，我使用<code>sudo pip install peewee</code>，可以安装。但是后续运行脚本时，提示无法找到<code>peewee</code>模块。<br>后面我查了一下，大家推荐的方式是，安装<a href="http://docs.python-guide.org/en/latest/dev/virtualenvs/" target="_blank" rel="noopener">virtualenvs</a>。<a href="http://www.jianshu.com/p/08c657bd34f1" title="Virtualenv简明教程" target="_blank" rel="noopener">英语不好的点这里</a><br>再啰嗦一句，退出虚拟环境后，再次进入的方法是：  <code>source /你的虚拟环境目录/bin/activate</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">MacBook-Pro:Documents corning$ source ~/pyvirs/wxrobot/bin/activate</span><br><span class="line">(wxrobot) MacBook-Pro:Documents corning$</span><br></pre></td></tr></table></figure><h3 id="微信群是中文名时，调用itchat-search-chatrooms-name-39-中文-39-会报错"><a href="#微信群是中文名时，调用itchat-search-chatrooms-name-39-中文-39-会报错" class="headerlink" title="微信群是中文名时，调用itchat.search_chatrooms(name=&#39;中文&#39;)会报错"></a>微信群是中文名时，调用<code>itchat.search_chatrooms(name=&#39;中文&#39;)</code>会报错</h3><p>解决方法是，转换中文名为<code>unicode</code>编码，如：<code>itchat.search_chatrooms(name=u&#39;中文&#39;)</code></p><h3 id="Redmine中根据姓名查询用户时，可以根据姓名全称查询，但是姓和名之间要有空格"><a href="#Redmine中根据姓名查询用户时，可以根据姓名全称查询，但是姓和名之间要有空格" class="headerlink" title="Redmine中根据姓名查询用户时，可以根据姓名全称查询，但是姓和名之间要有空格"></a>Redmine中根据姓名查询用户时，可以根据姓名全称查询，但是姓和名之间要有空格</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">u'张三丰'</span></span><br><span class="line">filterName = name[<span class="number">0</span>] + <span class="string">" "</span> + name[<span class="number">1</span>:len(name)]</span><br><span class="line">users = redmine.user.filter(name=filterName, status=<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>下面是官方文档的参数说明，怪我看的不仔细😢</p><blockquote><p>name (string) – (optional). Filter users on their login, firstname, lastname and mail. <strong>If the pattern contains a space, it will also return users whose firstname match the first word or lastname match the second word.</strong></p></blockquote><h3 id="itChat中的UserName、DisplayName和NickName具体是什么？"><a href="#itChat中的UserName、DisplayName和NickName具体是什么？" class="headerlink" title="itChat中的UserName、DisplayName和NickName具体是什么？"></a><code>itChat</code>中的<code>UserName</code>、<code>DisplayName</code>和<code>NickName</code>具体是什么？</h3><ul><li><p>UserName </p><blockquote><p>用户或微信群在微信中的唯一ID，可以通过次Id发送消息等<br>一般如：@@absdeeddvvvffss</p></blockquote></li><li><p>DisplayName</p><blockquote><p>微信显示的名称</p></blockquote></li><li><p>NickName</p><blockquote><p>群昵称</p></blockquote><p>  <img src="http://corningsun.qiniudn.com/blog/2017-03-01-125939.jpg-o" alt=""></p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h1&gt;&lt;p&gt;公司使用Redmine作为项目管理工具，同时使用微信群进行工作交流。日常管理中会有一些需求，但是需要打通微信和Redmine之间数据交互才能完成。下面我来介绍下，目前已经完成的功能。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://corningsun.qiniudn.com/blog/2017-03-01-121940.jpg-o&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="https://corningsun.com/categories/Python/"/>
    
      <category term="itChat" scheme="https://corningsun.com/categories/Python/itChat/"/>
    
    
      <category term="Python" scheme="https://corningsun.com/tags/Python/"/>
    
      <category term="itChat" scheme="https://corningsun.com/tags/itChat/"/>
    
  </entry>
  
  <entry>
    <title>SonarQube过滤器使用说明</title>
    <link href="https://corningsun.com/SonarQubeFilters/"/>
    <id>https://corningsun.com/SonarQubeFilters/</id>
    <published>2017-02-28T14:15:37.000Z</published>
    <updated>2017-02-28T14:15:37.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h1><p>使用SonarQube管理项目，当项目太多时，管理会非常困难。需要对项目进行自定义分组管理。</p><p><img src="http://corningsun.qiniudn.com/blog/2017-02-28-061949.jpg-o" alt=""></p><a id="more"></a><h2 id="一、管理员添加过滤器"><a href="#一、管理员添加过滤器" class="headerlink" title="一、管理员添加过滤器"></a>一、管理员添加过滤器</h2><h3 id="1-新建搜索"><a href="#1-新建搜索" class="headerlink" title="1. 新建搜索"></a>1. 新建搜索</h3><h3 id="2-设置条件"><a href="#2-设置条件" class="headerlink" title="2. 设置条件"></a>2. 设置条件</h3><p><img src="http://corningsun.qiniudn.com/blog/2017-02-28-063149.jpg-o" alt=""></p><h3 id="3-另存为，并设置为共享给所有用户"><a href="#3-另存为，并设置为共享给所有用户" class="headerlink" title="3. 另存为，并设置为共享给所有用户"></a>3. 另存为，并设置为共享给所有用户</h3><p><img src="http://corningsun.qiniudn.com/blog/2017-02-28-063637.jpg-o" alt=""></p><h2 id="二、普通用户从所有过滤器中选择自己需要的"><a href="#二、普通用户从所有过滤器中选择自己需要的" class="headerlink" title="二、普通用户从所有过滤器中选择自己需要的"></a>二、普通用户从所有过滤器中选择自己需要的</h2><p><img src="http://corningsun.qiniudn.com/blog/2017-02-28-063926.jpg-o" alt=""></p><h2 id="三、过滤器使用效果图"><a href="#三、过滤器使用效果图" class="headerlink" title="三、过滤器使用效果图"></a>三、过滤器使用效果图</h2><p><img src="http://corningsun.qiniudn.com/blog/2017-02-28-064046.jpg-o" alt=""></p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="1-普通用户也可以自定义过滤器，但无法共享给其他用户"><a href="#1-普通用户也可以自定义过滤器，但无法共享给其他用户" class="headerlink" title="1. 普通用户也可以自定义过滤器，但无法共享给其他用户"></a>1. 普通用户也可以自定义过滤器，但无法共享给其他用户</h3><h3 id="2-过滤器除了可以过滤项目，还可以自定义显示的列和顺序"><a href="#2-过滤器除了可以过滤项目，还可以自定义显示的列和顺序" class="headerlink" title="2. 过滤器除了可以过滤项目，还可以自定义显示的列和顺序"></a>2. 过滤器除了可以过滤项目，还可以自定义显示的列和顺序</h3><p><img src="http://corningsun.qiniudn.com/blog/2017-02-28-064345.jpg-o" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;目的&quot;&gt;&lt;a href=&quot;#目的&quot; class=&quot;headerlink&quot; title=&quot;目的&quot;&gt;&lt;/a&gt;目的&lt;/h1&gt;&lt;p&gt;使用SonarQube管理项目，当项目太多时，管理会非常困难。需要对项目进行自定义分组管理。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://corningsun.qiniudn.com/blog/2017-02-28-061949.jpg-o&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Tools" scheme="https://corningsun.com/categories/Tools/"/>
    
      <category term="SonarQube" scheme="https://corningsun.com/categories/Tools/SonarQube/"/>
    
    
      <category term="Tools" scheme="https://corningsun.com/tags/Tools/"/>
    
      <category term="SonarQube" scheme="https://corningsun.com/tags/SonarQube/"/>
    
  </entry>
  
  <entry>
    <title>订婚的前一天</title>
    <link href="https://corningsun.com/theDayBeforeEngagement/"/>
    <id>https://corningsun.com/theDayBeforeEngagement/</id>
    <published>2017-01-22T23:13:16.000Z</published>
    <updated>2017-02-13T12:05:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天是<strong>2017-01-22</strong>日，明天就要订婚了，仅以此篇纪念我们重要的一个时刻。</p><h2 id="过去"><a href="#过去" class="headerlink" title="过去"></a>过去</h2><h3 id="初中"><a href="#初中" class="headerlink" title="初中"></a>初中</h3><p>我们是初中同学，而且仅仅只有一年。那时候流行“休学”，就是在初二多读一年，为了升初三的时候，没有压力，能考一个好点的高中。我休学到她的班级，然而初中并没有多少接触，那时候我刚到新的班级，又比较内向，除了座位周围的人，其他都不认识。然后第二年她也休学了，就这样错过了。<br><a id="more"></a></p><h3 id="高中"><a href="#高中" class="headerlink" title="高中"></a>高中</h3><p>比较凑巧的是，高中我们是一个学校，是理科，而且都是18班，只是我比她高一个年级。高中的教室每年都会动一次，高一在一楼，高二在二楼，所以我一直在她楼上。高中第一次见面还是她跑到楼上来找我，她觉得我成绩很好，想请教些方法，问怎么学物理和数学。其实我很奇怪她怎么知道我在楼上的，而且当时我的成绩也就一般般，就没说啥了，只说了认真听课之类的吧，记不太清咯。高中也就这样过去了，除了偶尔在校园邂逅时，打个招呼，并没有其他交流。</p><h3 id="大学"><a href="#大学" class="headerlink" title="大学"></a>大学</h3><p>大学我在工大，她在农大，不在一个城市，本来是一点交集都没有的。直到我大四，一个偶然的机会，初中的班长创建了QQ群，把我们都拉进去了。然后就互相加了好友，聊了起来，而且一发不可收拾；也许是太多年没见，也许是城市，专业都不一样，总之有太多可以聊的东西了。<br>那时候我已经在实习了，一个人在南京，空下来就找她聊天。有一次回学校，同宿舍的哥们让我给带点特产，我就顺便问下她要不要，她说要，然后我就真的给她送过去了。那时候才是高中后第一次见面，然后就正式成为我女朋友了～😄<br>她本来就比我低一个年级，然后高三的时候又复读了一年，所以那时候她才大二。有时候同学或者同事问起来，知道我女朋友才大二后，都会给个“你真行😎”的表情。但是我想说，我们真的是同学啊。。<br>我毕业后直接去了上海，那时候她才大四又准备考研，所以大部分时候都是我跑去合肥找她的。刚毕业，大家都懂的，没啥钱，只能一个月跑一次，有时候我出差或其他情况，时间会更久。住宾馆也要找尽量便宜的，基本都是一百以内；记得有一次周末，没有提前订房，最后找不到房间了，贵的又舍不得住，最后找了个65的，条件差的一B，牙刷、毛巾、啥都没。虽然很苦，但是真的很开心  </p><h3 id="研究生"><a href="#研究生" class="headerlink" title="研究生"></a>研究生</h3><p>比较幸运的是，她考研还算顺利，虽然纠结了好久，但是最后还是找了个离我最近的学校（苏州）。刚到苏州的时候，真的好开心啊，觉得离得这么近了，而且车费也便宜了好多，可以经常见面了。<br>上海到苏州高铁比普快贵一倍多，但是时间其实相差不多，所以经常我们都是做普快来回。刚开始还是我去苏州找她，后来她就不让我去了，说在苏州要住宾馆，要多花好多钱。所以虽然她在苏州待了很久，但是到最后，我去的次数一只手都数得过来。有好多地方，她说一直要带去我看的，到后来的后来，我才终于看到了～～<br>因为专业原因，她实习的比较早，实习的机会其实挺多的，但最后还是选择了“上海”，离我更近了。不过上海实在太大了，我在浦西、她在浦东，过来一趟还是要两个小时。她们实习也很辛苦，每天都得晚上10点多才回宿舍，然后周六还得加班。不过她一有空就会过来陪我，然后我们一起睡懒觉，一起加餐，一起包饺子，一起逛街。<br>我有时候让她周末别过来了，在宿舍好好休息，但是她会生气，说我嫌弃她，说，在我这就能不动脑子，就能好好放松。</p><h2 id="现在"><a href="#现在" class="headerlink" title="现在"></a>现在</h2><p>订婚的日子其实定了很久了，但是因为上班，也才回来两天，匆匆忙忙的，跟爸妈一起才总算把东西都差不多准备好了。<br>家里的事情真的好多好多，多到心里烦躁，晚上收拾屋子，怎么都收拾不完，干脆放弃了  </p><h2 id="将来"><a href="#将来" class="headerlink" title="将来"></a>将来</h2><p>过日子真的不容易，所以我的签名会是“<strong>家家有本难念的经</strong>”，希望将来也像现在一样，开开心心，一切安好～</p><h2 id="终"><a href="#终" class="headerlink" title="终"></a>终</h2><p>现在是<strong>2017-01-23 00:52:16</strong>，农历<strong>腊月二十六</strong>，已经是我订婚的日子啦。<br>不知不觉，写的有点多，早点睡了，安～  </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天是&lt;strong&gt;2017-01-22&lt;/strong&gt;日，明天就要订婚了，仅以此篇纪念我们重要的一个时刻。&lt;/p&gt;
&lt;h2 id=&quot;过去&quot;&gt;&lt;a href=&quot;#过去&quot; class=&quot;headerlink&quot; title=&quot;过去&quot;&gt;&lt;/a&gt;过去&lt;/h2&gt;&lt;h3 id=&quot;初中&quot;&gt;&lt;a href=&quot;#初中&quot; class=&quot;headerlink&quot; title=&quot;初中&quot;&gt;&lt;/a&gt;初中&lt;/h3&gt;&lt;p&gt;我们是初中同学，而且仅仅只有一年。那时候流行“休学”，就是在初二多读一年，为了升初三的时候，没有压力，能考一个好点的高中。我休学到她的班级，然而初中并没有多少接触，那时候我刚到新的班级，又比较内向，除了座位周围的人，其他都不认识。然后第二年她也休学了，就这样错过了。&lt;br&gt;
    
    </summary>
    
      <category term="杂文" scheme="https://corningsun.com/categories/%E6%9D%82%E6%96%87/"/>
    
      <category term="狗粮" scheme="https://corningsun.com/categories/%E6%9D%82%E6%96%87/%E7%8B%97%E7%B2%AE/"/>
    
    
      <category term="杂文" scheme="https://corningsun.com/tags/%E6%9D%82%E6%96%87/"/>
    
      <category term="狗粮" scheme="https://corningsun.com/tags/%E7%8B%97%E7%B2%AE/"/>
    
  </entry>
  
  <entry>
    <title>iPhone手机证书安装说明</title>
    <link href="https://corningsun.com/iphoneCertsSetting/"/>
    <id>https://corningsun.com/iphoneCertsSetting/</id>
    <published>2017-01-18T16:41:15.000Z</published>
    <updated>2017-01-18T09:13:19.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文描述了，如何在iPhone上安装个人证书，以及一些注意事项。</p><a id="more"></a><h2 id="1-启用手机上的“邮件”功能，并添加邮箱账户"><a href="#1-启用手机上的“邮件”功能，并添加邮箱账户" class="headerlink" title="1. 启用手机上的“邮件”功能，并添加邮箱账户"></a>1. 启用手机上的“邮件”功能，并添加邮箱账户</h2><p><img src="http://corningsun.qiniudn.com/blog/2017-01-18-085321.jpg-o" alt=""></p><h2 id="2-将证书以附件方式发送到手机"><a href="#2-将证书以附件方式发送到手机" class="headerlink" title="2. 将证书以附件方式发送到手机"></a>2. 将证书以附件方式发送到手机</h2><p><img src="http://corningsun.qiniudn.com/blog/2017-01-18-085508.jpg-o" alt=""></p><h2 id="3-在手机上安装证书"><a href="#3-在手机上安装证书" class="headerlink" title="3. 在手机上安装证书"></a>3. 在手机上安装证书</h2><p>直接点击附件，即可进入安装界面<br>先安装证书链，再安装个人证书，个人证书注意要为<code>pfx</code>格式的<br><img src="http://corningsun.qiniudn.com/blog/2017-01-18-085937.jpg-o" alt=""><br>证书安装结果<br><img src="http://corningsun.qiniudn.com/blog/2017-01-18-090756.jpg-o" alt=""></p><h2 id="4-使用浏览器访问对应的网站"><a href="#4-使用浏览器访问对应的网站" class="headerlink" title="4. 使用浏览器访问对应的网站"></a>4. 使用浏览器访问对应的网站</h2><p><strong>Safari</strong>是可以直接访问的<br><strong>Firefox</strong>和<strong>Chrome</strong>还需要配置其他内容<br><img src="http://corningsun.qiniudn.com/blog/2017-01-18-090001.jpg-o" alt=""></p><h2 id="5-注意事项"><a href="#5-注意事项" class="headerlink" title="5. 注意事项"></a>5. 注意事项</h2><h3 id="添加邮箱账户失败"><a href="#添加邮箱账户失败" class="headerlink" title="添加邮箱账户失败"></a>添加邮箱账户失败</h3><ul><li>必须启用<code>SMTP、POP3</code>等协议</li><li>邮箱密码不是登录密码，而是启用<code>SMTP、POP3</code>等协议时设置的密码</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文描述了，如何在iPhone上安装个人证书，以及一些注意事项。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>时间是把杀猪刀</title>
    <link href="https://corningsun.com/TimeIsAFileThatWearsAndMakesNoNoise/"/>
    <id>https://corningsun.com/TimeIsAFileThatWearsAndMakesNoNoise/</id>
    <published>2016-09-23T20:00:17.000Z</published>
    <updated>2017-02-13T20:00:17.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://corningsun.qiniudn.com/blog/2017-02-13-%E6%97%B6%E9%97%B4%E6%98%AF%E6%8A%8A%E6%9D%80%E7%8C%AA%E5%88%80---3.jpg-o" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;http://corningsun.qiniudn.com/blog/2017-02-13-%E6%97%B6%E9%97%B4%E6%98%AF%E6%8A%8A%E6%9D%80%E7%8C%AA%E5%88%80---3.jpg-o&quot; alt=&quot;&quot;
      
    
    </summary>
    
      <category term="杂文" scheme="https://corningsun.com/categories/%E6%9D%82%E6%96%87/"/>
    
      <category term="Me" scheme="https://corningsun.com/categories/%E6%9D%82%E6%96%87/Me/"/>
    
    
      <category term="杂文" scheme="https://corningsun.com/tags/%E6%9D%82%E6%96%87/"/>
    
      <category term="Me" scheme="https://corningsun.com/tags/Me/"/>
    
  </entry>
  
</feed>
